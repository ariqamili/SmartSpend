From 0660c3d77681f02966b944d7c878482b25afe4cb Mon Sep 17 00:00:00 2001
From: RefikJaija <refikjaija3@gmail.com>
Date: Fri, 5 Sep 2025 15:24:02 +0200
Subject: [PATCH] Profile and Restore session

---
 .../UserInterfaceState.xcuserstate            | Bin 146612 -> 205440 bytes
 SmartSpend/Account/Views/AccountView.swift    | 133 +++++-
 .../Account/Views/EditAccountView.swift       | 127 ++++++
 .../ViewModels/AddBottomSheetViewModel.swift  |  31 +-
 SmartSpend/Add/Views/AddBottomSheetView.swift | 114 ++---
 SmartSpend/Add/Views/AddExpenseView.swift     |  25 +-
 SmartSpend/Add/Views/AddIncomeView.swift      |  24 +-
 .../ViewModels/AuthenticationViewModel.swift  | 406 ++++++++++++++++--
 SmartSpend/Auth/Views/LoginView.swift         |   6 +-
 SmartSpend/Categories/Models/Category.swift   |   6 +-
 .../ViewModels/CategoryViewModel.swift        |  28 +-
 SmartSpend/ContentView.swift                  | 109 +++--
 .../Home/ViewModels/HomeViewModel.swift       |   2 -
 SmartSpend/Home/Views/HomeView.swift          |  27 +-
 SmartSpend/Network/APIClient.swift            | 241 ++++++++++-
 SmartSpend/Network/KeychainHelper.swift       |  10 +
 SmartSpend/Network/TokenManager.swift         | 328 +++++++++++++-
 SmartSpend/Shared/Color.swift                 |   1 +
 SmartSpend/SmartSpendApp.swift                |   7 +-
 .../Transactions/Models/Transaction.swift     |  19 +-
 .../ViewModels/TransactionViewModel.swift     |  52 +--
 .../Views/TransactionPartialView.swift        |   7 +-
 .../Views/TransactionsFilterView.swift        |  12 +-
 .../Views/TransactionsFullView.swift          |   8 +-
 .../User/Models/UpdateUserRequest.swift       |  19 +
 SmartSpend/User/Models/User.swift             |  45 +-
 SmartSpend/User/Models/UserResponse.swift     |  14 +
 .../User/ViewModels/UserViewModel.swift       |  36 +-
 28 files changed, 1488 insertions(+), 349 deletions(-)
 create mode 100644 SmartSpend/Account/Views/EditAccountView.swift
 create mode 100644 SmartSpend/User/Models/UpdateUserRequest.swift
 create mode 100644 SmartSpend/User/Models/UserResponse.swift

diff --git a/SmartSpend.xcodeproj/project.xcworkspace/xcuserdata/refikjaija.xcuserdatad/UserInterfaceState.xcuserstate b/SmartSpend.xcodeproj/project.xcworkspace/xcuserdata/refikjaija.xcuserdatad/UserInterfaceState.xcuserstate
index 4680b375429f5d6e42a4ba71ad74d2d89b5fe76b..2052644cf32ab64b1263588919cf79414d191a6f 100644
GIT binary patch
literal 205440
zcmeEv1$Y(5*Z0oKb@!X=x$cIycyKKVE+Hfr2!td=&_Z`9R-_bZffiZ_?p`m@7I&8#
zZGj>csNl4Gvv=<%K>GGCZ(n)7=jD0sO|o<5%<RbToH;V|D=x?{EsI1>Apk)U48ais
z;UHW@(9JO{QBs;;RM_2-Q<6I{AO4l)C@U)N<|yhnD3M!MszAWRMcFcG`^+|pk%_#<
zDWc;D58-#tEXyfNkYIyc@+~4nM2HsAA$lZ?M35*FL*hscq$W}esg2Y@+9Ms1j>vOJ
zCnOWeLOLT|kgiBKqyQO$6e2}PF)|b>K}wM_ghVK09P%PE9+`~1jLbk@MP5T*N8Ugd
zAxn@A$VOxnvKiTeyobDxY)5t=JCQxe0puWZ9{CLU9QgwI68Q?bfP9U7gM5qpgxo-G
zB0nR)Aa{{_$bIAi000FXzy)F;0Scf5cHjU`-~w*o0bbw(eoz<G1J8hGL4D8wGyzRP
z3(yj@0UbbZ&<Es#JTMTHfpYLX7zbVilfYCk4NM0!!K>gkFb~WJ3&ES<EwBcx1?#|i
zumNlVTfzI_1F!?^1pB~#Z~&YFr@<L;7MufLgUjF=_!0aJegU_^9dH*#P=KN+f$~uS
zDn#X|0!>2=s1dD&)<)}~b<uk0Gw8EueY64E5N(7uMw_Fp(KcvXv?JOT?S^Kfxo93b
z5Y0yip@nD(IszSujzKAO96AY|ioSs^Ko_EKqHm##(8Xv4x*A=Bu0?mCN6|CrSLnCs
zMf3`qfnG&_Kz~GkLVrPTqxaDV7{E}Bz&IEevtU-thNWY6%z-&E7v{!1m=_CTHL#jk
zEvy075Nm|B#9Cpku{Ky|tP9o^>xT8hvawt&4@+SEu|li}E5?Rm<=9wk0yYhM1)GVz
zip|FsVvDf~Y&o_9+kx%GKE^)5KE-xnyRkjkUThz>A3Kbl!cJpfVqakwuq)VA>>Bnf
z_8WE!yN%t){=gpL2+qU#xB}PXHr$E3a3Ai+!*~R*f!D#G#p~mZ@g{f=yeHlZ?~V7t
zv+=%o4&D#X#q;oicoANV55-5~qwvxA1biYs37?El!(YMY;q&p=@i*`V_)>fsz8v3x
zzm0FlKfyo6_u~8TL-;ZL6n+jrkAI1Oh2O^S;CJzR_<j5V{t*8i{{w$SAOubb2@xSC
z)P#o65;h{8uoDi#Lj;H#L`|X=QJbhkG$I-kO^7x`C!z<@hsY*!i2=l5qKGIZ%7_uf
zNMbfIhj^8EjhIW!BjyvY6K@a;h=s(PL<O;mSWT=Uwh&v1ZNx{!c47yypEy7qBn}bB
zh*QLA;xh3aafP@_TqCX%-xEI&zY({H+r%B>F7XHPh=Xu=96m?E(Q_;uJIBFsa=e@%
zC(4O&YH@0FI&eC2p5t`lWOA}NojF}NT{+!2-8sEEd7K1i2&a%!#2LvM#Tm_co<nlR
zbEa{ob6)1m;LPRB<1FT^<gDjx=4|0?<-E)Jkh7EXF=sbt59ce+1<u!;Z#ds_E^;n$
zE_1%)T;W{h{J{B@^Bd<D=XcH@oJU+Pm&fIEm0T59&DC(zxMr@4>*hwdwYd$rO}I_D
zEx2vC9k`j?EN(Y$ckWPb3AdD6#x3U#;|}MJ;Ev>u;*RFNz@5mQ#GS!?g*%fwpZhxZ
z4em1Ta_$Q5O72?jM((@Z_qgwKKjj|a9_OCsp67na{f2v)dyRXYhw?BU&Lemn9+$`C
z@p%HCkSF5Fcv_y0r{~#t={!3x$P4kpya=xbuMV#fuQ9I)uPHBs*Ou3g*Phpv*N4}i
zH;6ZwSHvskmGR1X!+4{3V|n9vFY+ewCi52Y7V|22OL$9p%XrIqD|jn;t9Yw<>v`LF
zZ}Z;a?cnX?eazd>JHR{0JIy=8JIg!A`-1m1?;GB?yz9L0c|Y)O@gDLqK9|qqi}+%`
zgs<Rh_-T9t-@>=@>+tLH>+zrAKg+MrZ@_QJZ^UoRZ^CcRZ^v)X@4)ZM@5b-W&*kUw
z6a4=CLHt7gF#d4<2tLWD_*3{Z`SbY;`ET+o_{;gL`Rn<c`CIt!@ZaSh;~(dr;Gg85
z;-BW9;h*K7<Dch$#{Y_cng1RC3jYTGCjV#t1O7w)@BBXmsDLAo2&4j;KrYY=(gb#a
zPY@H-64VwvBWNgSB*+l76toqz6FevABp4(ZEGQ5R5floF1jT}(f)YWgpiD4A@PdF8
zOcuN(m?D@Zm@SwicvJ9}V3A<4V3}Z*V3T08-~+)Yf&+phf}?_yg0q6p1s4Pt1(yU@
z1=oZ?hzc<wE+m8;Ay>!~@`VDSP$(5@gl3^dXchW|eqlfu6h?(Lh4qCEgbjr)ge`@w
zgq?)lg*n26u)lDSuuxbc93~tk94&l7NDAi(=L=sKz9C#7Tqt}~_?B>yaIvsLxLmkS
zxJ~%B@Ezd};ZEVl!h^y?!o$KN!V|(X!morEgja<(gm;7wgbziC2#5#~UnCaEMGBEd
zq!ool5m8hW6U9X}L^VaVM72eAM0G{=MH!-IqIRP8q7I_2qHdz@qFhm)C?V=E8YC(d
z6^Vw6Mu<j=#)v4<6wyr4JkbKtBGFROO3_-;F41n$9?@RWKGA;B0ntIxA<<#c5zz_J
zdC_O0Z$%eHmqb5^eiYpi-4)#v-532KM#Y#|C>DvuV!2o$Hj6D{tJo$^7l*`QaYP&y
z$HdLWEyOLwt;DUxZNzQG?ZoZHS>n#(9^yQ4Lfl_GKs->KFD@0AiOa>q#LtVzh{uVi
ziKmNS7S9vU7r!okL%cw|P`pFDQ~a^`6Y;0wUE<y1J>tFMed7J%1LA|?L*m2YBjV4+
zzlwho-xA*z-x1#x-xJ>#KM+3@|1QBKTnSI2lBgvbiB_VM=p|_qv&12BN?ekVBrJ(Y
zqLNyYdXh$x3`sLdJ4t&<2T7)+yQH_Ik7S@EUouECSW+Y@k(5eCO2$aWN+wDsNhV8P
zlDs0BE14&mFIgm6ELkbpAo*T$LvmB{o8*?{p5(sd56L4bCdH*ZDPJm<N~8*@QmU2e
zq(-SpYLli*T~fEyFAYc|(x|kiw3f7<^ciVGX(MTdw3)P(w6(Oow1YHLnkDTf?Jn&t
z?IZ0c&6N(24wM#1he(G?OQgf3!=*E%uSjP~XGv#E=SW|bz9yY3ohO|yT_{~DT_#;8
zT`%1reMkDP^gZdP(p}Qs(mm1x(j(F{(zDVV(wowsrN2mjmHsBZCA}@ZBfTrVC;eT9
z%S1A<Od`|Bw6ZjrLFSaXWNw*97LY|`b!2sA&&fK;GG$q^&ay7DuCi{j?y?@Tp0aFN
ze_5fdNLDNxAsZ<hB^xiBAe$(gB%3OmA)70kC)+67B-<?8BHJq4CVN}<j_h68d$RXs
z+hx0Dhh;}(M`dSa=Va$)7iE`Zmu26{uFHOs-Im>vOXV`TT&|ES<tn*au90iyI=NnM
zk~`!9c~Bmb*OJ$kH<mY%H<f3|TguzYv*exSL*#|>B6+cVsJuj8Dle0l%ZJH_%SX${
z$*0Jt%BRWa$X}JeC0`_8EU%C+m#>y@mT!?Clpm5GmLHKHl^>HIm!FWIl%JBHmY<h@
zE&oP-O@3Yez5G}CZ}MC6M+!s%6sUru5GWK1rNXZWD1wTRBCLogqKcRzuBf4?si>=H
zq-d#VrD(0lQgl{yQFK-GRAeg#C<ZEu6+;y-DW)i<DyAu>D_&O2P`sj;shFjht(dEL
zQ?XpJLa|b@QL#z!f#O5OM~dx=PZWC;M-)dDR}@zj*A&+k-z$Dl{HXXzaYJ!a@w4KV
z;-L~(5=xFzrj#ocN~Kb(G$`##hcciHDw`>rD_baADqAUAE88gBD%&aBD?2DNl|7XG
zl)1`0Wr1>ta=3DYa-?#Ua;$Qka*A@Qa*1-Oa+z|ua)olGa+Pwma*cAWa-DLM@?GUl
z<;TiTln0atm8X?wlxLOalwT;nR$f(JQvnsK!c@45P;pdT6;H)i2~<LrRHadwRTh<1
z<x}}p0aZ{HRn=70S2a*ISG7=OtNN;PRQ*)BsytOf)n7G0HBgnW8loywJ+B(08mpS9
znxvYknx&epnxmShTA*60TBiC)wOzGCwNv%6>J!zcs$Htxsy(W`s)MQ%s?SuPtG-ZO
zQe9TvP~BAhtolWDTXkQJsxh@eZB(1oX0=6aRom3*YP;H@cB;MVh`NrtuDYH&L)}c>
zT-`$5M%_W(RozY9SDm9CsUD>st$toTMm<*jf|^uQ>T&89)sxgOt6x*kRnJpbsF$dh
zs+Xx(sn@Busoz#_SMN}tRi9IzSAVAdT>XXmOZ8Xk3+k`c->5IEe^CFXzNNmc{zLsp
z!`BEjLXAix)2K8?jY(5eQ%h4@Q%6%*Q&01Z=2=aBO#@9sO;b&4O(#vJCQH*x(_1q@
zGf<PS8Kf!HlxRk2Mr&qk=4f8kyr!9}nWverd0q2{W`Sm*X0c|aW}{}4X0zr)%}1K;
znjM-?HG4HjHODmPH0L!xYktxEs`*WGOLJRuM{`$mPjg@MK=Vk;(Mq&ZtxTJyHE4}m
zlh&qnYJ=L4Hmr?k>uBq0pVM~IW@@vvowZ%GUA5h`-L*ZmJ+;}|{@Oxqk+xVnN;_Kn
zympM1(oWD$*S@Tsp`ELpr`@RCq}{CDqTQ<9rhQxcj`m&cd)oK4+qJv3hqXtvN400Q
z=d|ByFKRDoFKe%9f7IU6-quNUQk_gE*C}*Lol2+HX>?khPG{8Fb$(qy7u40()zQ_}
z)zdZ5HPN-!wb5njvUCNyA-Y0ck*-)bR9B)a)s^YWb;ER{bd>HT-4xwa-K)CSbaQp{
zbPIHgbSrhMbenXWbq90@b%%6^bw_kZb;oqabtiNub*FUabQg42bXRrPbie9;)7{eD
z*4@|rq37tidZ}Kf_vpQPpWd$z=!5!@KCF-EqxzV>mcG8enZCKch5k8xCw-<qOW#f3
zOP{At=!fVF^%M1z^po{3>8I$Y>Zj?a>tEK-(7&ReqklucM88zOOutUQUjMHCJ^lOo
z5A-|qpXv|l59!b7KhuA%zo7qGe@TB?e@*|R{^zuuv_x9}v_WZu(~8oH)5_Ay(?+I^
zN*kN@LfVUI<I^Umy_7aR?d7ytX|vPjrp-%RkhU;waau*%^0XCcYtq)HZA{ygwk_@L
zwD;3KNZXONGi_Je?zH`B2hxtD9Zfr#b}H>$+WE9E)4odkHtk~Cm9(pAKcxMb_H)`V
zX}8nvq&-M`Xh00WKo~d%fk9}H8e|5QL2b|*(hM;}+)%?%(@@J$+fc_)*HF*!jNw^B
zBSQ;AOG8J)bB0caUWVR=K89>Vu3><o$WUw;YA7*`GK@CNHq0@+YIw~s*D%j8-|)KO
z4Z{M%Lc?OiO2bCOCc|dKhlY;~+YLJmpBnZWjv9^`&Kb@del`4NxMjF)xMR3$xM#R;
zcwl&F_}%b_5jFCS0;ABVG^&hhqseGCT8v(!&*(P>j1glEV}`MrvAMB@v8Az<v9+;{
zG1Hi3>|yL_%r)j2#~NQSl19on&iJBnym5kYqH&UOvhgM3bmJW3tHy=KH;r!@R~T0s
zR~fe$w;Hz@-!{H)+-}@qJZd~<JZ?N;JZU^-JZ(H<{K|O2c-i=!@h9UA6W=5-2~8rC
z*d#GYO)`_*q%bK>T9esiF<DI>lh@=k)iBjG)iTvKJ!5KUYGG<=YGrC|>S5|>>SgL}
z>SM|_^)=;~@=b$G#ipUA64NNtXw$2v*GzLw^Gx$iubbX5Eif%Ky=i*Ow8XU9wAr-9
zwAHlTw8OO1^s#BTX}{^X>4fQ|>7wb9>9XlN(-qTI(>2p|(=Vo9P4`UqO%KeN88;iv
zCbQXWF<Z?xbGq4Xc9@-Jm)U2In(LbDnV&H?HD{QcnLC&}nx8XwGIufeF!wX(n#Y*O
znqM%JX39Ly{Gxfhd4hSOd6Idmd6s#$d5(F3d7=4D^K$bF^Gfq(^A__~^EUH)=8w$V
z%}2~f&Bx5g%_qz!&8N(#&0m_oGG8)ZHvee;$-=R4Ej$a~BCrT8B8%7}u}Cd4i^^iK
z*ewo=(-O3VEOjh(E%hwVSQ=WITH09JTJkIjOMlA%%Ro!MWsqgCrNA=8QfMi$jI>ae
zah4Y?(=9JsW>{Xa%(2X~EV3-Ntg@`Od}8_3vdgmDvd6O5vd^;La=>!Xa>#Pba@KOr
z^0nm~%eR*6mhUY;SZ-VHSngWxS$?+yE8i-xrd#b+ht+9yS>0BT)ob-x{nmgrVy$hh
zW36j#Y;9s~YHed}Yi(!kYVBt2ZtY?1W9?@hWF2gM(K_Bb!8*}8$vWBkl68u8s&$%m
zx^<>?o^_FRv9-dw*1FER-nzlM#rlqQhjpiQpLM_W8|$~$i`Gll%hvC#SFBg9*R0pA
z-&=23Z(IMcKC&S;flX)=*~B)vO>HyT%r=Y7ZS&Zg*qYihY|U)VZ7pmqZLMsrZEb9A
zZ5?f0ZQX2rZ8^4nwgTG_TcNGUR%#n=d%;H9DBDciEZc0`9NVk5*KBib^K6T3i)|}x
zD{ZT6n{1nH2W$szhir#!M{GxJ$85)KCu}Eer)=kJ7i?E-S8dm9zuJDY-Ll=b-M9Ub
z&PnH{OVefPo^)@zFWsLWNDrom(!=SI^k{l4y;get^k(VJ(_5r>Nbi{bTzb#+Ug^El
z`=s|v@1I_nUX=b)`jqsk>C@7ur@x#&BmI^1nd!6AXQ$6ie=~h~`ik_G>6_EHq;E~%
zmi}J)N9nuM_oSamKbw9o{e1do>7S>6k^W`+<@E2;e@Oo^{Z{&IyTmTF%j|Ny!mhNd
z>}tEluC?pzM!Vhaw+HM&du@9idtG}ydjoqDduw|ed!{|hUT80}7u$#0OYEigGJCmw
zn0>f?gnguajD5U)nti(cW&1q)eEaM6H|%fOm)O_X*V@<FKeBJP@38N*e{BE6{;7SJ
z{gC~z{iOYr{R{h-_FMMb_B-~w_IvjG_6PQd_TTM)*dIAChrpq5C><(?(P46!9Uh0*
z;dA&MVMp9i!||-6zN53Fi=(Tfo1?p<hoh&Xm!r3%k0aZW>loxHag;jB9M3z(I3_tJ
zJ6>{3alGu9<#^rkhGUCkt7DtvZO1!~cOCCJ-gkW9_|Wl@<73A@$1%ro#|g(5jxQZw
zIW9OZI<7cwIBq)bI_^2;PK8tHR5{g7jZ^E?IrYvor@?7)x||_r*coxwan^M<b!Ir5
zIh#9MJKH<EIJ-KFoW;(e&Jt&-v&>oU9OfME9N`@49OE4CoZy`9eAzj}Ip6uZ^9|<$
z=OX7)=UV4F=X&P`=R3}KohO_pou{0qooAe9o#&kAou4^BcYfjg+Ihu!!+F#Bv-5%T
zq4Rg=A1>6zaY<ZKm&Iju*<9%^yUXEnx?HZ1E9|Q2s^x0nYUt|j>f!3?>gDR~>f_3G
z^>yXA`nhsl16+l!VXon>5iZh2xu&|Nxu&~bcFl6V=34Gr;acfh<y!4p<67%l=i26a
z+x4OABiC-%9@p2dZ(QHHF1jwcF1x;SU2$D?U2|P`eeb&Ay6yVI^~jC5d2YU2;8wZS
zZjD>(Hn=VBush<8x?}FRyN0`_yS}@DJHy?~-Ok<K-QPXHJ<y%+9^@YEE^rTV7rKkw
z#qKiqX!ncm@$L!k8SYoyGu^Y?ueo1$SGbqB*SOcZce!`F_qg}E_qq4G54aDy54jJ!
zkGM~`&%3{If9t;J{@(qA`?mXz`>y+*`*#oU@I3;L!{hY0JZ_K2<MsGFeow#?^n^Sy
zPhC%APZLj5PdiV0PX|v&PnM^fr>`f+Gt^V!DfN_j%00t8!#yKBq=)iM@=W%;;+g4L
z<yq}n<5}xj=UMOB;MwTe<k{@m;(5oj-LuED*R#)a!gJDd%5&Ot-t(pBvgbR`Po5iI
zu9xTKdj(#hSL79YC0?ml=9PQZUZdCHb$VUikT>j&c<Xte@jmOV?``aD=56O~@9pm$
z;2r4A_YU$7_7-@DcniHn-ePZ=ceM9K?|AP7?+ouN-kIK6-q*aZdn>$4ylcE`y}P`-
zy?eZSz5BfTy$8Gpy@$Mqy+^z!yyv~&c)#^t^#17m$$P_l)BBtEt`G46AL<kMgg(2^
z;dA<2KDW=~^ZI-~zc1hm`l7x%zDB;rz9zo5zIML$z7D=jUsqqYudi>QFW*P`#`#|K
zjrUFPP4rFjP4>Oyo8p`5o8f!S_onYH-y+{?-x}Xq-#XtW-!|VzzU{spzP-MEzHfaO
zeV2Tfec$=6_^$e{`L6rE_x<3z>AT~*>qq>+kNO3Ep<nIS__cnW-{`mcBmSsA=8yYp
z_-p!W`D^<d`WyM1`&;-s_&fRs`t$vR{Db`k{vrNCf04h~Kh$61ALbw9pWvV9pX8tE
zpXHzJpW~nBU*KQrU*=!uU+>@J-|OG!-|s)*Kj=T?KkPr^Kk7f`Kjr`2f6;%*f7yS-
zf7Ac7{}=yl|NQ_OzyiX6DBuV<1FnEO;0bsGzJNav2m}M6KrB!<&^XW}&@|94&_2*1
z&@qq|=oaW3$O+^J1_j0kCIlu1CIu!3UJ6VJObtv6Ob@&qm=%~GSRAMbED5X&tPgAm
zYz%A-yc^gV_&9Jpa3XLra4K**a3*jza4zt5;G4jez}3Lbz|TQ`P!JRbML}^;5|jpI
zL3vOSR0g#{bI=uZ2R*@9FdnQCtQo8utRHL^Y#wYM><}Cf92m?G4hjwq76gX`3xh?$
z;^5F=dGPt*_~3-##Nf-p8NvC%*Mn~a7X%jtmj>4c*9G?m_XYO{4+IYe4+Regj|7hf
zj|GnhPY1sUUJ70gei!^Hcq4c-ct7|c_%Qf;2!x1`I;06{L%NVYlom3Cj3GzJ8S;k$
zp&Fr@p?0D6p$?&rq31%KLYbkgQ0GvWP}fk;P`}Wi(BM!(s4P?-dLcxHsL;63#L$$`
ztkCSxn$X(Ny3qR2hS0{)rqJflmeAJFw$OW_ouPf9{h<S)Q=!wLGoiDg&qEhNS3*}q
z*FrysehCZ0!mubT4okw)uq-SOE5gdKDy$1z!tSsq><!1mHNrK+wZiqn4Z_XCEy69s
z9mCIs^TUI}gTn>kA>qPsQMfofG+Yuc4G#~G4NnYD3QrEt3eOJD3BMYiA6^(<7G54+
zAKnn&A3hL17(Ns}96l008a@_29zGF189p2SDtsY)C44n}E&Ox%m+-IQ-@|`|A4QM|
z9^plF5q%^rVu%<crieLWiMS)4NGKAH)Q;4Nbc{R~=@iL~WJNkhx<tB0x<$H2dPMp}
z5|RFq!bnl1I5HwKGBPSMJ~AOPF)}GKH8LYIH!?4>F|sMLIkF|PHL@-8cI2JNyOH-I
z??<*rc1QL^jzo?|jz!Kz&PP6rT#8(dd>6SA`95+Zawl>(DvQdail{QGimIcUs5YvL
z>Z55<bJQ6PMnlnXv~ILs^qJ_h(MHjXXxnJJXy<5`XkoM{S{xl3Es2&!%cAAcVbS5y
z5z*(PFGi<Er$whn=SJs6=SN?Uz8S5Eu8yvWZi#M<z8~El-4Wdz-51>-JsLe0{W|(h
z^xNpg=%wi8=y%bdqBo*9qj#hCqW5E>m^dbhNn^5@Jf?^#W7?QG=7>3C;aDUVjm2WM
zV)bH8VohTiv1YM$vG%bJv7A`HSZ*vYmWcI_4Tuel6~szoBV(gt<6{$I6JwKNQ)4q?
zb7S*j^J9x*i(?hBrLh&U^|1}Hjj>I!&9N=9_hKK#w#QDyPR35fPRGu~&c@Eg&c{BB
zeHFV9yBNC^yBzy2c0G18_H*o3>~`#K>|X5mI2Px|d2vZx8dt^*abw&Xcf>vMU_2hL
z5w97q8*dnI8gCbGAMX(F81EAA5$_$(jrWfi#*5;`@zVIP_{;Gb@mJzA<Fn$k<8$J#
z#$Suijn9kEkG~#&BfcQMF#cxzt$0OzeSAZFV|-J5b9_sDYkXV$gZS?Fp7`GQzWDz5
z$@r=G+4z<C)%dme_4xPkpE^4V%L@ulB4R{>ND&#LL^NI7XNCqRMwa$~KT{szE{@!S
zoYK+?M2;v(l*B3!6{03_3VTR;vSp4s@wzo@MQhd$Hm%j9X|P7!SS(m48f_MA+9X!H
zd5s#8So7x5Y?-Q6MzgL(C4)<gb8-_IMY-ie5`|@K%V~%M39Uj5h!HU%X2gP65gU?@
z*hzxqkX({S@<{<HBt@in72-r(h#T?1Zy&4xf07b1o5JpsI{L>0SOxw<hO=c29&a%#
zr(e^e!m^U0f`UXzcHQR9nrFnD)d@x$*K8cD(Ig`ttlPL*?O?oFljb!dHKI)-b?au!
z)HH+q!n~s4txB82amvgsNhAvUR6cE9k~1WcEepa2EptlS<qs%<&hfl1IR)j3(&i;a
zL)vF{N|crrmE`m*NF*KS898M+*)mrp1K6o1IVD|lO1tEj=0l>c`DFt$^9u(QBw$Il
z%vVX+Jiny03_fd7QdC~dbgAlX+9!Kqfy9k-%b-8Ma+IHZXPLf|T~<+1LBE`mR&2Z3
zGF??!vQL#o><raKn$j~=4|xW87O9UkKpG;Akj6+8QcB85IjJC(q>5CN8dAFo&Pg+*
zInn}YiL^pm!+B~8XGBlFNxnrcBbSpa;q0uT=SK$H%p6!WynW8F`~f*|oR~+Ie>N^j
zz|oRJs?KHk1^H$9iPEn5d1V6`vQ~wq#V}l<sHBRlvSyO3SC{<6@Qg&i@&N<jjLVem
z5<`kgMz$!)DIQq$l<h-h3%y};&GPb7eEIC_cSrgmp_NDvq$kn~>5cS3vXQ<>4w*(8
zNF!+?&7_62lD3sdE|P~Nkp9R3WFV4{3?kFX2>C2opKL*PBVQz6reE9FEw?By5u#td
zsJtXMk($WPtwNRk4>cW_Q#c?|nk@_e6U3bo#YLrbkKq8p@ybjTz;Q|BRdR!|9LaUV
z6u`(2NM*0&+rFqQKQ~d@CciAi{Q6iuV<lCxn4PCka{RJo*8iZmasg(`4F3U1bGWV8
zu`NeNA)%$nFl0C~0vSo#NeAg9T}zSC$n(e;WHjj}y`&F*!?9B}&o3xTlq5G(lacM<
zIKmhe_|9!}O3NzyO+U_-X*w77|5IWe!y}Q`xz&?=*#1mFCL)?ei%8E2<RxSZG8LKD
zg8{%oxY4>Xza~n1wa?7Rhx@IlFsEc>1*DqZt$k*PWC#tjou24VW)WP#kdSTT6=W8o
zS&Ymi{fm*=WPrv|dJFz(of8n6=OXiv`Ps5GxO8YV=|~6nz<Do8ltL8Ep?g7w$Y2LK
zi1cFve*lW%1V^ob+XbR`S>s$d%cY4th(U?&`DKYA$(Qe4np!Qb;FHomrMWafcBGdR
zWEpR~*IN<3c&5ivu0*ap!Q%_WS;aYJ1G~e?ON?llUszTl6!pj)l2cNaS)3@$gPW{#
zVQ$foA^Bx+{aI6sScaScQkl3<VnlIHAsu*>Y&gl=H_Q1BWUCM_7D5`8n0ffhJ^P{x
zZCZs+Z%0!9>^mLIZxsfkz0pwScYC8rWb!wj+!1=VO;-0lxkHLa&zwDP#l~&#e7Jkh
z{zIp~`sO-A3jp&IikBz<{mM-80%Rcs=4K;`3mCZWP+nG$UzngFgb9G6M?JM*mLP8;
zZz0qFY5HtgzwE5C7EQZEYh`rFs%iu7saUP5KObu{Yh-bvw05ew>@Jzv@n{uYa`-ag
zUMw8YDi6+ne*b)kZ_H~fMk?SWw9jl;UPgDgYJo067Sl_VU4BcERrHoyhAc-`AS=lz
z86)FljitzHWDT+wSx43+>yUNHddV$E10p?jd5OH_BFTb6kXfy8BPD3z(=i9mcL|)=
z64)nNJf_51Cx}DYvcTi(`Uy@=68(!x63ljlHEG6d2e%?`)B9r^S!*%!4q2PtA5xle
zQnofOeVp_I<U=F`w`;f~-1MVIM*`MhG%_Y&9UZG33s`H{jExz?a{U<jw36#C@)^>@
z7VJg#F+BbWP-E*HLQWu|WyoRV2yzrTh8!mwkPXR3WMi_)GUOz33W|X<$XT)}nE?er
zGqO27mg#?vhDme|wJI%zdPBCXW+l;oC?A*#G|a+bYg$yC1b$~_y(hq$p@nl(o?BL4
z0%y+lS9E`k><lj&yZ>1U@-GRye;{uD8Ch}>xk@kWOUPy9JLC%4l59n`Cfh7Ut|8Zv
z?~xzKwqysgBboKzCQE)rZqY05H?rMg<Tly<FLAzu94&kby}AE>xF(OERZ>(`MuJsB
zk=9^yxcvb}+dnOqNM&+`Ql-|U6#HI9#R;go7M0Mr1J&NLqQQy6=J|<&JVu@+cO8_n
zC5c>!H_U!bLP567oG7G$Ca+0(Sy>URLrdo>R4OHTG6bF&aFTOEC)TGucBWWFVke9y
zv*pi3D?EZUE-A?wSz)$T%2ZfC-M)w<U?r!kPbI=7>6SRnR#@(_FZRO20+B7Fb>XM`
zlFev0%}Pp&N+6S92zEXj;xR)9aS6)OO6in*<E7z9)cOypvSs=zHd*w@B>_4$W>1$T
zM>San!)fIReeUtXz}ebRQ*H}`Wiz2}nF|AC%V9|D>&SWtEXN_1oJP*VfY+~*i}(i^
z;Q9~{Fr-xm^uP=(zy<?aYr;U*2A~lPVa)*j!C)AsIumRLM;K9uva&Dsr04_J|3c|t
zQSKq~2fcuQC!br4JR&>&<pPF^3c!$g0M5W)D=L{CWSgH}>Ae4xo>J4)Mm1{ZqD2*a
zQH4PGCwhZeVsBLTb#eggjVAX^{*uxgI(O;bD^WOfRPq^8sVPXAzbn6AObrR(0RbEm
zz$ZH|212sSKO7P%91{6I8j`M1cRTUanAjcv`7yb_nk$wm)%rA(C7ssbL{DjOi-nIV
zaI~r>k&3FTYBlceKG`+{)|ZPagbD}+^q~b}0j(c}N{8q7FM}0TBB;OBxVvT)|1_l3
z=qiL-sEjnu%WFj|g-KnCp_PFoH6$`XcE)aS3noHkBWNDxN*-UrVk<1R!PcPeT2%g2
zYi7}+3a6*S<^Ge&_WJCNiXzFGtDNlQeuGv9czkUG1JbkMK`kE!pqIk{^l``}7<B#?
zvJ@&qAHWdv{ZOPIN3OvA_7n0eavOOBaJb(TKn;V&Lm&)daKANxq2jGUCbK#!cbLC&
zwIqK5z1TIQ0tO_s9CFYAEzrT8n?`mgdyqZJUSw~w&vL{COu&qIfEC!_@whLU1CPuU
zIgXZ7CJ1KqF}Xuw!N^u{)FDolCB=Sn2C`+^j3zBA&kd=0VU9prSTiZmvr1^q8_rh}
znxKwBpEX#XoyrRfA-^UCMY)4Zt7&gZ%Cel?!A*;Xun?KVFNo~y%LPCTYC<5G9GnP<
zlKseBGLKA<{g;6_r~zNA7N|`QAP2#h8cYtMUy3%ZB)j&6LI|}A_`GR(NeS$0+nn;k
z+<}=4DtAishc8~3%bfS3kg8?QutcjucuvVFC>Y6dY1*-KlIs9^fClCl<iR@0cZM*|
zw)o`v7z(eHD5Hf&vU10g#IXFLa;RiJF={7h8yRQ_8ZQQo$bn@3WBVqld_(AM1`mZP
z)jKm$wgf(Dj!f^|J`?`YJswNs*3Heyi!gjzf!2%20;XbH(C%r82HJx5$aGc^vIE@_
zbU`##1KqiDpbM9QuE~M!fq2NG<UkLFgAKK2C;L{73!phAZzMhIh0Tjf+9!s0%qfTG
z!Q}8TeaZ%nE1(d`fp1q#=0lCU>S$+mI;~NLDgjzA2K~trvfvEJ2ZO+1I4T8T2q*+a
z@G}&Y0Jy+ptc9;_QEu{h+NVk@fX9V_a0OIa2|7VFg@yp;IjlJ(C%>?Y917T0^m(&G
zf0k!e8Htc(@I#WN<O|udXr*S$?1$9chMJ8?<d)M1+Gd5r@=J;eY0D$i3iC$8!04r5
zI2Zv&f>C5SIf5KbK2MH43C4i2@ZDa3Ta)Th)n?~pZ^&VAmk!UCxg*xxf}&EWSzGN<
zYkr~iab)aQls7UoAVHswn3*0ACS=Qua7wBUmCUIr$+Kflen|zGNFOc#l7{WsWbhK8
z$dTkIa(K6_f%NoRqcWT=ZAAAQP9^Ln`)F43(HN%Z=4bP0<CwLS*<n_A7PD4Ocmt-x
z?ZMm%dL=4fc*Oi;9={IW$d-BFdpt4FRWJ3VX`%uwpx^1Arhn=j2kqnV99JhYW{eDF
zcfumD4C?t{F{l7bz*2HNIf0x=PFf0<gB4&USWZqRUm~Z#@Bb#75!eVeF*c)rtWtq(
z;2m0jc$=KM7`#hP`-l3&hfsgm{*UyB=^f<KtCjl0<4IrOInen(r$<b`xZ`8@2H9$u
zJ|;yJh#F>nr6ERWrME%#)ddw;9~7&RWbRiTXd!+UT8C-dFl_{G2@Sw)k#@;kFgg>g
zGt2_(4vnb2p#biO<Uu=WJ~9~Qgwgq6v@oVkfTN(@Z!Gcx%nN%FTH+=_BOJ6`z}&Ez
z$ZVJ$HW!%>v%?lb8_Xi40*dTqP-w4$MvL_@S8Ow~71@TogS-o~#Xd~ti+zlIg6u+e
zBYUAxKZqPkp4AzZ`V3U5KZi>7*D!PJ5`9=qo)CY8Ib=V>46@&#*r&6|9w1Nw1_;a}
z!(k>F)ck-jnN21Ga+pu1P73ohV1WCIR>bWvyUY!h1V5C8VGxDFuO<|Ib)a%i=a?}H
zdQ;F0G>2Jctze#6JJ8_-)Jyn?0FgYUmo0_qb##KA_%SilqbaoA4M^H~yU-H8pcE=>
zaH?hSBq6D;wAGw`K4TW#$8-ZqM8a@XA>v+1!IqP>U6wNSHHZZ2Zm<H(QD7?Q*a~_?
z+&$Iq$P~4KrOueum!USX)MiAS2{k^3tF?-5AVZgqNR}jD%-)UV$&xyuR+#Lno8{#}
z#958Y%V1Ud6(KXG+>bb!R|z1&t|`s12d#)QL&8vptC}9lREr{Urs-JM_KC9L&~_pt
zDrp&#T1ah%L?uI+qPi@bcEaZwnrB#=7(-E?rO22ylA&nGHU#a*bjRx>PNtv<Qk&^`
zQzRp+CDe#J)4fiODdfXYwP1(H%v5iMIGL%*m_;!ZZCE}YB!i_%Rc_A~1*(cttv|;W
znX8IYwX)bE6<gGWeXDlzX-uQt*ily@L8j3jl{Dh}3{5YV#>3L|VQDgEO<`#IvNSnJ
zFspMZEg0!R%4G@LabIQ#6D(l>>E8otE7s;k1$iv_K$bjX)+~m65KFE?`ZFvGs%YL|
zXbKT0GrvV$G6&|ABvQ*15;El_?8<{Hi{VjL#bXIWGmLGga)cobQ#6t-s+^b6Z1r{)
zoS_-R(p1huWp$D*s+@&!Z1s#;YnbZekqN0qEaNaegfvXiWVSk7T};swwtBlXA44;Z
zU0W))a%yqRVBcJiywbf({u5hi7Rx4M)>eki97M7h5i%@ZV@tbWDX5u;NGj+(&Xm7i
zRep!5y@2h6h@qIp?vJ<Ft(98&i>p@thfLKaY}Ei$6;dz-%h{Pt@m$GP?ehLTh5}l)
z*^%QhmDg4F3_s4$Y+y$rhh0OPSelGkyBV4-EKSqLXqck6*&<K1qW9P$Gh6gQ73afD
z^^aJZ$`uT0n4+ERd#9FmWx=Ox9k@xDx2i1K!xrh;qJ33Oo@V$SKqSkOa11x~V^mDx
zVYbl}j=}0o!7;X=DbwT$cCa&MeZ^3mVrR07f+;wQoMUFeEW?<}pRtv@97wGnnADxx
zr7|u<bAj!6J6mcef5SGAS_l_eii}y`F)dwYS41U6YN=dBt}*PJ%HW=)vF9SYihf{=
zQgwb}xwcbmX1LyD+bw#k>aQ&5rwVSdRWoMYV5;6>nO9PzI&`1yX=>TSs!WaF+0CAs
zfJZFPcE<fl3TUcI0UEQPq4BL!Rxq0l5bRv#Bs&bal{~N&3=cj#CCpqw9!&E<RJDK@
zG^{F;vPBTY8NQXZ6l{^1EmE;fX3ToTGzqm0X4ydytfFFu1L)cQFmDZ1so4QWc8F6Q
zHM4x%X<uacLKT4#u&n$6P~S-DHKw%;jf16W%C_vPq|uFKXgusxrMlo_DKcjB7>WSP
zg_Qyz#L~1=!+C@%7l^Ryn9&qKta5T@%NU9pEM!-XRg4|{+H6r}H!F+ku|<0J4IpQR
zAyhS(0T8i84cTsG%+@h9joCGmdbx&d<qY<nnj&ImQekDLPNhzwXA4pdwr1-D*g9>i
z8niK$+p{z|EKNt2rX8p2V$g{p%Vd?17|6<&DUz1-b~%MPFnEKp8diWVpnC<hb9Ae+
z_%#}8O&Z!NKo8K<-e^e2<X?~5{PaiwUPzGvj~>0?^$Z_^kHJBBDZ>SD9bUxnD|iSm
zUQnSX)P=_3RSV6~_V8+j9C)EZDf&D*0euOb1us%q3a?JsihcwyPuPbZhu0@ufY&Dc
zjNZd=OpIyZMF}n}ghjBrSQB_1LK`d#>kY3z7=jJMUce?}Gq8E^!h_Y=25cL)9bR#8
z1Urj;4KFqL1$%(wxER;q7TkkJ@p^buye-}tURf{zUQ#d;ABRuH=im#Iml15mKf?Fm
zN8uF&7x5qPTlgOYmyi*9c*%g5h!Ay?mkMMNy@~$tGJz2UMNENL2`nI%5$lO}h@J4N
zfD^>$#3gt!z>n}!fJg8$068ZOUIgId#5vD$nsGY7g#R4QAeihwjPn9#GEDG)jq?^v
z?cV^C`akCE;~eLF1{3+O!}R@!T#PG%3HxTQGnuSk7pCgBfhqdEx&66CFfE_rPT|hx
zE`VwH>$&f6cXIc0PjElye#`xy`y2Onm~JnH3HCOgj~C}P;I-g&go*ThdHFDfek4qt
zpURuXdjqD-ui>qOY4SUG`*=rr$9bReF2aQPUtvN#!I$vWd^6w85Ah=~3BC!x6~7a|
zCrou8%rE1Q;g9D}=fB2(3#PVjfGO=e`1@c|`#JtM{OkN*`S%5wKqOELi~^@11XI-;
z2wDg_3c3sW!36a(!5G0r!3@DXn1H@ouuZUCuotGDpA~#9xFWbIxCax?g+i6kBy<VG
z!aBmn!q&p)ggu10!UAEraIA2W@D<@)m^8jhxLNpta2HGxKa)%k|5<ongo#8Vwa6@T
zi$X97ypgDtsFSFtsGn%Cs0=20PZZ67Y2J%Pt3_KxZ;N)o^zJWVI`<XPO_;|0hnSmO
z#R!TrKS3|%C;Kgyu~v|e!7e0J0X_krk~7FxD!^`J4LK9K?xEE~KeRkiGO}Y19ij%!
zPo=3SBN+VFyMNM4mvY*(tPX;sNN5Q-1P+5E<ScSFIcEtt29ARh<g4Us<U*RIkq#qi
zmQy-1tB5hYmL;B}8)-@h2f{6zY!L>6<idyq#^~2G`G}56D=K7czD;t<atG25<gCPq
zvSjU3;5_&Yd=3q5UqJKWSKvbTWTmV`$&em&z)fCeE_6@!NIp!qM9zg4zc<JQCt;Ou
zz_;KcxCDGzWsqMt_@YB-A13)aIgfTmeFv_9tKDHBV`(xpft=r~3AALxNEK^o{(wTp
zlyx0^pS<jbwc92smq2{@AsNxbnCBSMpTLc$-Xi%1bXP0DP1?joo3$%nv9j=~=asL{
zaQzkh##pDHtoX!0R)AYHd)kKm7gSmO;lSD(6*o$*6n19sfrs=Wxep$Yi^#<l;CJu`
zSwSwLXVeW1z$MV!4Q=c2G*lT;mvr+t8vz|Wv_rI22Ao{m6O`=P{c)NTw0RuG!01IJ
z6r=R-9B3#;x#Uu^;PGeyIyj-SC6-Z$w*OZ8Y*IZ(MW_S`Ek?!Uip9{Zt)qKvpzYVC
zv@0YPV?rOH883AyTTO{-;0r@sSCgyA)fLb}<$^wyWJsvGvU=M@&S2=aPC7lH!?;_g
z%94};mk!{pG*PpxO{f<MtwGJG1+}6!G#$004%7+7ha2^fYsq!wdU6A~k=#UXCby7V
z$!+A@Yfv9Bp#e0AhR`q?L8E94%9<MFJJ1OG9{E1`0r??$h{BFh*bNH1Nn!Wsx3sc8
zimFJ&Oc>Txma-Dl=5rqtJVSeBa!T?`iwcu2ANoL@8W^T3;|P*6W?Fh1W|oaCNc4ET
z(3+9xpHp5?){(vzs+9KXJ!!p#vu`gh$%j#1BiZgGuZ_xkk_;|#wm6ZK>@DkTQo>c6
zY9r}ip#wJiw96ThKO}!t%Krd;e2m{FQIf1m&ng^-R5xMg@{3^zEj<JsnVz)G8Cg_b
zb`ouZHiauK116y~gFM=2R*q2HMB#vBsOV$Ql71^0Am2@HJhTPcvgc!^6=*AD`r{9J
zbbvu^tqNfjEwr<-E1(_Po{1EC!uf$dhjv0U!BDg_Fp+!6?c{#wllX}2`*;B76Q**;
z{Sc~LV3qMX%+~1+JrZaSv?tmN?M?0=KPGpPyDL2sXkTb*q{yAnJqQQsPc)^JxgSlS
z{UO~a<fr8DN}Cst^#%Nid*Ja$Xek`mGPE2W1`2!TrNXs4cWT?cEPn`eK;{f7Cijy2
zNF-a93FS$mUN{`47hh=@qDlVXK{@$@a>5y@YNg>Szry3crtEOx>bf2?L8H*o(18qN
zG+0KgGpPc7o`%CeD}u0(jzwQU$sWbf&BUNLd5}DiEqmr)?qFyH9jRMfQZ$I^&x`2z
zo=n6@(pR+vs)*28^Y|kuNjlOJCXe=IHG|>i&?ZPj;ba;LUm_2aY^*&x4V?`g!svAL
zWpoDm3OW;=MIIrKlE=v7<O%ZRa&!**D*77yo(I9}6nUD$R*<JC>?jRmPwZYfvq#_}
zg^}bbSErJB))MY!81W1rLdS0J)Lw!w6pj0P(mu~NP+BCzXH5|M$_w&n1ndaI+&d+p
zuq`cv&_X-P9$WiM(B(9+E=8A-XUMY^=nAwyc@C~Fh*%1GmozR-HJS3L%2*hKg~^S{
z48}SzdV@@cu17bZ8_`YZW^@bGueYIZqwk>aqVJ*aqaUCjq92jxDWIUhvlJLif%z0T
zO@Tis)J>rsDRdNtuBK2pC<ul5C@ho0Mw4UDp*zu!(NEA%;dt*tccXjIy-;J{j~+k|
zqKDAK=n<$Cu?zW$y~xDR+vsIX2k6rZL`q?J8sVgH;g>xYRSD%$VKOK><!OAHUj9TW
z-Ol4%3D#!&Qzb|%BRa`1$?wS@$<HVtr+|#SO8)R9;v9pA5f*X2BR^*mhZ*9tVDvKd
z9C{x84E-Gag8YK~iu{JWL|(4KkiAJ);Fq*3un%pErV*DpXR+vU3B3%_;{y3LIh-+6
zvjx}C>#*Qk@*+7rX~vcj{~D&;p)rNL!k|Z|e;YmMUWbzw^zc(JfIfsv;CE1nKEe<>
zouyw+X#xU!s3cJUebK`bP=CBmUdxvK7qp!O3Jk+===FzaS%G0mpeio!SCF5}jBl_s
z8TJqJMk?Lav`)nAPZsGy9TNj`O3O>x5YW6tN&sOzOo@b6V|+}22{92ogGw+dCd1^I
zg8YfRLEa>PCVwG+C4VDtk+;b^t1%U={~#_*hv~62_|phgsk=#iD4Tpp0U-rMFmDEk
z8T~4)szIhhAtpdPslXen7edHrmtP2#gJP&7{%LVjh&WA);4PEzBo7s>Kc#5}{qo5K
z7+TY;Mp2NI^_5$M)<>$*FoEky{0kNJ?_ZjLfydQ3Jx)c3cf&JHbx!b=Xs=UI32dl(
zF)a~jPXr7wfiBr<wTHv>lD3dD^y)y|$9!P)V$4t8OR2<I2+DOV49x}bL*6GJBtK(i
zjb-eS4y%pTLo^jw9jq?-JNZWi_6+tc`G^7-?IljjNEDRiF!RDFK$U|6m8FhwoCd)B
zphBpal|q%N^eGZ{0X4=l=oXq_O(}p-0D91W$C{HB6hKK&PkL06P@O34!-5l|O3C>R
zSPpHmj)-On)(&frb)W!F0fGXYCD?OVCkVxWO94Iw1aya8)yAjzsZM4>2?eJi{1=2-
zMI$rvOX-SLXIOX?s#c>kAI3A}l!S)UIYK9}?r`{fU_D_(PN=**Kd;}&vP5YInQRjO
z_(D<tR*z<3LzX<Zl{iHKXwrje9?)#lrwiP(om*v8V7-y)C$PSdK~8lB^6%TtuCcGt
z#Cg*`o&HSlgB6g0y;0tx<dMtXhzUAFWDVJ|8h{O=M|&WaPXP%9q>qnw=l*aZJw47@
zbkGRXr4kG-K{{`anexYkYXw$D<I10wRg;6*FmxX_0vm}QgjT8N(IXVlkl$0lOaWz5
zxM(O~d`h}N;}ywD7Yd|NK=p)t!6wq{coH;ly@XAnfSLkY3g{@Huaqy?Fj~IQEhVF5
zq>VeaYFa=?pgk#L9@9|&B^iRfNy`ul7#Jba@!u9AtP1*c{~i+|%V=>y0aLc@?{9`l
zyu?;wTWCyQ1ucbZu(jAaY(2CXZp1cWn<-$SfRzF^3ZzrOP5}o6oD^_Tz)b<qYHVu?
z-QUID!`_GJ{vqO_fR}-H3Ir%nhXQqJe6RO^_@2z_3zhzz_<n%K_k$Ghu>gOB-WW%L
ziT+T)PxeiIkz?hc65-Ea=V?SZi=CrDkOH9!>@)0h3WO;T`};utYwRKe^4}&wK0?FJ
zWg6t8q~~d1PbXNgx{m!s1N-;b57>_sh*O{j1!^wAZeTZQV6R1i+W!lH{SL(CyVY?S
z`(a|O{8P<Bb7rBZI=<UsG!5+714#R@I_>`F$K=i&(S-Nm+o!tJz7^e`#Bg2`!V%fs
z)M(%U$CJ>FV@c?K<}b#u8s_2xbRRCl#ppp?ipyxsZA4>k8w%7<V(uUcw0a72aV4&*
z!rT@VXz&E);%QK)#|^j<H{oU+qC!IoG^PL);>{?~yb^eE0Ry~^7~qvZ7VGl_^x|%Y
zt_e+-iY7`yFdhKVzCeKt+Q9Hcu+YDR(Rf`3qgyf<-RIxN=*M26G|U9~gdcmBdaWwN
z#v3t+-8x(LU)?B!-_UsjjY6yO47?fM9B+ZQ#9QI5@ix$-(~bgdDFDCQQvj+;9Vze}
z1v*gx?xrjXbY6{jVDKBy#Ix|uhzsvZ<98Ppzk5)iKLrNR_&xCd@cZw_Z#)6<8;3*O
zHHF`JKE!W)5I&gxP@o$Hx-;M8SeZ#?V3DB&FNes0m*Qm<=t+TI75FfGI0brBAeV;l
zf2fN8r7F)h@;pvLFviE=WAPU#(1!wW74%(#Q}{R<jB_Z^?|&YQ@s|)OKBYRq4%pkE
z>i|PW#`ulp3ofkuV>u1R_;g77a&_9R%bK+A)wbQE55AhS>1=%1en`s>!AyKkQi|cT
zlTs`XA~60MEyWVmr5JX`-pG@Ja0$y`A-;%#@VAl>p8ppNdOijz)!}>vg!5JSY6$0R
z@pUwu7twG&k^%)uIG;y>;ZMW)MtoBhoR?Ez$dhpX4h`q;;_u<_;~(H3QnWT(Oo0*#
zlv1Fq3eHzBFkQsJdD>&0q)i`5G<*`*chP1W3Jj&~Hjjlx{u#FaYjA#=f%9PuoDcqc
z;JorBN*{;x%BR(_{R;-$M`X+XTYHcK`V07V8tA{qzrnwS?)XdiW&At*3Vs#8MuAZj
zfJ(>n6c|H+u@r!NmZa#J7)OB@SL5HOfc^%46aN_k{jW68k7t2?G6m*P;8hyvU;96x
z|NDWS01)U2lmZh{Ku-`5=m`!CrGOs_Or*dh<{JXNQRYqI2O%Nk5I+bhA)~-c6qr&$
zC<rA5rcz+$-v;!Ajxa)?hY=lVgn<InC@`G@FE1fXgqa5V85DTse;()wCn6<W)xlel
z@zw9fPg_oXA8D8=4o!QT271B^X?@jcJKQK9H)&<YceDDOYyZR2I*Y1+o(K|=B+wJ^
z6ogP<7Q|^HMg#rq>Oe31(cUPK0(u2IQFV!DlR!^AlLUI0wDKP^=#rmIN34eNL{oGh
z(Tr$Ly9<a`G{!HaF&@gU*BKi;1rtr4G{O^YiFQ>O54-!u6BtiqLX0P}h|WY8qALNF
zi3JpRlLAl{!FOL=iSa~J2IChp7;k(G<6-;;o!~~};S(s2UZPcWXq<-{`hObPiDCxX
zmoUga@b5$RCqTXWyHu&{#Bc`Imu1WT`<iDkoft(-gg$*@H1Rw!h8Rn{K#(wqY8>$*
zF`k$}ffW>3Nr6=qSWSU76j)1vbre`nfejScNP$gjh)E2v6H|$4#B^XnT*NChv~Omi
z9d3zFC>WsAmj?Hf|NntIoz=zICzE-Tj84+Hd<49)sWM_9X_x=sV2~%?qU8YGeOp*L
zu!NQaOJTSi{7_&k1-3EYP!2SbMOk=ROKhO!z&ZlX{5uqQw}RM6Y@)z>6!`FOv)K@D
z6Ynt~_-+ye-={I`0~!QBs1AaB_UaNC;<t;I9v>5*5T8=uBMLxk#*QV#ZekBDJ$6#y
z<NpQH<1my6N2*JNX}h{gPc6<sH<iEl))%Wr!Jb3uaU9Z~s80Lor{=(o<;`}zn|Nfp
zUE^UNNNeA5laT}LG@T*7gidwhEOCxFPkaXB9>1W#E(+|Xz#a<hrNBN4>|aiN1^4LJ
z#5eG&8>p`xptt2g3LJxBbIB{F6iKgKYAu(BdK486fqtMTAJU$38k3vQ-WF)1Ppc$P
zInA2p6b^$o!a-jVba_2pn2}82PG-e26wJjYm1G_B3kzWc0iA_RN5SYT3sTHGKxbMB
zbas^58(w|#{eL8G(#!NG;syl{QQ&X|@iXxY1)wN9N_x7$`=?+oYOlO}=mvwaH-$Nc
zWu0OCQ%*rv0d$J8V|b5vfM^yI_bG6EG4YUs0f3$-s&vmOFM}Dn@Y1kU4G!Qib}|lQ
zCp+~Q>$aNE<v=?bN5p}4GLC?gw3D5uh3+>LIFl5*=P7XEDWS_zavrmjeMy0{PY7KO
zw39927&u0bi2~;+@Hqv(s1&uZk)&x0vi*z>o>5i>rZg@tW<;z^@GqT<I3Y%Qe#J=7
zw*R*D{FAPntdfwNnv8_}I$QSlHo-_iP8|-s-)}XiE~g&n85kH`pVNTTkkg3MnA3y;
z-%{Wr1ujwGG6lY)z!eHyr2stfK(EO6t2r5r0OYjfv;sE7#c4~6zaLof2Up?)sHMP7
z_VE8d+4n#1VdnIJ0*%v?0zak%8mA8wXq;?dqCXV)iS|IiFDTCJ?0)Uf$%iPx8NeAx
zftwWgxdMiN52gSFio1W?p@vh;DT88(Gn7-pfd-9VDexNwZY|-IbB57k={5!K{LhOe
z&KN|>8CzY{JjyN`U%aHn)lDV0NA5iHJXHUACpZ+O9ao)pvwh8jBi&m~pXpoD!!xuX
zT6L)5OyEpT%5x4pS|Sv<2XT=zg_h^{tIKn2u)UG*2{7lp!kJB1AIO=NJktFB7uBo7
z>U;>RZ*UgSXBp00@GOI(5LQtE1s<i&GAQq9SgqhJsXWV|912CAgw<6vtghy);jE=l
zK%qE=5>>D|pR*B~I#BrEPhvEzR=*xbCj8ex^`j)H!sy{-h+*r08&n^^jUjnY&Et@|
zD+#G6KU?;9Hjo0;y_^#?pzh=B=N#Z1<Q(E0<{aT1<s9Q2r%)k<iYQb}p%My}QmBkV
z<rJ!*P$h+`R&!3K0QD>}jXqCsK8Jt`W0~m?=4=Yp!}CP)Fo8P%4^aPpOA+T94XD>C
zRKo)5k2IkE#JNF#C{#<KI_4Wfs$8aHLG?E09u2B@ICm*DjY16-oco*y6l$bU%infF
z;38ZMHo^s16AFdkj#O}Q@H>T?VLX2|udd)ss%u;UR|27!D}>oQaLHLI)JCD{OSn?5
z3_>w#r%=cLJQQ=ah?J|V4zC~F6)n%kn(f<R8CJ9QL$`*8Vy*$w8mrS<N8AujZ`0VZ
zruK6`-pZQ^bywDrz_oDGlUT~N(O8PQAeM4*2*q&do*uYrSjzRF`?x-?A3ewoaziwh
z`e`hUQz+DP;J)oZq0y(XlpE#7s<1Rnq24F3lv@WbDQ;bEJ?=ByXDQT2p#cgFQfR0W
zP+^;wX+ZVUR(u%e1H*K42f|x%S|$qMReevIg8tnY8g54hV<Qa4cK)|9mW`qL(@s`t
zu-vW;+{UtH|3z&v$jj})O+e)3_T=`0xoLg4+1$R|9Bw~uE;o-tYfxxS3av$<wJEd?
zh1R9edKCH$g~Dm5zna^hL0;}4{3hoo#KkS7k+%Vhyp3riJ*uTaxZVFj@81u-+~*<m
za>r0;!xZ##N!mEGj6070(3Tmr5%Ue9*Uh5aWbRZN6JO#^p->2mO)I$5xYH>#gF;*U
zeZV`5`znneO}NlYgHUKQ8b9XJ_|d!?e#nWvY}XcWq4#kKcOmyp?pqYvl0sWiXzL~1
z#oP)Sc-v5D+y4c?y9$Eo>gr%Razo8VM;A6KT)X%}+nr>&FbTZtAnp3<wC{H_+^Mf=
zZmO7*Xf}0)vB_h=yNSD%0p2Z1;BEgG0|#$Tf>+wWWJM3mBN+zoB(ImlT>DqgTMd)Z
zz7Uf?;%<kSyp#JedIToJKuGREp)kAxLh?uo?e;Vz@8a&Rg5<6g+UZG1K1f6IA?{)B
z5$;h6h0~Kop`9tTOC=;fo^_MbWzl~ZdYQBuCV}QLg_L`hLCEg^HAyw>vizQVo5sf<
zxIc1#;@;ri<o?Y4h5IYa(!E8YJt?#oh4!Y<J`@UZt}lh=P-s62&85)1)!aKNe0;!t
z$o(DS<0Bd$6D&UFQ)oGb4x{mL`2XSK-;a+xF~mn6RA2h1@R28ni<YP0Dd`V|4xrG1
z%r_lx*h(f!O*k)&XM&rMXW&6?bP$COuHcz@778t((2~FHz|V8=JP_=7PM(VglXQkq
zXd#6bE#Y~2J{s(bDRk)nJlOG~h?Ezr4q!D8%+9*-QX690WF)U_+ga$_;ho^sgtWD)
z(`KLgV)Fev&F`=6Iy-Y0uuZN4J6>HL?S$mjqt$b0^gt?j^=b9I?9bG5KMYq%XAb;w
zP@kQtX1tb3xa74+!sQ4Em%RG4oGGg&XP{OHQ|;hopabC@SnvwJWD=dHI#lvHp!;~w
z@j9Ugd0D*9wE8-h#!4tHq4gVL<thrD{1jI5y79VKVdX>$ef|lo<Yhy*CQRPX;q~L?
z@}N=$MfM963f0x|6bc>eDRks@NV+v)bIA~J6P;861He<M;ZKKnFqbXz3Ya=1U8j2V
z3U4T{gjS2kQRs{RkG=DNulf4_e{w(juH3z6jFuuhf|{{+?G}y5AcT;ZHQy-O+O4Wp
zBuYh<+N;{qqO?`IRn5|+6dl?s|M&TP?k5sALL<KV|2^{cy|*Oie$Kh)oagJj&w9V{
z@)3EWj{R2)3;a0A=$#@Nz3HVkdP&~m?W4ef#FD?=O)Hq6ENT2R7_0k#l(}RU^Uv@v
zpzQO{qO*l*{B(W>Ka-!u&ql`!&x7JQP)q{_noTo6F%uNCKrtH>b3lQ=dLf^mE6F}T
zpI^W)45`d7CbEx*RmdMu%m>9Qpjbivy0TpM?}O~GCbIt;C|;Che=U*yb^IIT1&Vo~
zcu9IEvfoiB$E@ME@;iteZR59tVgV=?=JGrFH$kxo6idp?GUj*l?~zRQ5Y1aGYTjO=
zc`p~Id39#XI`;wpF&QjA<Uiuk+FA;VWuVB-Lzf>%$Y7BNisk=-!Qv|%0FDL^0K2DU
zE&18o=<v+k(^YmJ=#6JOaIp9W(;g2_o3;0!zgDhj_1uow8~rY&*NMQi6&m<t*>5RV
z#~J>dB>T9*g5&$EME3U**?&1m_Mgbe>4?57h_{9ytC;^8rT!xS3t9E$uMnw!ok;yw
zP^>0WAByXYn{So+-}ygoO8rJqyjE1|{~=xNI)6hzhen`S1B$hvSPu%^K9^PgXKAJ4
zb!nx-b8{C<x?@Xx4g?)v5d=X=bbK8s-oVr6k~2OX_pg*(uu4k4NmBCCpY)b;FLW=x
z*n;0waKR%f_?CM)UVe9(O3E$xg=(nWLby;ts3=qtDx({mhlMIaRpAj(Yy$=2y#o|G
zL4k1Z0>xXPcpDV&fMR#PP+d}PA&L=~l7%>;+<Ro@#vSp%Qu6=7b14sgZ%#-=;TCWq
z;@yC73(b%wp*i|4!WSss1I1qH9oI9gy2OAQ2<?TAs0PAgLI+Un2gUojLMH*Iq6a|n
zahaLx!V|)isKDq#sfW-L6bC`^0VqDq6Ox2pM1fH{4n24U7W#yQ34McAwRY1XDox)e
zne!S%{LuaF^Jr@GM+9_3E@TF$-CNcBLTgWxjvMM9cy;N@(djqMbs<a0CaT*=z?lgy
z>KsPZ70^}(1s-|0^^O!LpEMLk3Zq4>7SMb~ttO`(ZuhAmffgnx_M@+=r-?udQ%Nn8
z(+-N$ppZ^Gpg^CzMWBV}glRVg`Zy?xo^}xCpe-&uFT5bkMF&`D3VaEQqoDX26vsgE
zO@T@a6C}I(E6ElQYn_E2@`GeqQRvFQEbm1u?tdrHYbAj`AqjNp-GmgF+Bp%omb;KD
zZ<bW~)V-{ol#o+Einj^qaVuZgF6<C?3U3O#(AU`8!aKrlVGk(IfZ|(FoCU=>P<#i9
z??LecD1HP5w($9U;k|$qzb_n6oDHcgd`P7DXIY9bf#M$=LD7c3UT#B|y$vmVO{5r+
zxFAdM2_nTO(M24-KyeWizew*W#U5QnS&F|Gej-x*gMiI=85CD?h4aGCp!gLOxQAax
z7kz}w!tX?iuL!>ixB`d&{~Z*6<OzQWSBVr~1;wBL0V%!_5~d6Zme+<t<ukM58@%&k
zRz!pCZ}#m(q*zH|S~@uG(sr%Xk&W9PSw5rAm%D#x@aat{R&q)Vse@9i6htZh8%0&A
zCQ^(MW^a{Z_MZw3Y?28bXeOmWX%;nEX%aR0MhPDe(qyGmv0v#{dK3qhKBXTunW9mX
zDJ@W;#Av2Cpwzc$va+JGQh_E@N}v=)jArE{sL9G|%IfHDFhUs#6a^Fm6blp&lu)3_
znDJROf-yUCQ-?TDDzdLv<bq~Ec$Gd;#wm`-xad9mUn#P(g{a7sN>b!@rCxs^g_Un&
z7Ap8nHCDD4)tJ&G>B>A8Nr{yml~1A)D?2GWE4wJWD!ZXa$0wBCl|7U_feHgk2NX7*
z0VpF-CZNnfS%9(vWy@D4NlL6tk&I$xA5>z>9#CS+B^$+5z~x-9laF$jC?slaYFgkt
z>c4V{q8y4!tQ-cEBcQ~}k*LJVr$V10FQA;`pAz3thfOlxpqzwwD<>!?0_6tEldF7M
zIT<J~P~l~^kfD4|IfG;}4Hq&fA6dvy&cuZb%3s_<h9W{P+Fa#))NbXA%6ZC{fT{pg
zMW8C>DHkXgqIOf2fqLk{Yqv5N^*AqBk1ywDJ-SrghMCyp?bmz*t1+T>ufVh`gVT1p
z*t+kKuqLDO|5ASOnE%Gpg|s_gxkeISyc>b4S%rx2Ow?|yx?8n7SbR62_-;~eM)BRM
z+(yK=1`*$yKs_RgZwH{_ZWZ61$~SL{Zwye?ii+<ZBEIh`-&5{IU#|Osst!~HP^iLD
zKt<ma-wl$I){qQhYv)0!=-G>CS-|_*ztiG>C&MQt8IF}?xJTK@@NK?8Ax-{H(&YFg
z-TlonAkaT5e<K3@lk&XsXXORuMRcfpNqJd$MfodG2|(2Xsy0w{fO-_Dx<J(fsy<K+
zfNGep{5>Ghe+2~kIuYnbvOqU35a{;hrgGVv$|^Mqv`Pb1VnCo(IuvLsl1(D7@qd%!
z#Nyl7fCj3pDhCRH%BHdd)dZ-fxhkj11ynPj+LW1*tn#ZWq0p+rRTWeyvCV;M0aVL8
zRb|yfL}*(9^&dD(p{fxQrius_&y6D%EpELx@#?P79F<{J)@UNMs%T6b6P$KFw{rx&
zukFFN602Wl=IGF?fP9Ee6|bsAgtn0?ff&gYIZL6cLxi?nkkINw`^&A<K$R%UvkH%8
zpgccT!l&@yZjcTJNw%t`V!x`js*U0xdc$r{B)cn->|Q{j@sB1~SD>D}MY2^LRh@21
zb`PLB7m;igo?(AQ)m_y?)l>DPDha4AKy?G^aiE?6s(XQCt6GMVyBnCD<o8q(>zqLt
z&mR3Xk{FZ$6~3e8{IAqnHC$5bo|0O3EgQ8K2bv;fzbVwJv64_HCF$;4Zjwf;Ks60D
zS~Wp6Q8h{Rv}!WCG@q(^M)j=fIiQk(>J3y1P^mzr0hJC^AE5dIIx?gB<*TMk8m*cw
zX|!rC(dhoNMh_^^=#k|beIGO$Z!IoUEe9%7*65X}(KI?ACNJVKrkD7J>;xM6brr^^
z%T=vatpjQxP+7U?vVH?lgMi8@GZR|1RYf)&QJ}Vq0yUUO&6`A^@R-Rhvv}PSxn#Rl
zdx@~`LI3&h0W}1up+F7GQ|(jjC&E4)s1Xm|f>s?uvHmz%tSkGk&z$i`%S$gYN2$)I
zHsb073Oo9xSA80scKlzx4pg1fWbnc%ef?WPcKuXH*uPL6l_VOkrJ+PWRYJW5%kfE+
z<I}1$D92}2=ZGASBXW#0DI8`{j#mIR<yJZVLG|NJIer?bF-7J07b3@(RF_p(RKKcz
z18OW#<AIt06i&Y;-IU{#k_A0ZvY?Gbj*CCkq54N!=m2q{qaaOAK!%GfYWyo{R%<0`
zo?Iq|^v!~aj-m_x85mn`>a*G`>GRZkHlz#k$SF2UiCwi#T>(W}ZC5+gPPI$z#;6ir
zwNLF=hXZ<Fq)@7-0W}?{89>bhY8Ftlftmx<^Z9BLoe}@2A68c(H%Zjhh)BO6i}XC8
z^04u6z+GN0(q%8w>e?vMYMkKA4T!Y59$9m4u5N(ae<#VtAN8WR{dW=9I*b81R5w+(
zKrK)=Q=^HCD+=>-)h*SnfLZ|5;xZFzb$d10VWb+VJBUKP5CuownF#fwAfeXN3+19c
zp(a~~7{#QA8rRrf25JdVOY_u8YO-ZWEdvU#wmoRKuWH;fR2Q>lc<N%OURSOr?wQi&
zT90o&se{*9`6FuFGE^6{Wq9eSdSCq7rOmSZ3m?t<c2aLIrmY~YH;2e!0MvujIih5%
zvqi~%rGy&no+8DwCITsX1y(<W-r&`vfO-`JK&vstuzDQ2VAk0J>7-S)Le5@+S_RZc
zLCR0gK&vOIaWhdpg_F-fQ*Qu;o+?oIKMXztt$t2@b1#uXOJH>o;aB5c;&S!#>KD{=
z)h`0|8c=J1dL5{>1)6`~&Ois0ZjE{?QM%XFYt`%2Z>ZN}bexUqO&B3(3!p1h3JsQx
zKy3nQGf?=Gtw3!9YCBLn^3~e{O7|w+N&OZo-8)3-cFIck7V)D;k*ogH!E&j)4^nrC
zNZrRky(vrGC!{NVN=1?vP`hx&fV`0dYIwa-LwsYazg8b7N_R~C4Nz|b^-iw(g!&{<
zyMcPQ?3C`T`g=*~z7v&h4|00D1GRFwE~qaPnY)O=m@WZ@D!mt|eR=9D>R*Y>?FZ`p
z|A5S)V^ei8j!la@$gIY#J54cLcf}lJ*8Lr*1PzTrsBnbnt6@cb`=Eq+OVWksBo9jy
z&mZSJjCVHhFmmm{(d61`BL-z;kE~rqbZD*7YQm&gNJTUby~CvR&(-LNM{5#5DfpKd
zRznV0ktF?AE~imr!#Lm?lg6yEXskdT2I>e<p8)mga*bW%P@L7^O4MgS9UYHd>&*Cw
zZmrYOhY+*t@eUb%`ig&hLh_R?x#A%C7et^bh*l%#RzdSH$*rQMlBTleA)r17>I*<W
zzSLLCLn@;={15upPePL_R}vX#7YxmljIkkdNRGs5NKS|3;bIgT;xwe_Z}I9&%8)>`
zE8JNw@=NjKS=mF-a|pWb7=%94@$;4<NyMj<&=qo7V>FM3)Ob}BtBKRZYieo|G_^Ff
zHE4}|4b(B9kh$YPod61}<rGk-UzPMT<l(@7rHDyM_&vl^zW9zoJ{}>JGbDRx$`A~9
zpNdzjbFwniNHm|;8NIWKv!8+F%ccgr{ZzkQ>P~V5nWE{d-Y$Ln7L7aM?}|LU+U*jz
zNgI-kOZmw~lM^RJ#g?4ZSka`nEq2GDy>mule53(I(?{Iy(e1Od2nr<XN6}B*w(N2=
ztis9V=4_{V3}azw+5`3NG7WBvoFxsS$7nPKy;TglA{rQ)E}<=RHC;8hh;|OB^94a?
zG~G2xC~cY^nx2{`f%*=p?}7RuPtz;pVNGwKejIND>ZkD!_r#~RD2PMSgZv9Suo#~K
z<H+Mb#c4}&pMe=ehNh+!5LKbUSe<Al$wls`8CYCyS(w{kpnfK~T^RrHO%N+InCucC
zP!MfNGh8#0eCrWFU0SAj3aHB^ee1F0TaVL>2kHt?zu)}U6E#zcE5}qU2Tq@UCFS@H
z%Yp4EX$yW4DUPK4MP_Qy6GL#dy?_ruJLwPd0MT<s7(PM{V@0s2&|pL_@e5&m97$x7
zi2QWQ614{vAkr7<i;9hn^d;1c!@m~#N0P2$%_cF?4WkkoSFafx)u?)GbX3#o35hXr
z)uU>~)rxGKP%EltWP)76mo=}4)L5$v(=5>})hyHGYVtJ8HLqw^XjW=o)vVIwYgTJs
z)1Wo?4^Y>Ex&d?u(4jyp0DW82=u(yengyBzng?0{S_!m@JZ-IJo#qYAdNOy^Y{J(T
z%~s7e&3era&CZa@K&ye)fHn`bL&a&NmfQi*t_1BW&~CvWg7$sTqR~a#%+?_-1uuU{
z6)Xoi!2l^l2LrLeq~D3+k<&CQoBXl|2^}~rtz$~xv;pWz$u0d8!Rm)v*)eU%&0Z?T
zF{;>M=)gkGl^SMaoU$R964grVzvz-|$jBsJrSz=ql(a@eGcr>#pN5&4g%jqqNN<~#
zmYSA|V~$+Tt{5l@wHw_9No02Fi;bJwEIAXSDdO`S((fB)XD1Krg9ROkI^BC{pB4kt
zvk*}%ljwwE1cp^3Re+B%N#CPrX_Iu;TfZKW4)KeH$$^v#N)p)`V=<E8Z{)&c>dnw?
zQdKp=fH$e))9?#pP$C>UFxN&{>i&bWGO!Hd?{LF2RniMI-}1S4_|EJS)j3wj)u2WT
zQ~4{Z_Be&W+d-h<aS;g}G2umb3>ATA6!9E6S>=~k7d6K;-=W>E`9^bGb3$`cb4qhs
zb4K&6=B(x%&|09wfYt%62igF%5oi<8W}q!VTk|#FYktuDsQF2AUh}i&g65*;7tJN0
zZ9rE8ItJ*vK(_|2FL2qQjR5T!(9R>Bsix?StA_X<Blm`(gUHvsHH=P?H0VnU34Ls6
zMoRzISy}z14j1?Y21AsdiYbZ<$CHV{w4@It>7q+YDYkv{42*Y!-EXAag_3l&OZreC
z+E3f8flV<ARY!4{xf$RjNms3;50j%99kMbrZ|3#yA`2zy5=(l#Tn>z8mX%2Y)?w(I
z#H>Lh6Z?|xo^vzThf8`&!yJssg9BW0W)=p{DY35ckf;1mS>LW}L&!LQ!ew8kMd5Oe
zk0^9+R?CVDa<n5!*Qm7HGdE+s1@hDiT8uuqT&vWov}&yeXcy3Kpgll)muthcI;~!d
z-Ps4UALwwPA0Zu6s&~0dO5H{D-j+2qC(uu&A0|p6Q>A7tK7A+ATiYFz%gP|vm>ePx
zWk#yxqEAl}+bD)yA;D&pJG52$X`qNixa8j$i%BnPhSrHwJ}uTsh4EuQ)p{{hAO;N7
z`m}y+xVFOM1t+9{#&Mz&&=rBMS|+Viq2a#Bs};YiBkzi8AJSIEpmf@YwN-$A2<V4%
zwU2~00J_TfzT+dhNMECiRF|mV#eN%%{-cf7#^Cr;q#ACm(L8OeHjd0uN={aMSVFl|
z)zl_P;UncA)X~<(o~?Zp=<3U~^?;5j+Ord-o?RnJH}BqicEliQ<ix%{968Pzl$??l
zF(PFsE=&=VxlrgvOd<a?Ra}~GF%V<xrek_>d=C6NheX4ZzerPU3(^kFw9SEz1Ud?5
zjM`SXrbtH<GVHhQr#<E0w8sEpQrIkQd+b{nNE5x5$xrX3?Lw-lGtjZiv|WLYFIr7K
zq-u&oDJyL?MUZY^14E4F43RTU(xzZcWNj~PvbHzSHGxh5x>g>3uQY8s`DV3&ew2JU
z5|%fqed`t-J0&$~+@e#v4oMxGv~H5vsYScCNv)dTZT{c{O}e#jh_OfI1iqjrbZODC
zMWfbDI^bi-GbH9Rap6!q0O&fna7flrw1YxhE+yf0ZKFm-R`XSlijEmm%{MA4Dl)E`
zuV&4-F=OPfGDJI!)Zb8`>n+m`2Mm!>L_kMN^;aJ!o+GM{AP4%YrxF{c`Y@ch=8)i?
zQIWNhqvLBuN6Jqer=39Bd%PBaZU}UvT<t{dB%l+4ZahAs(^Kd+vs-o+b`ZS(RiXaL
zb(6cTtb9x=^s~4&q<v01O*>sX1L!6|V~=SGbgRJHk#;uu{Ty`_brtPgpqt_@1^GYS
zZ2Z^?^#cw+E4+2(=O4$TZ7n@<0a<OTLO!F#Wob++eu!>CK5?dHbzeckTrr`PRDLc=
zD`$;P&hSBE*0_Tr<|{t#W=CA7{g7DNF6|rI_1X>EjoMAx&Dt&6t=etc?b;pMo!U3G
zyR>g<-`2jP-L2iDeOLRQcCU7ycE9$0?E&pU?FWD{LFjfsKL&J1ps_z=XMP;$?m+hh
zItl1xpi_WO1G*2;89?_38rwSy=)pke0FCX3jW-hLQ9zFYj0-_y?N21d`AB<6`?2=0
z_K5Zq?Wfw$w4ZCg(0-}?N_$lMwf30y8|`uJ3GGSkDeY<P8SS^)v)Xgo@3h}*e*pSv
zpqBytCeU93eFYc|Fb@Hf2ux34h66JjnAO0%2h0gz{sh(tY;|Cp0h<i$C}8IT`v$Nd
z0DBI&5a1lZ#RAv1XxF+Rb*;8Zx)B9kD<cOZhNlhaojDS_7OF@}|D<#hsJwn=^3Z`P
zeLLc`8M{q~wDh_$G0DB-lB41yD~rjRl2px;bNbeeijIqptc8=HsOZ>QQ3+A8wc-;B
zr6He<ic3k3k4;OCENm)Vk&4qkNjJPS#fk2nk`SBHJE%AbF_8(eu?bN%qod;zB4eX#
zM#kMznwaQXsj2ZXaYagVRVqz~(v}7%D(P`?L8Xa{kBy9rimw?RpMa%`i^ad*TAG;T
z^!W6Ilp>}1M=DLH(l%A^)W}*X$w8%w!U9Ca#YDzO#bK+(M%9XmtQAz8-YGG0$*F~l
z6Q+=g)8&6(IoMP&sVR{~O2bK|>6WBdR+M|rfUMM^V(jCl#1XKlb=ZXm_8E#pSzXbX
zs3BX=scEePzo^lXoK>nUo>;0bc6%}yS0~|$bLs}iC=RTxMKn$umX?`?-oGNm2jjo9
zacZ2}m<-%EFWpv8?U$UIp4BIHK;L0~2d4KPnKOJ4PJ2^^X7wLF9EZ5nv=KE1;uH}7
z8zIhsBhcte#TC6Ad>|40j6r>~FnndkfT0*GH7h%!J;I6KMg&hZ8Y)FcmKU<TCdqm)
zcA4@%Sq@IQ1eNP#`H1u18x{j5Mqga3PRss}+82Q`N`_SRlw@4#7fV`7LkKr<(I87C
zkCDxsKn^*n{p;Rh+e9VQKqH+PW7Vb52z8UQ2gJu#PacG;>eVx{axg(;^#W6<@{p{o
zOwkK#PTiEO0X4*AHByJvDEPUwA|2SyC^YE^Q%knv6Q#6dV|u5=Cf7;{GOQD#;v%Et
zYDVIJA|vB!)vOgA6=YW@)J#oHjVfZv>ZQ{3D6N^FoDvtA7CZ&Is~K5(Y(no^X+?@-
zk&5$VDJv)XUgki_@$u0`Cml|yG`&h&Ikn<bV{ztCs2%Qpx|$vv6Q9t#NagsX;`DwX
zm6MhbRb+w~R!J%i?v0gZ@*EYHkeU!585LAHchis464Gz2o2pW2(o0vGn9@(>qhe~-
z>Kzqbv>QiArRiJB(!@rmrKLxgs&2^izGiZ4k$w{^m8M@QOLI?9^^Q#LU8_iGYDuNR
zh04<Oo0xkmO?-M3u3Fwaz8zLiD$T(Ed1*+$Nsmm6FH)Mo3jd%|mL?{JoCAn01yfO2
zl3MZUHH(y{xl}jVrIWv?IMnyF(vA&Lk&!8>Mb^i{+DOI0-Ru8-$4O6!N-a7zbdX9j
ztaOzVlbjHr7L{7e*boyR6JHA{#&yG(TG7#D8L`m#AuWTZrqryJP_#IbKXn>Ip_XQ4
z6+2@>dTMg8RS^}3gCef3#z)6ulIZyO_*#W~mslKJAWMsjEZTJfdoWLxvaN8Tw`OWe
zdf}|Zk@L=j15x4>JReh}BPUC3HM-QLNydf<Udz0T(jeq%$tgtzFkLFm*itrCTuQCv
zwD_2yy16@(E3S83Y<iK(=`R%r51s$-vBEt>l&iveJV+|dga=WY^ypYzD=%D{p;Bok
zm9jK3$;t6CwMx@*aF|Q0RVxxZj&wjeY(&^ZJXI4mGVH0aQDLLQ#)ORx8y7Y{48kS=
zJsIdJKu-nw8K9p9`Z=Jd0X-dP+)$gDA2vxk#ThnLx||s{4Nt?<v!tV(K!RyYZvW^d
z<%i+R{xEzP?nW*PTL|>*z^-E0%ebp3D8rVL7kaz|8a?Zhcf9vgNp9>FVXN@Kb=b<V
zSAl*3=()LJ`C+Spei7*TWp)}qY+cv}@ictcdU6_`CQ)+3Hj$m|mxAy8C}cmfVcWxY
z;qk|?9br4eaGP)e(D>aJ<%PW!_BI}frxyc_F>N38y`QjsAz@+rgKu39I+@yQPF91c
z*(;}Zb0oGD!x)4e#Izp-r+wk?jZ4(IEsw8J>`Lvv<){zu{m89zDC~%M96szYISx-R
zEurG%k9-++hS2*}*wL`B!;Xc06Lvi8MA*r&Q(>op#u~>>>g7Pc0`v-?R|1W#z6$7k
zpjYRIeH)<nd+F9**m*+lYcjofAxFBkNAD=7_dd}37oqoWpx4OsUPpTIY`^#ikEBR{
z<bx?XM#p2%(BY{`pw|MuE>|b$@c1m^y{XK&)rIK{BDXqp;)~p_&(#@qc#3iZ&>Mrm
z6;DLyY@wr;;%yuHlR$UGpyob=Sm#FXc3z-21HA?4t$8}XE}THT4QRZxEkYb|bH`FT
zJ%wjtl1KK*COe#+vPL$}$RYnGM_TbXARd5C(p4_u6CKiWhGq`wh&zdRe%BL}FbBh!
z_D;^OF+3x6NZ%tm3>>a2CUE%A=59}));Aiv>^OC-`+|O03H%XVbxd0$7~+s>XM4`7
z)XKYk;Dr|_g+4syCd9fZU91SPE=GiSXGygvS6gje6Qo#INB5|%uCAW0J_ZGDsB5H4
z)HMcr7tn73{Wj3=0KFUNJwU$;^m{<>1$tk;uBk+^uBAk=t}UT>zfAFg0*XH`r?~7X
z*7ZP&bv=Q8KR~grSBVt&(e)z~_toK%n}a}qkgMyj%LMvEphcIvctkxDuat=8ln(MY
z88IYnAUULR7fvAMzBE{eAu;jRt&YTo0Qw`+|AvVaV|3nI{3Gb;9rDLU>BbRqN9)Gu
z#sYm9=p#UXl1Fvafo=ja3-qTze@3+C4tV_wQ2(t49MMfh8lMTKF{|={E0<jjg-r{d
z`L^Ld6K06yPQ$d*gVXkyKV#aH8xyB4+?E%gZT~=1h}>B^ynunX(R5-cO!|wGYEG`U
z`MTwV+y%OYx<$Ihx|elJbW3&1bh$bldA|bsD9~R6eGKStfIbfN37}5`eG2H)`MOsE
z<gN;kyM~Z^Mke=c0lAmT$-NKc?jYpu1o~T<+_y?3cdzb!Lhe4@exT0*{avo^fDQ@%
z9%#JDBwj8l19CsseIk*2L?rhIH2-v;5xe=vU~nV0%RTU@4llUo>Auz-(_tq&5A@GK
zU&zy)(48bh?nR(6`0j(Yn|0qIjNb>tIQX&&zDsU6Ys>!aLZ8NuW3XNva(}|K=Y!Mk
zGF-Yeqj9smDOCC^UC*6V7XtU94)4+ua4(5N?&T6HPOi19dWvxSr|vJ^-@0qMe{|P%
zH}oO;P`v`^UxEG&=-+|<1L&(j{|WS8K%=d84d{RJ^|ZvTo|m}Qs|mN)1KctpGPjJX
zoZGVJR_{P=^-iE~1i00EO5#>uNsr;8a`lz<c-k}+7)7qWioPl^6fjJgajTEeM~mF*
zqX@SQeHY_~K0%K`obvRw^tJVMfMJ2*fZ=ht)z{P4C&Mix03%ZS0Eb(BlaMfd(_j)S
zH|xEs&#)%x3$&}Ap1z`==#NO>0@Jn(PP^z=-TEKvwK}|N$@*4<!dAR;lUjWneS48w
zeLF%eqrRJJ>!MFaZ1r9B-Sm&^pU`*L_t5v$KdDdB_W}l=5eAG77(FlsV2r?+fH4DO
z0mhoI?;XH4T|0+dG}QM)Y?;8lV_+P3m|MJE$W$uF_C8=cf?zum7`u!u2I0K@bXPx7
zKbc@VN&hr3PGDTQ`YHOUz_@`ayD-Q4>H1j`wlhU+JveG8&f=x|lR=|xV9?ONs9!*!
zou_|EKOYz$Fn(ad^Yjb#i*TrADgaaQ!4I|iJOpuhFo+-YJus~Ln#7|Mvc7m@#y^!P
zGSuo<V%k@O(~gNg{N%!K+BRQUr(^7~YiITrf_An3bqU%vBD5sL@f|8{qy8;|>?ZwY
z{TBUJ{Wkq}{SN(3{hRt-z#xKEfI&fi1ej{TR0pO8FcH8+0uz<5e>;HeyNnoCM!%mR
z8!eBtaq{{y)36-b`+)4{1lccuiII^#ipc7}ru&6HgU<h$SP1Pl{wZ>KN=M0joYtQu
z*q+gU3rsvPHFNdn^xpxK08E{-8*R_)FG|>65V5U=Jy3rMtz@Ql5VyLOa>;(z|3%3C
zLw{BOCoqo!Qx}+edHTQg*9f`wfobsI$u(d=14A(Z4QBP2zp;8;n`ajG%RMxFKzesV
zu7Sg}d@#8meD;rF^!F`hZ0Q!#dUDk(zuhF)pfX^5b~KU=IOWBmvQY{37N|9Y$>2qF
z4Q7MIU^Unbc7wy<G`I|Ig9n(#z%&7-DKO1|X%0*aU|Isx3YgZww8=O4By<fGC3FoB
z6Lj0k=(aCFw|hCdWsj~Q9?><_1g2d8T|@1_Xv?k>?>qJa1x3h}+qt2kF?J0@BLiN@
zdJLEjxrQbNY*{4Zal);yeZkVKw9uLpv^rJ7(v_S^D?>X((9qh@#?Tg+PQY{qrc0io
zz2Px}U{_$e{Ra^2hFCowjMd?D%WA$K+j>O)0M)EEKUMfgM6d^@?HQbwi9ZuFxJlyd
z`AoMVi`Jj)SqQ;ih7?lI$y6g?o<Q}=4cmmy|LK>CasDsYT81H0qPD+CZ4adOc6({^
zN3soL2(>weA%>xbVTR#`5r&b5rwpSEqk(x6m?U7(SWX6}H!vx{qym!$Ogb=q@(p7H
z)J~A5wuZ@s+P*Ti{R*bGL(8eX57fRusGSQ;hD_~CCE3V^C5BwmnU)%s0n;Ct%v?jB
zVL31ZfXOPe!Pc<K@EXY^pY+&)q{r%p>5M=h!u8~!(N^w%>kXR;=o<_h4V!=&1k7My
zvT<r_*lO4&PHl65!9c?gbS2sF7Q*{>FuWbAeqUwnr_C<Bn3*{sz4HroMbP(P+ING~
zuE<^aYq#BvOwS*k@N=7WhW&*=-)A@=QHxI8aI7767gJlq$A+&7wucQz44)W2HGF3H
z-0+3rOT$-&qri*+1}9HX0W%61q<9Q4V}Th5%y?iR-*7B|?a9Dk`z^tCf{g8?g28rX
zIkxu!+sg#oE5J;YvHiV7Z2vKa5TdRdZUBR`+sV1cP@@8vDZorGv$5958C8g&kv9rP
zTuPb>%rn3|n`cxTHDs)P4wz{VeylZ`Lc)yZV65gGzq;|@h=z~8vHX>f>%11ek|1cb
zVOo1|+F3has(GqK>kSk8k6pKrdlfgA<+Bt<m(h#$Y;+Ul!VRIj7;BA{jAXHp>T7&R
zq;}Sw$68|zV=aW%7-5VwMj4}xF~(S9oH5>5(};7PIlw#*%nQJvroRZxJYZe|2G<Q1
z0JAXPSX+YDSWg;jjg1Jji)3hte*tMdYE?P3We=^9xc)Grsk=A;t+7){&>FiN(I;`P
zv4^oIFiU`0nrlolq7j87Z(f;=wZ=4KUy?~W>9M(YH`W>l8nX%LS;j#|9A$C%e+8Ho
zdBz;7qj4xO$PVKFDk<W>-D@qo(fNpR6v8_?7~bQyru{2?*J8>1&vn<jSJ|*d1brN)
z9Uq)_Za?oMFRyN<*xKUT5B5CqaUrAHIMGPf3X$5UMQZc!VyrbzGtMK}PB+dl&NR+4
z&Nj|5K5u-%IM;}rz6Q)1U|t7iEimhVc>|dBz-$0!BQTrtjV}eTT_laQ#-#+?%`&!I
z3&z?#<=EZ_Y+onXV!LdSv0Yyxw%d$52~pdPJAl~+%=TR4n?_u9#DBe6cG&JQVq^(C
zZ()27nFVI&o!3>29~enodgF)2kBo<a!4ka%%-ea!!$uO9o_PnD-T#5%8ROC$i-}9W
zYTP{f!hwd@SH7cPJmj?#<3(yQF1@jsxb%ZRf9_ZIvnJm@U1fHgdBb+%8e75ee9HK(
zMC}=o+IR1w)_ydSNMFXEjOUF%8!s3y8h<ffGF~=bG5!k7USReCvmcoEfjI!oL0~=r
z=0jjU0_IS@F%ap?7>M*`B$2+Dk7a0aw_Q4@%zRT0ZP`O>B9XpK8ek3wpf!<5U$;H#
zXtJ6}oG+8jWC!LGU_Q+?IZZBLJ_F|KGBc1(eiMoFWePV{FjWNRb6{|x`%9donjSJe
zEDoAq0dtgO_W-wFO&I6PR7{+&%x1G5YBjIfq5MPbH|0*6Ob!qqF=3o9Q!#PAS{{1R
z+iGo#Kel|Ot6Z%+*Xt&Mrg#&H^JS_@%#CBBxnUwx`;8?`?M?MfjYMiq4Ml2?ld<-8
zCqx6w0jB1rj)<+Pg{h^fm8rF<jj64vovFR)F;fR%P6BfZnA5<V0p?p^&H{4|7~C=V
z9+)5UO`W8%*3?ZJYfU`}wm-_)o-e=_UE>n}Xyp-9bI|uU2`(-=?sf$ogZ)<#R89Q|
zwz#nLlZ@>^f~_BSe{lZ?gQGnq?f%HkJk&ITbf;ma;lTV1%!ORjNE0qtTm<G)nT@rk
zai$5R|1~m!IM)7h=TXBn)ijNe{*38a6V7`t19JtKU-L}UO*6<?`x`L7KlriMG#BZ8
zG1%&z#rImD<7_@~;isy4k5%q^R3v>qrd<%6_SKnlQ(ye9Y4;bEFON<f(8gYf^u?y7
z617W2YOmf!t*tP<L7-h}deyYbly6#Xdd;-P^tx%S2`%EkfcYDkYry;i%ynRH02=~q
zD6k4(seIG=0JNK>d97(XLd((tXjxXC*RuL@Xz#;VyPrV&KCp}o?FS`}wV#+iC(wRs
z`V3eOSU%VEh3QLR1z=TW2kkeelM=Ki2(+y7E+%NEbEY2&wcnY(H~j#t8dwdm+C0-w
zI70snY#14$Ssf{2S=|cw_cP=prYlI|ufZgSw(YpP+R_HcrchHXuaB<WS)}$4OnWsr
z?dNeH#eZ3`N&mTt6a3%&mh3J>?cb*B61D#jYFWcwRGXPLhat9R#>|>IGjA5mO0&wW
zHfzlI028ogU@gE}fwci^2i5_s6Id6p?tHUO!q#k(ur=EVwjLQ<Ujep{lw(`=*qSRN
zw&sU`^#-stS1k!!bCj7}F)>G*V}SJo8=h;9Gsgp40oW>pi89%*HP<oMM+D7}n(LbD
z0b3E+O2Ae|6WQF*+(_gP%lk0N?v5t%zh8U0ORA5Un}>v%TLfd(BXwM}EeD&MmRuTn
zJ~^+ajv#1mjcMBir+uS+Lr3VK#N2hYC#>x`Yv-t&2%6iQJCb^S3{7OVs%RqLarevo
zxVeXjtr^d0Aa&L52HW1|0R-C=bE-MboNn%8?rY94_cQl5X98OT*a%=FfsFz-8dz-c
zSYYFT#rCe5Zyp%HHamdrFoJD@jBV`#Y@3v0dmpf!M6i7t*jh5SQ%l5lrg;wOPP5Fj
zfvp4Vqq*ki%`X637udwI!*;%TF~N3$d7*g`ut;uwU>gu@mzbA|*fs>V(Sycz1){hz
z7{w0jCf7a;jk>L<`0?@UyO!d>huG$0+SS2nA4zn0n1ju)J^xkAnGX3A@v@V=wq$<Y
zOrp?Ijm+yrgQM}?Ah^Z6UBVW(s1e(yck`LI%?Am#@0fR+_n6-`zh~ZS-e=x#e&2im
z*yg~t0JbHtt$=L}Y#U(P0^1JQ_P{=tZ~h>F?Z=FGveEo0!M1~pEk?MO7Njr`dil&Y
z18;TKD9f3x`82`y46q$#Y|oX5?a$_42(}l@7lG{zY?oZ~CG%xqy8<hojw<2k(_IY3
zf$6jP4>KN6Bz^WzvCnq9^Bm0*Vxf_AOQ=O*p@4k?*zUmg$g?mO7H76>Phg*X@H1PB
zCM3+F4W{?%+w8s>kG89`@r8)CRW9!m&oo-}nAQ-S_Q0`=@z2J$nXo8+_t|Y9wkG>T
zfm*YeEjE!_i&dny*Im?_$5I8MwRkN)i{BD%sbHySsbr~adB}nU_69Zu*i>NCfK3Os
z53qfK%>cF^u>JEbRV8RGH6&;)(FEE|8CpCY6M(in7J1-CcUeMfX@JmLaO@fofY#Eu
zBxo(IEN!u8SXx_9d9#2Wlxt~cLG2w3Y}rL3w{*626QQ+q6`{?>?std7d6p+Fy$Q5Q
zmR^=*V21!Z6xd;TmJ~}Wfp$2s|A9E<7K~VHDJEj=>QS1k9#vZ<EnBT$_vGb4;_z(A
z!nA{ep}n@;IoPdk@cXRwFI!e+<a}8O+8oO;3EH6|v?LDsooa2gWeS0IjAg84oMpTP
zEE6mfEt4!yTP6cL8rU(wjs<ocu;YORU?%`O5!gw<KAmrw8i011WFT8+5ojmN&`vEd
zke@FfY0KU~wxCOzWtJttPLZJ{kuh$&^<!COA*T&3`IgndJ_GEtxt2AS*MWTw*x6-f
zAX_$Awh#h0S~giW13L}a>A=p&vuve0TDAj=cY&0^&LY|U`)TVPXTo<oueH35RJ{{S
zRgJlOri8rH<iO0Gs;9=rUD6W++43%?eJ?oe*Wb+@*XV4cKI3PPuEU<MfhQ3QhRyw!
zgOY9?5Or(LT^PHT!<J7aYCjRFec^6CbJTK{VEeV@nB^PGamxwINy{nAY0DYQx4^y#
z>^xv!0(L&I3xHh+EKXMz1N$<tOY$w}0@(gYZL^#YscgAGuw5!+i>G4}fPEd~0J3Y#
zxxEkEUL)N81MIQ@x7Lu7xV3UtCH4&~Zxw*e19o|?Rb^EJ`wFnD%ZyvA-fBi}tp=;n
zY65lzuq%OmHP33XTFJ<{3RnzC{-E!<TRkCRR&Owijq{&-cEelES}cy(y6tjEzm9}k
zYdEH@5S;eIAt8g}nzq_GkNeZ`XzX`+H@US|wpJna{191>dJWOdwN}OZ1MHe&?hoi~
zysmb@OtwZ@C6_eT7?Is|IO1BX;*}}<<gFe-<d4+05|1?2I@U+6b*=TR^{ox84Xur=
ziPpxzt_OAlup5Eh1T0GE7GSpmyA4>B&mH;JrV_f=fJYi@TY|0}Bc0t<FybC4C%5d$
zwGxjs)}Fx1A=0fSdZe-Tu@a9o*1lGp<-7&#+qu^M)=XgE0d`;6kvrHrl#rWk&9S1v
zyBpX&z`mPj9Y%GujsO;qP2q^Umt=RB!{dEeaz0`mi!_c4rqTIsm816P#Ms5Afzua#
z`YcYVk=zNGc4BbaIWN=u&(Ci0)+%o=jq%UHEeer4+4>Br=P86-yeNR=K8uGf*!PP&
zY@x3!N4vAmvPvFltfEI6_8<<rR`kP&^u2#ua_3u#M;hw_>q6@y>tgH6)+N@Z)@9aQ
zD=PDcz<vbmAz(iS_AszVfc*s6Pl5dm*w6E=uLQ_l#fYm?R^pL{{X!mezbcsEep^oN
zeIS>3q_OS<_DgxpEzu*5b+46pq_OU^?g#cLuwUm|4_FTZdkom)1f?=rm9l<pB_3(4
zhe@~nhICu~B^+?@rfu$RyWdyVZwTy1tzTQQEGK|H3GAsn>v8J|GEAQa77zSA@L~EK
z0{mStz%?!{I5+A<v$ZQ{or|kh_hWMJ{fPBPO#4%C+SBiJf2oeOdG3xXE#6(6`Ao$^
zuwSrV!dj#HTG8{47TB|QUX`-`VN(!juUh}K{$>5!dd>Qe^}6+jEyNZI?03L^59|-X
z{s`<(z@7*8XJ9V?i_4L}<l86-S{o-pYf}+uFUineDS-BRIkaUDt<8?m+8n@M4nS*j
zmt-j0D%u{xo?)wGs|@U~!2XtNd)QV5*x!M@R%XMkt%eQV(d5}8Y>_tHGyDVCtHAz=
zJ3zKrTbwx7{srvcB)hVjuKxR}@)28|kTBb$!BmAj{&$zne>NPvXyw`SS+Az8B?Q{)
zW7-D6X=6sr{Qadr8y$b?iGi9~doSS3U7q0D5^YUMJvS!0h09b#w{W;+Y8N-$1}t7%
zYa8BAMrv(sMQU&0SgXH8#@b>W3&@}8Z0m*C+Pc`f+Pc{uw>@F&ZtG#|X?xO^1Y9U^
z3g9T<Xy6#&Sl~F|c;E!!l=-&g0JdoXY%>sBP8GnG!z=pIVlrnd$M!y8JDgxU0ywpd
z?Whv5onU*Kbf<~7Nx*4=3(K`lwoL&}2b`tsu$^W@cQkpn>9!fRnZW6RGXQ7Iv(2{6
z!GV)A0cU>j1E&oSAKHpJe7N@WH(xtFzt!YLIlX&VZ<2aa#C9>JeK{E0rJG`>etxKV
z+-p}iw)#5Z<;{h#U1nQO5Nu?_NiPO^wcdGU*p_cwBT<X<VQd=vU3_GNZ5M%dqivII
zvu%rQt8JTYyKRSUr|nJPoWQw&a|7oA&I_CmI6rXVz*PXQV!rLI0JM9g#bnz)0&OK3
z+K1$+Ef-x5?R|juGXm}Bz*Ux^{i;N0Puk89XiwQr1BcC2CD-<??JRIrfr~6VXn(X_
zAkh9~J8%0LxJQ7i23++#+eI90F9BDB47Xea$?gG8ZEbk=&{oXZL(MhUGiGfw&y<#p
zo9ul*3LQG(So=4oy%r2@?4V73+9b6bxVgggk9E&(VG2Qe!>$mawTFt(M%~52u${N#
z{bU?#?Mji_n7jFm-tIzd?FPHiZnB&07Q5AMv)k<sJ2D#wTs&|!flC0c7I3wJs{`Dl
zz|{q=UcMdOy^%k5zl5#562Z2<jBUdLY+ILOTlU!6V-Q<A2JCJSz}8-~By8>V><zJN
z*z4OH0M`h(#9VtLdm?a+fooZ2*xH-hTO+pi7WS6*R=_m@t|@TM^6YJ>j`nuIH5ajM
zL9%;*dqDQiAz}6|!6?@D9ei!}iPl%1U0VIgUF{whug%&Y$Fxrbr``L-n7<CZ-1x1@
z)qQQ2^unn|fr)JIY41hq`AIa9xmLtPzO!c!d%8VC!nUu7ZJWEnHp~7L!FG^+usz$J
zV;^E4Y9D4FZXaPE2^`jSd*B`et^;sr<8%V9GjLsi>k3@AeEX;Xw&Nrd**=kA`?!oP
z9vKOk$m!+S-Un=F6Kv-I_k@h?T!JlL{SmMK5XWz#^S8iE$iB$FgmkCH_LqU{0bI{q
z`%?Qd;GP7o7vZQ(mZR(|?5jxsYh-^_9BPv8Vv1&8Yu`XnUuS>Az8<(_;Ccg>g0o@!
zCOev*I6S8Umqv<s$Jy||*Mhqo^pDtgBED}1<EuVxU$ObMmhVl}(lhH%yx<}uv>msG
z?Zs>jCsY{nWkRP0YnHMtQ_RQ4?kR-&yY_t&wz!~$Hgcc4skRU8heK-Q**~%$vVRO*
z25|j>8<1x|V*kYcDR5c94FYcP_=rLwjqG2EA&oc;2Dm_uTu*MCk@yX@gJZcj&Po|N
zAZ;K<gufY9zVKfgrlxkuNE=>5jGS6O2ScY0X`L}Jt!^z6vn+c^Vpe9|nw8TArUrh9
ze<MGNimjZJLUI&;jFGIwf3!<a&q*6nw|Z2K!ZDca$E5;eyug>sqQEIB7`$RgX$qb2
zFA9A|Dl|p}SXFj~Zj?1-NY;RkebdrPQ~qddlaec43N>XvXa6pw#?qzOZ2~{|(f(7>
zA6&3sEc%1X4m_^6Ru^x-V*l0toBenDANH&EKka|fYn0pU|JbkFZ#Y66p{n){%0YAQ
zI9LbA)!;iTK6I!YYKO+56{fOF9D0YrVdSqk%npmg>afu|hr{7yS}6SvkHhQmIsDqr
zs&kHtj!KTo)Myr`^*O)|1#UQSI7p2GZVYhafWte7!+}Cmb0Tn01BVL$&j9xvP^fX!
zftv}6Zoth3?s-r|fnw_T?}3{O+&tjs1Gf+qCqcmjw-~r3z%2vCX5jLGdj+_az^#JN
z7Qn3r4o&doK&gRS3)~yPZ2)c)(6K;aR$GAE2HXw^MG-iG_2H=Mc*If7QQc9)5#fk*
zL^+}zF^*VAoFm>*(~;n)<*4nb<9O6j*HO<=-_gL)(9y_|=xFR{;%Mq<=4kF{;b`e-
z<!J3_<7n$>=V<SE%+bNo(b37#+0n(()zQuIxZ?>&cSjFLPsfuET+4bBxTC=R3cLsS
z=D_CwzYzG%z@G&EFAz*1M1s%;ggzil0AV!<?}2a<lq@KHpllAxR8Wou<x8Mk56VNJ
z{0&r2P&EQo4^RyQ)gn-B2GwCu{RC<j)ILzx0d;Rsj|TONpk4>+&q4hQXq2Fd0!=H>
zq=N=Pvk)|UKyv~#e}mRsM2H-z5+WGRF+DvaGp%++#J`uHPT9!=bCOerVC;>Y2*Pwu
zMByJb9h#YWlk`F==*W;V$LNh6OPzT`NlGFx&U9L4PDG798AJM~r46c7B*3U+pp+8^
zX6$y)IZ59zkZ<u{EJw-?11~l!b#~3O2Ba1L^byk2F_2>SQa>Gsj6hT2--?yA!VNV>
z$`OMlK6WoT-Z7sEQa%_3vGmQ9m^>t{PgeHG9Jx!#KahsU!e48OlpTgSY*YHLg?Gp!
zT4(ji7+8E`O_TD#;Duf8DGwa}Gg6WXV<aE3w+DZr*-~bclXQJcompXYi=#Osb4Xft
z@!$1DDf_8Ox^|_`o^;HTSzajR^6b5IMgmuaOxSHIbE%Ziv?N`R(tn$PI+6Oyi6Cda
zOVo{5q%3D7>C#G_rQF>mDGpSn{KFFZPQH})tR!9QQs-TyT7$diS}BV;_tJ75`zB|n
zrABldo{>JJbBp5p;YKN+7w)Cy#II6NT{(B^EZd|kU%V$xCQ?FtQrs2myQCanO479~
zb$gZA8TUvTEJ)IIzSj)yDE#}SycXTdmnpGJd?;n`a+0oT>Ay_jX;$HJ<cRd}rT2<X
zL3ayA=L;!|+$3Fxdnvyxt(|c+8IqZn8l2HFDWm20B0;io5fGnX3*$D5drHcC#l6&H
zG2=(!raC8O@#?+Uy8$uHNc*=E`;(M;ev+<vsT;8bQ{xxu@vkN6+L!wAqU;6Q?KZab
zZ&Eg|-%B<`<>bD2n{57)vRQX8gM~co<wVGT3-0hYq<q%jlYv&)nr<;L<#wjKla?~u
zn564k>L!wBJOyfTyIGG@kaF9cq<g&7xfSZ{x7ZRvRq519`E9+YZ&$b~n~WHQF&&Ga
z204vVZrhV|txEmv0@egBhmni3#HJ`D7EYU#!_FjK?^5SbOluVybqfojw9eynIxFKQ
zfYar4J3UUX)93U%!<`kJ6`hrU+XdWPz`YIJJHYJ*ZVzzp0{0$pdx6`R?|eww1aLm$
ztj0|UsqBm(n*efrQ|=&eUx1<kUIgL3EZ+qv`&|HMUEBq5)&ousaO!M`y8zBcp>Fa5
z?!fq7;u{8mc`C4`=WOA`y|r9tODFEEeE{5txz0Auw!nP^+^1!>f#>Y#?24=U&Q8wG
zPTVg#1RO3>AI@`jb3RTE%Nzmj6I|OT+1=$5{C(KzJL2pW66Q<}Ue!<dW8aAPRyWVy
zVBawB`?ts7ZX<uhnTl!Cg40HxT72!Zs}1z)KI-)94R?zA=BmE4ud_d?=M1ue_Ziv1
zb7tb%T<-H?&gSZMCn_|k93uWtZl)ZkbPLld-ooU*!h<u;OuQ3<54g>p5a(zoxrON*
z;~eW8=N#_@=LF|O=OpLT&dI=i4csx{z5(tya3_E}3EU~*P6KxaxNq~FQv(!FleY4l
z<Q67(R^H0{u3#(gayi8J0b+6s)42q=bAhcqXNk8kovWPW7N#@bi7V2$i2XyZbB*(L
z;C=+|m$CzRgOl9CbZ&HRa^h0>Pr#iA?&mz`R_8VX@CD#5{s#bl8=)*_t8K=T6_5EY
zG_bCllxntye>F`67;j-Zi@Ak4_r?pqtVnJ+df~2Z-RBy5q6;+nkg9XPQ@Vxe6mMa2
zmykgI4J1(U(rpPm?36BHI#J%Vz+JhEj~sQL3#qZ%`L*+y^Bd=J=LzRY=PBoD=Nad>
z&a=S%2Hfw!{Q=xn;Qj>eFW~+L?iz3?B-eqvvD*1vfZU&$Y0jTX;6&#y$SxleV3((n
zUEp=1uX^6~e-Gb>TQqJWxie^=oi;46O4)Geh>XmP<m{2sZ#oXa<=G^iKgi*xv@0h5
zx<)2$UMA^+opP3?lLY4tB;6GPd}x4l7lp&Mi*_;O1-t@yN_xiud!Q~hFc!Gft}rCt
zrEzJ2$7F1-OXt!9&jBxvp=Gjp@3Oe;m<iR$Wh0ySJdeB3E)3+l0eB&(zw7lI<g)o(
z6;UW$epk4w0`Mx})xc}=T$NmvQ7CvUaM*(v3Rm@zFjtM>(fjIvWdmlv*e?5p*MI#X
ze)qw#L?~QQm^L~%?cq&TsohcS=5DO={P|M@b6&YA6s|beqaig`xZ+(kT?wvQuG+3T
zz+>|mfHwkf0^SU~WreG5NM%?3kkzh+p(}v5qDjo##wP&p7(bOb$2D{#d+~ujoKxe8
ztgHdp8;kz1Bf5_z6R<|OkDZ!>hc*h52ON4NCJ!8zoI~vUB%QP9XWM5C9GI3G_&}1*
zd+SFVr{xUE7$~mwOP{yjnxfsXwCwDR)U=!m^}jD-s<>La$jN+H8|DJ==-2dvT;?)!
z2|^D+=ttup?va{-m}LyWhYuVgcbd*FG!K`#x&ZH7hMr18kK86*4_6ZDlYL!yuMfMD
zyQDrTKReAe7zNdp?&{;}>&kHTbM<#+x(2ugy0Tn@fcFCL1KtmOIPlnCD*|5$_{zXP
z1U$-SmDR3nNl;zGT*F->gyz_2qllnZl?Amr@U?)i4T|?j6E-bZ)ReSD>~Mh|_`g<E
z*Rw=Xp9B68Sy5*YMV%SyCNJQt;RJ}hp`OOc9ppvVe9~R#xn2Uk2JjKNt_3dKE{_C0
zhS*PKqozw;d6JrvNFl&Sp(WsY1&s$jI#^7(<#N&TT^PMJ&$Zh1nrjX4vB1XxAD`!1
z>sm*|v?lNg{{b=Gf&#fUSRhZF+jU{sm6o5sTp{voy=!e3iekD0)9wsTJ8R+8J{^uH
zzPG&oXHf5BCmx&ND>SH4R8`(~?IWuCj%&ATkLz96d#=5}qp&^-d|lw{0bd{Z1}j|q
z5zqs!gCVO!MgiZDAlV4`#^V#lKXhMI_0GCkvhJ3os^9f^__y6Nd&qs^3)fNXLCggg
zUhMq<_{3c161v9@{RoBiHfnj&b(*N^Dd3xwsH)$&(0MOW)gMGvZB|0xlne8V>lzW&
zORmeVE3RK%zqx*Qo^oAv{ptG4^*8V>fNu$WE8trL-v;=$#7gDc0pA|@$AIs!+Vzhl
zs_sy?!cDp9kjieBh-yb!RJ#J70(>g)gGdVw{=X-x58n24n@}m;Xo_?SD5cwmO6j({
z9pnXkXW(%-Chw?~7M(ZH@@~Hy?YmrexEn{yZoogD>#pR+@$w1adzIO2)BT7$0(H+_
z&0XD%irgLe9>Dj+L!j;`cQh&<@J|AtM6!E;hd|v4Az|)X!CKb;!*gdRRB6-yr5Aqu
z*66*MMRd>oD5k9&oOXI>+`gZ8HNCd3U%OALe!F!hrj_ftfjdzgFx=?87YB@FG<Dof
zMDx3M@Q9%esn9@IL@wQ}+#OIZ-L2hi+-=?M-0j^+UK;S}!1n>ZFYp<__gmrai0E|=
zSsl8<jcwVVz?O+xITiSU_eCyCD~5MAP;WIt-M!suq@Sh`BXq#s7@_X|?g1#5?o8mb
zij_-UHMwna+|pW{TU?9dvrB3l`7@*4Q&BP9W87oi<J{xj;GW>hbWd_W?VjwO0{jr*
zhXOwg_~F2h0Dh!shCT&64q~H$AG6y1Oh7TGYv;IUx@Tdt%^`|8R#wdMKsN<`8t^ZX
zMx0-+m}S2%=Uz$_a~bgCWW`*Lipfo&BFT$vYy2&~6~t+FuXdyPmg|1ajm8@QKOxt>
z*1Zn+iNHToc3Qc~y^Uz)X7?8NR^TTA|1|KE^W59rJBW>leQWB2w-MdDQUCS?>tCWH
zp>u_e?dGnV_k-ofBYr%wi(0uC)9wpS+pPQVeH-s>-V>JA=yj-J{@;bP@__q8Nh?1P
zwendsVBCj@as6DdR0=0$B0qIw0M`}n&)lE8zi@x){>pt6`02pU0DdO$vw)us{G1i;
zV~E;u_X)|Me4fDd0`M>XA22B0Ke_QPBpQ_NpGAXm?i~$E_pk2Xi9-Gc{Ji27(jnLF
zHTMnDB7NQ0MU!$t2`v)%h==j$aJRz4dN>d75j;wd%A@vZJX%i}@QZ+74E)Q$F9Cij
z@W>!GZXWQ<fqy06qnEVNV`fA@I37Du#uc(M;@uPJ;t{{GToub+6+I83DtfTOR|Ztk
z^9ZUU6)7mmi%8-d(wiK;-V^PK!@l8(@!))R74Z4Fo_G&VWmg0LI#I<knQwa@^<XrF
zTu)uxZR1}<Rmk-;z}+^!Sl4Tzez^}e^|VAS^)&M|_uw36E%2z;Z{&Ged0G=KT@U<*
z2d|}`jv-;5PQm&Z_1?ak6A!dnGkf3Zg%NER_9j~D>56H)1*bi`aBYiAr&@H+U9%uz
z?!>F{H?`E$-9tjBQhhx=MRGSGxt<0@OV<Qxsa$KRo<V5Zc+x!So<5$wo(xYvSEeV^
zGr%*@lLh=1;Bj2q2K;v5cL2XrG;Q7lei!g>0sr=D&)@*QLp{Sh!xd*kDtn$H0KX#x
z{2uU!fj=_-BoW`^<qY2khA|GpGS4%>@0J;!h75bAduEUq@OyxNS9-^}pjr2b-0*Wf
zFA>OI^vnYuS7Y|&dggl;0KXsjgJnnZ5>GD4WGNx}eUaomLh^y)_RZNja?w_K(9cAk
zC*QN$^BV9U0RJKIALV&o_pBu(9|Hd4{{YFGk<Kl_bUvQ<UY&Q68;{)D^wWVEO~W4(
zN#2fWcLb-sS~+q;+X1aorhoYO?u4BQ^Du3N2GUG0M6QdsJbTg5@x1MM$FtkB$MdcS
ziTVWiPl5jo_|Jj=0{Aaic=jQ9?|TkNhR#=nHMED0{U0!NJfC~M!XCt2@O&v6I$z(>
z(D9t`oI*p#a}xM(iZyiPnmy<FK@!XFMX@|V#4?YF<$>FZ<weh5#LW4{bIEhrbH($k
z=Qq#qo<BTSJ%0j^D|M%VKLh-?z@G*F9Pr-(|2^<O0RLmY=kI_{-k^V>FNIY0QbZ+x
zl2sCoxECOFE@`)`<r-P`8tK)eMtX4%?|eWby=K%%hGjVNg3!qjIz@UfnE!cQUN3eJ
zuiNVZ9+x35=6ZczKk&Z*f4R)`(OcPDh4jHj-iO7>&m~-pV4}%FQRwrx>xAA2Zw#uV
zH_{vBjRyV-@V^58Tb?)88%Nafci{gBsN;RRLw(1kyCYs)GxHX+X4dZFpb1l6ZG3Ld
zlV7$yzdQkh<nTwl4KQuPV0AP!KK_quPxI%tht%(=sWGjP?;>wwZ!-~HZ&MN7Kkug6
z+IYJmyWY0mcHZ{h$Gjc99lf2roxNSWU4h3H?rXr~z;qq>8z6*$5DJ0<1PTN?-}|`4
zuD7Q&Me!yhy8;tnSHSKgO;H3xIlA`&-7JFcAP`s?-5ha>!X{CX7_tXf5-vz@@)X7U
zly?jPca(QD2s{Wvu6L|=90*DfbOhWo3E1YH<ef?&eA+wNI|T$42x<^CdERHd&mx3^
z7KE?|Z=!f-BUp2S!P+=t(c;#76R++H%~2UvWsMdg#Hgs=VxpqX=XQ>u_q9FvR$}$*
z%pBctOdA+Kz4N_`NIfq=+fG2|_#wHfIyxgz?NGjMt6jO?S0r$k6L1A1f~%@S^p0wG
z+s~}_ZYJQq=3V1`-MiMi&ijUUy?29mqjwVsW)LhOSV6FXU<bhgf)fN62yPHO`Q9x7
zaCZd2eT#tWmB9@!0Jlatxc33v4+*#*f#8$DJ&fRbkFZJP1%e;RmELh)qLDk*SKec!
zQyukw4MGJFD&~5>@g4`E5(p2M-KcxUdye$NM&7ez)D<eD<>&n#EkEI*piZbaeI^&}
zXD@o1&GTOHUiAI~LKP6Ig78S5_p<j2LB1LY)&B#?|AiR;9gO^QFQ<KM{4;U!_QM+&
z#8vP}<L-4#dm}jQkT0K%QS4|{eZl!HRrWW!KISI!K824F@%7<JM8r3ugo+E)nos4k
zAiX}dPvg`2!hAZP-e>R`eI_5G8wEl%2r(eUf)EEnJP0*GNC2T02(|NlR*7DpQ=-@B
zCG^&j>8)QtZ>w^8%bs3eb)?r<1B6Ed^!lQZUSG5?hP*(i3qn2V9qDbMi<X<awy!Ss
z5MLeNqaZW@p<%ACp07R#I7BolGk$%IeZ>6pH6bHUA{lvn&2d#hXk6T?g7Ar4w6?wu
z$gi)Ruf6Xv5SoI}420%+zK*_5gx?k*w0!XV`nrdN`FaF1scNF~WbbS?_Z6*Y{<PU!
za4Cg9;!DD`y@J!Gt+|%@+k5RQkKg;^M9<+bW)$K##g{Jen<nzx8u|4#C&Je_NciMh
z%k&K={0{I9^kw-5`3C#4eL21%zM;NhAhZRc9SH3~!20X}0@h+D5ITd<1%$5oz7YX_
zM+f*FPx$R7^ZP^rziH+C-Uoj1=-e{jOb{NI`JIFOD$e4e9em+(Y%lR88_mA?K4Q%I
z7Wfu|&>e&xxxU4|mqF+WLQ0t#&AvR}N<!dr-z&ZqAUp{IngPA?e6RXe5dxDzz;$o&
z5cC7QNaS0GRJ{>Q)%xj^o=-G2OwUjJFg#?*3+Qbg3EYTjHwC9nRkXhTjk8^irH7t8
z`{v*#?-U|%t8WJ(u#s=OXnLd~fp@rv;CsjSt^_T*8N)$0{VqOo!1oz}_Mq<r--o`B
ze207=`wsh#_&)J{3PN8HGC=4DLVpl4K^OqSKoGJ(z$w<?eBb8*XpaV<Jx-v_mZ2R|
z0PXm4Xzv5G=LxhwgODRb`wK#Q+YoNPKYS#Psqd=qPY{NJFf7;ix9=JV!$BBRX3+XW
z{b=*$`4xW3PlGT5gpnXTmFH*u9D#Ne2snRy(9rs|Az}WoU=Ypxl^z?|#*aPMET-qx
z{MVBRw0;AoH3p}>p0>!>s&iAr^x8Wq+P?#Xz{oRQzr`=zrtpimDTJ{|px;S`&2d4)
zran|Y^Xd2bD~R0saiWRbLJ6M=47UC%{y5x>^H=ph;;-hf?yupGaGvr<`J??Yel(FM
zf-nh$r$Lwu0xmjCB_}h5XFzxsgy%q*w%Q*r!RxP0|Kfktk9QRO^$EVyWqfCmWoBU!
z2(RKwv#_ch;j%~A-v$x(qhT~7fUy5DMA+Yf?nhoA;3>gw(mUGC?c{cU+)v`z`=9XR
z&^sH1Il2CxejFa32Vs8Mft=#+LqJaTr}@)Cz>Y8%gctMtef=2(<ar>x^dA6u5W+b)
z7|zM(w*3@Qp_zKJe)F&c<CN(l$U`vg(BQQ5x{dp-HPv9tD}S%7`-kqYqlG{o;U7hi
zY~+7R9DNty@{@lIS$+~029vCBBR9_k|1-D;=bz}G<bT>f*+0cU6@<kgpnbFigry)X
z10i>X|5@a18aa;XN3$!B5Vl-Ajw!78|NJ<nf4-j>hs*{4Lb3-ZymH4qIDf7mg9|M4
z=Yg=Y*gZJiV{+Z*`=yuyemv-bDw$tWlgOXh;3q)^{2Tq7{G0t-{9FCo{M-FI{5$<`
zg76v$Ye0A%gtZ{71K|x2)`Nfzyb**=`Tjsq0skJ!yz%cN`nXxv$E^kC&7N{?ybsz)
zf(rOQ2Vsk>jU=c5-8s}vUJ%*`@Ar_mf;~9@Nk0iI;6LR*4Z=1Mw&(i4^`8Y{2MF(!
zoi6_9Ct(HrKl#u5(e&C00`{U^dH#$3Ux+Tg1;X3^0bRtf0{&vc3RL!ApE=`?mX}^)
zj#8aZZ8V9x_&27#7Oaco|LS$1>YOHn7f$Kx-x9Lxr$V}TBb<a42oE6(D!a*oit0_W
zl%HL~QhqoeE`=2c7sCn&?~<kbH^rs=>>w=-fE%t4Ct(G`4dKRcQ@A<Y5^fE*h1<g&
z;Z6|tg0K&S{UE##!T}Htf`C%<AqXFVa40_<FGG_*;eH9+@Ja;Sk7aO=6o6ZP#7Mrp
zhxbc~lccO{yj&W56PjF5ZJL#tnlZ2sp4tn#Og%h1c@XjHoO2`uP3!O&1UDQl(8B?6
z!%0{H&-73?dEwzAaxo9z3cwAo7fu2Tgx3$pHNa0m_%t`XQFtN<pMmft0k=$!35GWh
zZ-tpqjlyx^4wvyiM*};&4Kd5V2<m|P(Cu;`>=51saS!hp-YFcHs=fl@C<tHYg?A0_
zMsPm{!Z!~d_i$X=3omAAZ};vS^TthX-F4;n+eZ%=v+EqeJv;@|rUv7_xc%C^S<koK
z^8eU-54fm~w*CJsh{|bTjV4yM_h#>+pol0+v7jQt3Mc}?qGIJ%W2}j>L}LeRL6c}=
zNi<DO)u^$gN295lqOl~#{=a6IRTFH_`{Li{{eAo--&JAu%*;J=-E+^JIdj%u%?|A`
zZz<mL<D1Wfq=pP(hD!@c_l&u0=gXZ8=d)UN$XLuwLWYOrgye>}L-ImK)X4}L6_Ot^
zI%Et59;ZNf=<g};2MUCL#@-j)u=$w+Pf*}V3jAeV$hcDZQk{_@lh}i}Ayb%ueH&l`
ze`gQk2LA1R5SOp;X!I@r(Klos6ER|b-yWEdg%I)Wp04$^`SK99c`sx|2;$pQ6nMHQ
zq&Q?H1>)w{U*$IXhP)8M_WFgCgscle=yrwz&r;yI;*gg@*j~TD^Az~!e}Npa*DvHY
zd;Nxw3Trq}>M-T`X$QhSxOV!wM~>L*7jm1uem!Qd>U<!w%jE^NT1NHn;V!&Ij&FtR
zV0M0+jlS5s!xhz8#WqPgZgV@s*EAo5?8A&C<in7ULUxDj3Hdk#1LZ{u#QETtDG*CQ
zS1It?>X7}=*#T}0w=U!`1zyLDgy--mZ8PHi9>|R3&d<aCZ%;5#w*BYxv>``Bu*VNG
zl8|F;M#3xZIU@=AIRv}?3PVm1?|<7FiO;g9LcH%24e`8Bln;P!ywkJZzOP(RviFIG
z{2g*J<Wk7xkSifqL#~BfS8_@P@s)_LOne~mJn;hYBJmROGVwvg2bU;I-zTc9R3TQx
z)I=%3De_fHqZ+;%DF&1OZq{z~9(ly__lQdNLQ&=8#8)j1Yn1GTqT*qH8-x7c!p0)@
zaU-lzs+3xEJEdBwA-+2CHHwrvrJnej#Mdb|kEpaL*(*hrR;5j8C;l<wYY|@?&(A6w
zDI3EV5|0u;!LqyO^Ro}^Hp)R|OD;&+s%+5Fc=z1cZ>L2D%$&-lxHo_PGV_Q^yi!zo
zn^%e^9{y(Pr3>Mg*7uql^R5DGDmMZYWd|jDrKo?XGK@ubJUc1`2L)iA#?M_Qv@2Di
zva8bjN>Qcfm7;w8`}t0sG6_+QGG5tB*<0C1*;kpM?5FIn9H2~84kW%I@gc-3iB}P?
zCLV3BB_0AriyMeHu2T;3Mm5U80W+0p?7SxBP$poLPr!I3-A>|LATWl6ADu3e^H5J0
zQI2M6A49y^r}ptsd*zK-eK><j3=RUr>cjk7CNat<mDuA~q@1FBig+vWwj$*;<#gg9
z%BJO~_GgrHnc8P7pH<Ew-a)*R_(sLbdCK{SfB444<N2P4eS1Z@1PWeSR_z_;f1UPg
zLZ>>DDo4Nkk=5aO)<L-fX$#Ay6&vN5^0r5HSQOW(ZOP0k5UFoEqFkxOZDFSN)gHAs
z!;q_d0rNP%c^R=+Q3yW0zoguZ5J>s5a)WZC@)hN)%1y+#B)%2#t%+|#d|Tq%tyXS<
zC|~2oD7SIzh-XKN@Sz1zF*{V`K^)X{w-D%mciad<pqHwTKHljiU;W=xeh8}toKk+^
z34!i?q=<5#@)LwWO1u>2u1AU}KUIFg+9OT*Ih!8x>`0M2wTG`TN0lcL0x7>$9#bAy
zey99i`GfLD<xk3=l_!XgAifLnk;Hc;K8pBm#CIn?n)n{X_bgHVQtCrbDNnP<$CPK8
z2lbsL!p9Mx<au_CAM_{!D*p&b#la`45T^Rh5m8luPvl1{>N3dx3HU_zaU%j!2`U+V
zLnW#Z#>Nxht4I~33MRfc@d?Z)mdnD9s)nkT$04X5^EiY)7|K<Tv*DlbdmE1sRN4tu
z^;NjxTC8fIYN*1v-H-VG#1BB=q*ALip1=v}ANY_1CzXi{Qkl!T$N9O*vy*;|JhNU(
zuRGsd=PC=FR5qlwmrYwYkE=9ecT}@y7cZ^2aO<;9q*b=F{^JA@Rby2%kA_uEJsM8F
zn+bjPYom&Qh*fP>?Nsemp{fq5j;b(KxT=$?Gx09MO*cN3_%!0vi627zP~tO)A4Ys;
ziK>fN#Hwx;{-}70)2Mnf5oh_rpyBMcv)^OP`Hp?0;s>DOflS3o#AlaAHmVe;IAB$!
zi40O~#>p1m&zm|Ps>)<K&QPHNbBNC^Qe~;KiFXq}qWpB6ryAwe@ko!3^Uw+Ljy4v?
zhnLZ@uM>_}O=KdTpej%i@gs>JMSOm-Y7%7pB=NX!%M(9_74biRx~aV8O9xdmAk3L%
zg}JTw6Bk<746j=>&lNUfO`TAWh@U~)*=5t_zudUp{-y0Q*B5@<^__w|;buIfnyY%w
ztKIn??T))2vn^4rVcK1)TBcgATA?ab6{(6<D^;shtBIdLd;#&W=0xHr5kHxDSaJ&S
z2y3U7sMeNhcYWnWl@~+18<=*d`LsKO{8o`4&SN0{xkuW40NQ<vY4>g7r~9<Klg&yt
zRNlxSzXh0>ct3Ay_aoKEOuM^Pdx)P&{H!9?Ue!M0pC*1D6Gpi_;G{aF`kd+Tu<BFQ
zXT(24{A}W%WrOLLD(t9$2r*m1Gl~y&6+(3k+B#lVTRUfFE&siK=z(X7zSF<4d(aY(
z4u3$}AIqlAdjIOBHLD|MY;SaZ$eF<{t+(j#gz8sj=aX2M<sn6`sPg-`E9$ol9_)_p
z>x}BWSG(st+Fbzc;^}(k@|NB4JD1b}OuLs=S5#M3*HqWloLZswQ~Rqc5dS>!i-=!L
z{1W1q62FZ2<;1TbzL5B$5_LtdcGbLpZU4tPjap{f#nuz{AMvY50k<NuzixP>-SXG2
zx(>9fu1oyNQthf6K)e1{e;cFV5>^fwzCG4zt=fRTq1LIffCRU^rbum6n}}aad`Y>D
zxoW$*5$k}VYJ`PYI(q>f&_A4YK!x9(I-t6Rx(&3hZmDji#@rbb<@LnBSgdZVZs(6R
zh?j`RI^M%xgHU(kg4CVM>i4O@153rh5!dJV4=e7mDc~^Ex;heRyOvE`<=3dWjXrEQ
zW#P<Svs#+Bueqspb$2x$4#AvPjYSNZ_>K2tw%+Pw=vLiF-B+EU?x*gr9-vNC4^$_q
z2N93C3f3bw6TgM{t;D}Z{OiPTBYr#aZ<MH0N_Cs&|GIhzbeq9+`=(E~*l*H|_>Y-x
z_de3?1JEs72~=Yx@GYNi*-D^#g1?PH{M%UfXCK(1IioZzRZme*W7>U6J(c(!#P2Lp
zPgl<%ei!i{mD`xBo~@q8boi`#j(RTf?-KtW@$VO_=c}J%I{bk65C02vxD?u2R#sbw
zCgt~+tz9lpS(9+I>Yyenj}8lwwy12{>;u>Q>kf^WHg(~d=n+9#Yy#`E^D6aPuls^H
z;l6fb?MYq2)&g-T&485B*O+&8Wv05*s#L!moZ$Q31~uM1&-D9>N5A{-@;%>IURS?|
z#eelS^>+0e>NnMIso$=Xq28h1sotfA=|3U<0PzQjKScat;&IrDns`J)pA-KD@n5b}
zzhA21-2pSzAG5`O^?s(}uY4;0#<TeUvv=|T+#?-7039D;IzCGL*FGH|XR-6fK)&+E
zy0bljGa~4P>{!hkWAF(zi|N!S)xQvbg!rRH>fhAA6aOvoKbD`4&#H0MUa|U|`n>v2
z;*Sx3ocQmG)fd!%GaY|V{15*HI=;>YX}Gf5v_~#|wuhnpuBZK8Z28!A)q70G8h@m%
zP&VyPM|b@AXV>=qwz&-hzw0;x=lc6}tf{2oJv!C|dUX8Lz1NU6!J5agps%T-sj8`_
zsjjJ^sY(0^;!hHfw)&O$--!QxwWb!Q(LAns!gJCQe~OKfr-?uF|G-H{8m)$fhXJQF
zde4IXANSnTps{Iir?^mq8&YTQwx>bURMW!a95u~7&hh+xG)6m3S2#yadrhdOgQlY<
zOcP!wL(^Fkq3NQDB>perFA)DX@fV4|MEqrsbG$<QRpPG^e|?=M%Ih38JpyKGVwiK(
z#KSoXzBkzje#|)vlE*m;wI4ah@^_9JtN|8kTqO8jPoqh@mvhu)X>!m{G})TrB>0n1
zp-7Xfagz{0LZxz>plI?nW4)eX4D$>^#rx=t6E#!dPc@S?lQmD0P?>~468K`xQ<|yp
zr-DF&`0)Ly2J3v9+pP2LnEl$)$hn~n3tN2LbMf|MJmmm?Iu~i@mG!5!U#a_M<lGLU
zW{lXlS@+qXwYT`w1)62dIWE*ZuUVv7tXZO2N`g#65DCE~R3V`%3Ds6>mP2TTY{Qpk
zB?;Bx9EBR54PU}z|G(euy!&b4_qrGQ?+ss?moyu_&T#{CjspDTJzk)o*{Z?O%7vQO
zNT_vJ=lGU}?Y{F*(_q>Ki#~oI{qY0MA?6%E)O@7bt=XgbShH8NPqSb1iROUjAPIFy
zs7pdU66%xCfP{u5gpi;lK}CX^1kF0l;Zo=L1)Sqo9_M(3IY(`2<S4-Z!#OtgI>&bZ
z?>Wc+Q?L2buxD~LzmuRV4Kg+CncNCP{C;HMX}*GEo{t+Lrsjf%J(a8ZTXT^F0|~|=
z&1KCM5=<mm%gu{w71|0OFRJzTcu_NYt+pcONrI*9Jjri)>6Aw+Xz}i`Vy&o^wCL(K
z66_>6inYPoD$J2ONoe%&9jUe!7o@FS);X>?#eKP?N#~QrJ6m1s@>Zuz=18@5khX5w
zv}1ECjXqz{;p)O)d!E@7_a57r;xj=5trm_{+fW;#RccjQwN^ty6B3$|(2RuUB(xx*
z<!X5jr_ma?by^eNL{lN0Inq|xH!HM(H+>M>M*ersGBNnh+fIDdZlZ1O@t@je9{<_;
zp8iwYR*OeC3bpM>XnQyRsSVdgc>Jffv&Vn7ze`W_6{fqkFBZ<U(b^u`p4u2~tTs*?
zukEGnt?ffX2NF7x5Jo~c37tsjOhN<+T}X%|p=*gY!RtD;iGjP>ZV_!VbDU8=$Jw3y
zu6lNh2z~$G^O_I;tuxx;aE00&61tVTLTw&gVc@aA;|%gUO@4oPKW{ig?O5#u^bYMf
z?RXNRN$63e#r7)_dXmt)+~(WbDcb4Gtv#iks+~pxJXtIWaky8dovED#hekp?3B6c$
z<#h-6Kfn8YP>YyPdz+ZAeW2$1*-hH*crMG@Zrht_u^zX!0BIMNb!#iSM~b$N-43pN
zy5$!;Pqt%g-9AYz)-Lmo2TMKU0oyWz&E^$w-|0%30m1j3m0HifyEHBK-C;OLxS#L5
zsC|t|_a*Ji+6~%`+E=u%YBy;&Yqw~(lF*-o0VKdz4kRIogh3=ElaNA!i-f@?+Sf~^
z`(}XWpnvTSCf!t@bnzsT_Y_UR{YbjyKO5BUXVU$IgfyRY4?(&WPgOk4z~&tCtL6Q?
zDc!HMN0@ZK)_z065E6zKX^(2ZB_V@^%<_w4e$f8RGWikrScPHex<!>LuzRfa?sAV+
z`@5DM#HT%_J+1wNge(%WNf^%LeolMdBX_u{+=nf99K@%+%|U$I{}xv#`iFh^cKs2J
zn_kh@^vE3t@o8^!5MP5)r-fOO?N#fV_W1qJlxMHpl)KJP=RJr|SHUA)&(4|(9=X@M
zliYQJ4(n^{bfQku$+{q2u&zp-3|%!{bzKczO%g_uFp7kH5=N6ShJ>+fNk<q*0{r#_
z5(?Jou<*wI)71%>sjJ6kExLwG!Q@l$B+snnY45CM(IXL;zle2Kh*)PMVPdI>b$Bkf
zbiKPm+|BiFJVWnW@7A@@vGe$JEp@F(m`uWxMY=Y+wj@j;VP?6Fzq*dP&Jd(7Oc$<0
z$o3QoQ%RUstc%cfVbhA~B+PjD(+XV=E=bq2?3l{+oPB0!Lc6J}&s|=6Y-fyTuZS)V
zY2(YL{k2EI6F(j6F!|LT&&4es+w<#N1ldQ&PH@rnWqu4X2Uk>gKYNC6#+{$x(+$$4
zV<w_Y)}`oNy1}|sT^b3`kT9EsXGxet!dw#Ot=8f8ur7lw>FD6-*a`8%bKWJLg%4yV
za_5;uc|XIa%h$1mz<^UaECganXTd$EB)W;Z$(WMpCXw*`-KHeEX}X!XvVWQm{SJZ6
zVoXWy^h&AHSV%WVw-j-WZmw>gZock0-2&Z0-SfIdy2ZLBBw(p+841ftSV2M|37BLT
zldzJ6RV1t~(Jd?Wi$&hJMz@-I#Wg;!_`;32=Ftm`9>B>2x=qX_ZYE)^&n3R*afyn$
z?7<$mL~LMZA2%K1+q#`hsPE`@kWfOxx+2{!-Mb{LC*hUybBG`5@J_R0-EQ3;9eVbQ
zB)mkz%f-5Vy8X-{ZXjXfe}O~%3{LLzvQF-zX?^tmO_2$21r7i8y@S`bvIs@@71DlP
zHf=<N@uvy4$lqS?VQf&V=Oi2;<(rV`j_TMGy8fX$ERS&{yb2B8>C7~r27lK5;+5@5
zk8Ii7i|+N6KXjLwY|rS<>dxuT>;BaJrMsZ}TX#`+i3H3@u=x8r3EN26PQn|6<4J_K
zNO+rscS>|uyt37EUfJp^FxmQETO{ndA=~|rBAN1!Wb{=bTYWVWeD5sM*Mw~Ec+jD~
zuD$_!hQ6M@J_!)(dqw(&`VbP{C&9D(rd*yn(QEbW{;Pke9_#Puu^*uO=}l}&^}{kD
zb#P2+pViy-cpqA^-l2Eu8<DV^ggqpDT&!=RZ_1RumxO%}U+MZbT#&wPS@kxW6mUIc
za;IMl4?i{S6Vu2@rgVKM(sn4D_EhU7adGx;iLck}vUCX-7j;wV`f$B>0Z{K<0Q}@G
zcJo=SyPhoo>ZA2N^gZ=4`dEFOK3?BT-&>Cbz=I?lBH=IzpOWwy37?bj1qol0@D&MP
zm*`6u0QHHbvh^$ge&ZW$kKT~&$w#t%0J3EZfO^cXkCcwKdd~u2=fH?SfWuqJ?|tv*
zjqz4LR?ijy_2cxINPbJgu_Aqe9t(iSN%*<k##{XqJzD_OKc%0l#{%GYBz#Z855@W!
z{xSMlB;YO$Pr^?uyZe43{+=s^|LNl=2lZG0)Zb<Sutm6AkkZ037PPaTOnB$FT#pK|
z0I0vs0^s|G`t!Qh3yXQR?e4WJ){Gr|iwYO(*#e+`37deNU=xr)H(N+Kc$b9~{Yt%e
z0Z{K<0Q?0DfPrq$D#F1sF3%_37xiobQ2&ztW&H;IM*S=LSM{6poAq1t7;b+f0XND{
zk#L%XKS(%3!dVi|k#L@bKTGtb3xN7J19u1VoJPNcjktgLq>HnEuCmunCX)E*_@4(5
zDeKt^p#BpQF8H*|RsaJk)~&!`FTbjs?ftx|-LLd)1yKLB9xH$sNw`#`KdOg@FO#S!
zKkfdYKf$#7qy8uT&m>$S;VKE&iuEV;zpxSXI*HtW!3cT=dOTZpR9ri}`kC>+bbaTo
zWych)#s_;x&_9v(ud->CPmTJ1S9oZf1y`q@KbfFrhXwgGby0uC8+lx2k%#C99qO+!
z9g6;CbXcXLw)ATTe?vv~wKPKji<iZKyM4{~9npYAz!HOGkPShGU_%u{RYNsHbwdq9
zO%f}SSee8?5_u8@5=9av5^>=m5`#+&rR#qNtpBmqKSKk^SM;4#BUbZ`yyByyY94@k
z4Hl@^U?tIaRE@y__1^I~e?xOaD|8J*3qwm1tCLux$k5u*hD0=S`5jba=wRps<r+E~
z!VKXgK1O0K5^EP5IvXOOT=8)dpLqDnHAHhkh8|_rXjrzQQj_q|){FS*?T$1a{1F><
z4Y5cYS2pc{bsOe)__|%|?OD>3?zU9rrg9Cv4GGN7eK6{ZIKdQ;h;78OA66WS$_Uq|
zz$8P8SGCC=)z(M2e2+H(7={?~m}rL@G7Q5EnT9Mwwqdv-$B=7qlh}~N5E7Lnsz_9m
zs3B2HB9y5o(NJO-;hp6gMwg0qJQJ<4bj%gaH$>a~QMg?G;j#fQ;w?1HBGFVj<Qir}
zv_UHrbs1D)4i=}_$BhBku)wg0b*F`f=Sj4XXe}}<HY_30Mq-n48*mMU2E2o<*id9B
zHmoGkPNIWECvKk^))>~ZNLg$|Vq=!wJ!9bej;8<PVA=2zr1)}KDV{j~+55BFM&!=%
zqdk4<9w_k0_7$XkwQO3=<|eCj;h~$ST{rlBHgVjLTV%V%fW3i5hOJDtI3R&5GHgSz
zEH=Acuw11=GoN(dG3@e67iZ*RTx@{>*RahqPB*)w+&?nlRUGRKyA68`9~<@>_8Ioq
z$uJx+95fs<944_9iLFV5XKqVkI}+QoyKW*1)q%v0B!;asl)jI{@KvQNhHu!LV-4Rj
z31dqV`;SD-y7EZGt^syyKpgl;#t%TozcU%1BC(TC#%Ca7!`X@r86;xa<16nc9vJhz
zjoxt4z+yVXB?F@6E+j@48Lk?xk=T{QZcJO{vSelSH+mw#P$MEh1ddS{OYZRsW20yc
zhWd??Q8ps3>rP@ci9L#qRg6{Hpxu+in1?@T8*6hx#>dMly2bUr2O>6vRarCl@AOcm
z;U}hkV_l@JS2k^pMaINeyLDXo`r}>pO+EATxSQ%XHZ<yR<INaiR2o%AwNYclh#5y>
zJc+$X>`h`H68o+;>N$<k$ZotD;fWKNy83x;yom$;kKcGRHZ!(F*9<siY{724iT&?+
z<IULK*a0`*jBreecf0Xs>}>R$$ed>E;&G5k_t77F82cf%G4?dZ7-Nlb#&}~dV{c<0
zV_#zeiOD3Ukmw?DFo~%orjeLV;t&#tl9*9q?C*_jj7b$@E5xC(T+A^J^Et*Wc6cW4
zgrnU?Kk|y@?-h-?@QOwRpqZs!(Kr%bvBHoFLmBKXCyGAa&l};5alDbx@r)CU1teyZ
zIK0R>(Kw0391=&BTX<ufYQ)XoV&gR9bmI&Xb4f%Q^AO$`pEf?@32#P_IPxKfH%7c|
z*La(^?WTUvrdR3{9Xn3mkhkR9wb!sL2M6~&(k?3N;5Mxa?b5Gn)b;I0=WYDlIfBh#
zO5+scQsW91r-T}pdxnL4#3>b?V{wYYb*DJRxZ3yv`%an>F(6`_G57PGmyO$)b~hL|
z8ecKKYTRVpY}{hpYJAQ3I*H>*98cl|64BN~;zSbB(vwMilEf(`#_grrecL-PG45j8
zeaffZX*cF2^Bzg}0Z8`%lkPzhr~0Ie7jxYC?wj!&<F`z<M~p{FoKE75BI7aRaS~^e
zIH&w%`;!qje~XPj8&4Qdl88yu(<DAqZ2Z;u8;eV3llbg^L0obUQaoQ)itDTOn6`Xp
z#Dxu!Zxzbo+c-HIvc(%ajJJ7Xhko9*3zn;0(q8y1AY4d4TXc(TFB`9UWsB3_5Y5fK
z_sW2&f~k^6wWf+5)y}_<uSlj^5Uoiz1(||PRZLY))lAh*HB2>4Sio68;zANJ`CLTe
zViGa+TuS0H5|@*>qQq3&D_T=suV_sTnP>}rqAk85+Ls=Qw){nFVw?X=SP3X96|ISF
z{=4G}ps9t4ZTvH}G+~N~Y5uArQyWuT5?7PBzT8A>>S$sc|4d<~a8oA|*O0iD#21Q9
z5hk|rPb?vE-NP5H2^;@Rx7qj?o?O8;=j~2~v+I2+ogS5mox_z6ny~TDbeoNT`-f{5
z{ORsAWzsKS_h>$%?~6A@YwBa_=Mk+b!6Vui??ZuuOfIizQ#_)5`98if)P%S2t}|tr
zhM6)=S*C2$@F$L&a!qbio(bX1MiO5k@l_Hxk+_+}E$qdB;#Lx0BM~F<wsoe`SMi$0
z2Fx^#XRG%nV%pvA)9#zlE{Pv{_U?*@AIbLt$oCm0Ukqb!_~bhm@(sW#jSNz3Vh1#O
zK5vA}rbVWuOu~yz@WXGB_;!(LnF*fw9TML!KMAii;lPz*(<;+y6ZE@-M0A8*2$xMI
zCMI4I-zD+Aha4`OHbR!KlpS|xzS}G4aA8Nkjd`yx|K^3!Z+RrV8ELnaO}lGXJ=5vc
zVeh`?x?cCMMpte*tHSiU=?$-hw|gY~0Ycw^?VfOX`<=pN(@xVzSVJ)FGQDeh&-A|O
z1Jj2jenjGK68DgZN%dY5_pLVVhSEM}uLLyhCviWUi+<vHC7^ilfvh3i{V~G3ZSB4H
z^Vlc;alWkSOVc;3Z+;bkb+H3jMkoq68*qjc`$@5{K-VuNJvTWgeOP*CQl`6fQeyhf
z^aIuqOy84u=x%EWrjw@Myx#Fwk9Yj^ep=(K=_-q9&Y8}e{xtn%x?uX-bkTIlblG%;
z#Lr3mg2XRL#3J3-Bz{BU5fTx}eoNx964NzrOk?)*#x&-N%r74I`Ni*V#5AWKImPmK
zistHYisl+5epl)g&9&eZarE>w20M9rwCCf7OElLvhoEzq8<?@~`U8nS7MYc16^TEQ
z_*=QTM6=#(hD$UX%to_`#Ggq#LE=fcM6=aw^SH!cNc{D_T;hLv-{ZbFC>=C6;eyOf
z%euMP(_PctL1AM`F7coDXn6fe<`T^<khW#nv}cR5TCEVH0w#sMv%W#532Vr{6$En|
zGamlM3WB+v$0hy_5#kI`tRVO|ypu~bcQSYJ2-h6p5$@^x`A)Ps0m3!+F!waam}AXx
z=6G{2b8mAWb6*nAka(8Fb0nT8@lO)}BJl!=f0KBT#7iaSex<@4SSs8UCfv(D;bI2m
zeVkCL{7ASDK)5+fxVa==@d<YXgj?~H-;WG-*7q^b$4%jmGZ!%7jyF#r@fwNOi_B!6
zND@bqA5&7f+zv56WyUtZBJ)(-){_+IxJC8av4?P8yz||7^K3Iaa?kv%d5(E5N&X~N
zASs~OJm1WY+><JjRO#W*V9Ypj&wQIB_j;TNnwL@7ars2;?D%iLyk_)h9Y^k&Z*%0H
z`~A6RS1;|>WWCi=_4@Y8n5^8;`YJObK&<?kapay%QXr-y_1a<IGwk;7Blk+ja`Q`O
zEc~rAzii%M-e`Ws{Hl4=6UWV4%v;T`nO`SKAW0-iA_-RuA}N?nN2DqwRVAq!N!8bx
zOIQEQSp75aVAB!vyHKxGqg1`pV{AGiDLvB>$@)mZ4?w^NnSc+GRMRKm&miEswf$`j
zsvL(SFxkgV0Ut3RW7;}u{+6U#B-Ji5A2)wT(&Hr6Ek6POY{nvBk@*A@Fg6cyMdn{|
zUtX$%k*7>wtirGHb;mR2KbeTnn$MZflT?qS`Xn`A1NH^;-)z8^8j=+9um@~B<ZHgo
zL%tvM-*oiY^p5#!ucW0+xYX3Mqru|G1zG&d4%p{f&HZ5PoDMxEZT;x;@!7U1H$`lz
zXpt}<u~f2Dwgg&ui(r8QRV1lN(vYMj3G&jfw#b~u63nf$R8_1d$$<HYWW=#1lDS~&
zLzs`;YtC`EV@;H8|2ZGA)U~iDL;_A(>a%;AlIfoJG%Xs74)YNUY-73Ge8gh5*gWph
zV)eL38^Rj%uPhXju$As#N0OFyNJ|q-dxSNXrj}-w=9U(gmX=nQ)|NJwww87zIY@Gn
z)QF_UBsC$aDM@I7<|MTssbz^J)Em}V!o6XQr3-V6t$dEL&5f`o;*nP@f3Ili4X<eF
zLsIKfuW0E9uXx8bR!g#FFuH~%#o{8VElKT)EUA_>lG>Bhq1=3;Wtb(KWs=E!BHk!*
zA6pD9BP^rg4=p1tqb&I(btEZ_r0`<P7|U1|)N~>VTUH+SdES;u@NtvN`nWA8ul=f8
z+`aw_Po&N3v{UmJ3u-J+A??(%X}?+T_v(@lqdLF&?dkpF0;Z3>#UIYFJndEOERSlt
z+<T4HGS9M{iFUr_Im-geLd)}(MV7^uC6=X@Wh8YaDT<_SBy}e#nxq~i^&|<lj3p_q
z#ImAPv@1(RyOxPI-X~hz2``<Cq&yPs0}$;NCfcne_40{!8$??n4)65?YzxRh&&Q2W
z#<IimE>qM_%Px{2_P#}y_bl&|lt5AvlWn=YKf|)evY%=2W6NI4K9c&8)SsjQ#g<R}
zV=M<rO7w&!o|jSm=W7JzwJ-Ca<qPQQ%d)y!t6weF?A86)hW%fD6V>>c@g5C+gS1D=
zroGsAKqKy8WZSj=M-uDm#ZI?q@R;R$rom9lcWe<s8ibM4@}p<uOfEBW2JiBXoxfOq
z_bT@{k8)ji`<CxJ=PcKlbkAG<wEShcVENl}(Q?Uh*>c5lm84XX;FHry8bZ=gk}^md
zMp7n8StMnbSgw1eYxVa^*IJ25ceqcwco?fxx)UBrxBR7RtpVv;Ym$^xDqSny$h)#~
zPC!Kl`AuREBzZn>h}YV{ikG|<SsPkINOF^uS7cRL5#^2`X>7TP*J`j@AYQA{YO<P1
z8cEV9lJbkKR;!H-prc6|^Y8~yYf~=B+N`V~`^9EW&&}^<fBt>lg5(`d@v@%E2d#Kr
zuk|*s>osl{t=!tEkDi<Mbn=*aZ(*$TtqNG%T0=eJwYK+&cN_*#Ye%dKNaM?Bw~C)!
zDnx69wW~+G)<}<d3-0nQ-&cBC`$N0d7;CIG&Khs+W$kV4W9@5Au)=3fBxw>!lSz7#
zq$wmlMbcD~rjazAq!}gF0j1g<B<k5Bf^{&{?o6L{pC<oe?+U{6kF@&$wCiTt%_C`+
zPrIX_-N4RbJ3I@F)xY=1|2faIz^89&cY+n~b}O<LSc#-(NSa+_on%GhK1<Sq^3(1#
z>nx_->DC$6nIz32X)a0guoz%{#yZ<G>dq(WIhI{{4Ws{q!vL+%L5~Z{YWMi**n#K%
z?y&2rs4M-B9BPT%Ptfinq+MJ#?U~VSK0hBHRakOr-+~_|55m0nhIW@(3%%N1;nD6w
z458TIj47-Ck}~4;$#9Le#H-vFJjz{kKi}D4eFMvY){WLztgl)(SvOm^JaOFmn)P+-
zHtTkhmXNfRBm~dPNm@Ztp=TKo4y2f*l_afNXMM9&zdHhET6cLA{614KUN*=6BMBwh
zNz!Joh<7{^@dFU?VJ6~FNm}C*@fQ$r#Z%U=80<hmX|4AYk2ciyb(LdQ7S~yiTfZZz
zgrs#v)*q}tlC++rmzl20Wi8+Oi`5ebhFTE@B6xfe{n2{b6Fk0DrVm#UKlGLDy!CIU
z{y(jMSuc>ZfuxNjy~5Og$$HtN{#Qxb^pMqWQ*c2xzp{$%-+N=7zt(oI`9ih8ly#T5
z5T<@x0Mb@0o3{718gDG^({16_Ird`{<-Ox>s^1o93&v8QjkgIl(I(ks8`j{rkc1i1
zYb3o+(l(N|ueMd;G`4DNYl02&*BeZ3Z+f;SNN+!crNHvsnqX^SV-aG&DH{y<F-dRT
zb1BfKw;8b%Xfu%X&fS&*Z8n?J<0EYjkB{7Ww?0|gA#KfV9TDExTG(3JTG?9L+SuCK
z+S%IMLTw#LdY7d4NW#?f1Cl-@=_8VMleC8<lzMN8EzIj4Z4ut7i7kpb$9+EMh)oxz
zQ<Ec)JY)HLMq2_rqYWYG{!-6qOJtsLgDr_ce*PqV;{AkY?CfjoRND}A5L=oJ(@o6s
z4;9&l+A>HwOw#A&<{53nZEn^JLv5Iy!ZUt~7~3|2MdqKCb&LvMWNsT{!#OO)wz0Nx
zw(%r=LDH8beN}8Luo0Wmd`%MGSM{*h1Z`8{?534<c3;%|amr_j;WJlV3<%rv_ZrVW
zFWXF{omDpNS5l~53T@YD(@Q;sxDXpQ0{Frr+icrhuYBit<a_ikhVwP(^R|^ty^Cy%
zZA)xRZOd%SZ7XbrwjvvXm}4XzCkbQV_ayy55=OwENcx$i6C|B1v8^gq?+fxAzhB^M
zUu5e2#i!oi*{Sm1Gp~E`k$NA1dbcz6zCqHjKJ~s0_1fN1)b+PvO;Gv`G38}2KG^s2
zc-sfI-AuY4+Tevxk#xGqw#NoP{0B+r%1^onY=>DU2iaOacFS=^wokD^K{|Vz4GL8h
zzxz7j*ET$VQEdChcEom+r1K>GNzz}%wqv&AOu7hj*iBAW$Ora3_B|&{2W=-H$CG8{
zIAq4+21)v^-z=>WUszvWi7f_*X?{c6-^-@0+xwf!HJV0l-ty(1&$jN3>UxWG|FE6&
zO82Zsx|f)AKV?4eY#E>Dv)V;_1t#4~w#&9FwyU;lw(EAzuCV*r;kvJo1hZcw={m_A
z$qJJFNcJbW0?7d-_5iPR?ScNU`)}hkb_vpzE0#)EuFT%fsb~)E%GDlexBRthe*)UI
z*CDx5sdnx4p<Vy|&@Lc_k*(+B<HoXrU1QgybJ(?ZG*ckSe39K?H<B!nT!pEkT-NjL
zHhUw8&~CRo>`szJk|mPmVtZqI6Npd_B02csi_qSh3$nK<D=h!trZh=E9A=p}$M10T
zYu&MUS^1#7J<^7jP5aT<ammk)3a$Lcmc#K)|FpBQwp3B}Fgu?1D6)scd&yOq_wxS{
zyE7Da%*yVhLVGuR507x|(M-5<b%f0Ro_hca`yId2%RUIowfDC7vG=tn*!$W0+XvVa
z?E~#eB-bSQF_LSMT$|*_Nq&N4^pv_J*CV-pi9NYgxv3Q+6b+%=p-j0Ae9Faq;Bvu4
zCS3C);XVN2<}=}rCb^+cxZ_yJoT#YFAjK&rTzuRV?qvH@tV2C%pF*;dWL1%Us(l*C
zYLboRC)}s)bC__SvCp<YOR|P!Ey=oK`&|DR`+So1Y*9cq{70kbJr@rD(_4B6?TaDC
zC1u5UJ<&ZmySUSdjX8hizw_DHMIPZUN7@x-)4rlycX?l*h*{4Xiu>w@XV`BMZn1qe
z6Je+w51L@OGeLwEr?a&b#icunaJ~IyuW(=T2-k8y-`Q;6%2^8STS&GQ+Fv8tQD8mf
zcZCb`yQ;|ayKaB8fGhZgWP4(8k5T4P$yq5bb8hl5b8=czW~wXKoSKx8;mXNxVYMbE
zj?Bs#nx2`OoRyt#jmvfA<XUrFgVTo&NlG7*WbIh`8sJ=O%&?>!cTBb`GsWkl-m&lE
zEJgMm_MIfdPd6&EziWSw<i;eAW$PN%(z0^ht`zSHU7frcCI&Z(=or?~mElgZ^z!E0
z0r__D7OV6yuaumm!R`)O!-l21qg=VUNvSShj=Sw2vr6wFxk;gYFUd_=K2`paLwvex
zq%Zja`xjW9u^+S_vLCj8YX8jsImyjPZccIwl3SA8isaU-?O)ozQe2f@u^&NrD7PUw
z2eFQvNAgHSin#n^E{}X;+(~X%XnsVBE7P4mINg<#7+gR7#y@hq4-OlZmOd!mog0zK
zijbX^<Hqt_t}DZp%#7gu<;`#BCI%~A|NddGbaz^KdQPsprz<x*D>H><QYXLr;K8{r
z_Z@Pmo}87Dk(8b5O1b6QzWV=cXIuR2C+sIlZcB2zBKxoQ-$-sxa$hFGdT5gd<_0$#
z*4jQLg%#eCJ2HJRif{OL0*j|7W#?oKv9b?T&5}K66#J_$%QN=#EX%X@b0lNv>QH3=
z)BYF99ZBxPvJA>)X6%@r>`u?hOv=eeFL8}>yE1d}&zlwSUF@>MpR2jXe#L&(e$9T}
z!8sHTKa#^p4kx)2$(>1#Ah`?4k!v`O1CgYo5(wmUY}o0_KDx1wcnm<u`Zn)$O3NDA
z0m|r*HNusHUWWFH$;!(~#t%|lrG3%cfG8cByX-G<fr!iz>AC5HGF)iUvRPy#<!9x&
z!+cdlnmV_=O8Y!_T2{_&f6cTTo|TaTiQcY&BXg3nyQXKlau0Gc7vx}1c{pm29923l
zIM`Dj?6BvG4Hb1U9$;Ab>Xu=_QQy%J%W;kdBzG@#gpeG~Om)vFuC#$18ixV?-l28q
z9D0&_kld5xm|};~VPb(=EXi>XKTvZxVU|W^efa6s``cDo+xg_C+J&74zwuTb=I<T2
z&+E9&ectfV-v`f6jv7*I4Rjs-^~|W7{@&5j(Z=Ju9j!gSyBB6l4z{CP#yhwEwPUeL
zrB4%sJN9M`YJnH@c7%U8uTnQ*iFTzX<>uwy>?-Ec-;}yhpZ&uf>^NvgCkLdEKytq#
zM;E5H{{IuTIielCp*BYkM^8tLBi0e;h<EfNc>u}K&_I$A5Dp?andFo;jy^2*bKtQM
z#{d@fxmeUkGCKf9&ho15u1YGaliV^={6C?#bf&f;BoFqfZCI(=nBth)JpcJ#5aVz=
zMli8qY)LD0j3hbzKN8y*2U}HijCG82j3*hn4kbCG*iqnMtBUe4k~9Ac#D-Nx$8A;>
z=d611P?aW~2NW-;d**DrXKQ)HhE+w!ZB`X$RQWRF+fyAky&)~%^W5GwnEm)>MUL4H
z@2aB1v#Ka(GqKHQVjEsoY+)f@kGKd;Vn69v;#g`wfiaNeT$0@w4-3X824~&J05>X`
z1xUHsNy#qjsN_5ZNGVC~q+4Pn42r&=rg#FVh)lODXE4%xVusRRdj`J5U?$*yjJdZA
zsW-24r>l=jPH_#&OHFm<9DwbLNgi>Ko5oFdta7Z5?-tW7FC(MKv5K4Jt@v70-0^~=
z#Ieq?p5##^=aY;X!<d5c%6Dk3=Mht7yD_s%|1#e9mx2#HKN%2_neI+c%4m@63B-IJ
zXOm+KA~45hlE)W1wvt@%kFeA6hBxe-kQm%~aC(Ld@#X!6l($5e*7mt9+<{$^Jb&@!
z{I=sm&a&3=j$?;or(>7nUB`Ql_Z=UQOe9Yvc@oK!Nq&-KOmChddFoonM~>Z&J&unZ
zdmZ~6`yHQ<jM>f%l4p_pG|A79Je%bCBtPc~@qA%ggxfXjW*Cy2kn0Ht*iSJu2dB8)
zN$D9KvNGK{2)bBsRx2B!vMVRYmEv{PUDI>jz0y<MY5jAPGt!eWWSf(6TuJz@_e$mr
zBq;q+P)1U&I~?IPVz>54)SpEmBM^Oge(!C<uNCbJ9p8{Vy&yd?xVpvKK07-iIV;nW
zl%1W9KVc_tx??Qeagt}=F<oMC-H6bL4js^SGqO^<mu7XdF3NTp?|9nXXYQXJCpgQB
z6=+^g@<bNDI(}y@kNEM~LdPkR=P=6!xkhCtAy7^6SgvDf5OUUWzR-aHa4yO7dRRPN
zR1xmDP^1XwW)1LKf?0~y+IRI!j?4ed?wXTh*<B}jVWCq&@}hrqG-pL`M|(ao*x{Ss
zpkC;2_VDl~O`ElEYz}W?Z)$Gj>|i%HbA)v;cWBnQNqbw9CJskfcxk52K&OB_oIJ^k
z3!Ng#OIVd^$CSqGzNt^wtmGsXu6iry42I8lRv~$5!T3)x-Eupt`{g=oIBP006?$iF
z=i_K>uTf%ik}}z&+1c(s=`hi#=p=U<$wdWRWs;YXy!?MwbiYt1PT{L^%vsMb4EFC9
z6XCmdN3<=;D+*pa=xoRZIYXSvUfp6W%vp8dI6smLJq_VhJ2m~g#YE+~lMuAB?-b)l
zT5c8`2>X{ek=|)Y46cbFrE6B|zwJ=$G&)V(tULZ5F@4AQ*nfY^XLE}ak9ZV1tt783
zblOQ?RiNvSe7YqKgS*UuV*1{kk9az_vk45&RVnbhv6kU%;cSI=V?Qf&wkCOPfz_L`
zouZ33Wri=ej!rD26+6S6;Z95#N=RNu^7>+DgtLn?lH?aj-axYFT}1UzhMswuOc0om
z^mHX-nwJ}soaP$l%8hhkp3?Ys3A#eUm@=o}n;l)bZajm}I!b81_lutIX>Rwuf2L;{
z_zK*^8H1`R+7+Y~IuSp=gsM4vp*4Fu`>@t@rw?-}+kepL@o(Sz#Z2<c-quQR_Vc!$
ztH_za&GKDqfOFuDYoTXsWM&Fd{G|BV=_-J5T673+-oAO0rj5;^c6)nsqi_eL(yVc~
zxlz;hjhZ)c*c?rpH%&~>PRqjVB7In1Mv^-#Cow5!Sd&J+98#S_uma#rbEcF0D#@FQ
zoI{-%Bx7{g!ld-S$RROUhb;iMW;UnIj6WT=j$w@)Va*-QY>u$fGG*m@3*$A=aAzNn
zVUF>08#2RqtmgLo(DwJthST214}HZR>BQc+66YvqzH_v5jB~7WoO8T$g0sL$Bx5P%
zb&|J{yq)AXNPd&#w@7}Q<abEkQNrn*lQ|uyaX#go>YV1B?wsMASx}4Qod|jn`|cw7
zU6Qc`g3K^7;axU;({sZz(o@;|5Dwg(l#}XmcXW+NPj*GaoP)D+hCxQR{x~8RT`)Pv
z<wp8{{i0WT4m?vX8;QK%i0K#^pOll1b07Y7ZJ)<V46f=;**+&ZE!~ajdR~sJ&y6qN
z__eo0;Yq{NGtkp(+*+O}Oja=DrJy)L|LzL6`AM6U5$+UE{mlPLeP4Yc&eOZ#K>qb*
zdoxSp`1EMj6Z?Aqus1c?y`o>C=(3{VhTw~xYdOnG=St@)=W6E~lJ}7OG0A&L-nY{E
zg0sZA&bglC{UjqEI6$)JXb|S++G9atM7le_r;9Dz#HPDhd(|rQi+HS#dDa5T{;GSn
zXN*V;ww3u7ma?)lT<q5|dBd=ZmhW|RF|O2M%*(`u=A~z(#M+yLHwpg5Tc<6GF2&BR
z&expiiib%4g5<AnR`CtzJDjE1`KI$NC;H`Kl0PN+v*LOqoI9N_P-WEWbJUQ@kGY<I
zR_q@cN9Uwx<)F@q!N$8M3{6TN8so}N%JDdWVEx@wd-I4-%E)u|Xy8-aZs)$+lv$qR
z{KR<xx93UzlH{)ntjSyhwIA2OJAi%aRCcdYK^T<Hf+m~ou)@zD@6V{j_f{c#Va?D-
zmBjir{uQfoXJz+RWes9WQn^(*#grAEu@R1y1y|lg2Py}~=455L3luL0*A~QT)$7#N
z8*D9Fwo<lkAJHYUYgA0H-u)8eRGA2)4@q)RaFwdPyTz1NN0p3lEw^8{nD%arQiJl`
zu3U^rwF><E#N;I>yIcr?4%MhBKUVt*=B9_b@^ky*&(Z=F)+(q__;^7;K{dGPa11e@
z)vMp2VTi0$sWn<1eioBH+J(FZhi4?EvP>|Tcmjv499*SyQm!YaL^?J~D%)v1ff`q3
zYH&fN$^{h*9)qi}AT-Qy#pGkfby!>k%OezPMu%jh$!tMac+8vc&FkLiu8;rwH@8%<
zX4L}4<O&6qS<UQ?pD1=X8x;f=@C8CKLaYL@Kq{zFPz`GJUV>HP#+R{()Gek%EGtO3
zD~b7?7?&FZWNPj$Nox6$#6`rhW!@XVI#^R~)2^^>fm~3X<sBOKL{W#11wjSDMd6(a
zsuWaZxjuob`>xCuS+jC(M((Kajo-%RXS;6xCYTGZc(7ad=pKE&Et(07_V)hO<+1#Y
zrOBe`o@kQpo-T!N#KsM{5jC~X$w|sDj*ah$w)XrToy}WUW^_+g@Qprw;i>;^-J*n^
zxA`ej_a9K&H;VfA#6JgO(opr5-j?F+hed<%_1pZMtISp59_Lh?o^x<bxd^T+*Mp1U
zvba2MEcYZglY5?9%q``Xb1!fkxYxK{+<V*y+(+CVZZCJ3JI<Zp&T!Whfr?;7ZABeL
zJw<&*Lxob&O3^{lUol!S7Uw%mQcPDot(dKtqnM{ys92;}qFAO_q1dAMQgL2!QE^#u
zRdL;~qF<n&;3xS7`&IR;?pM>VkzY5zXuqC*z5E9G4fPx4H^y(W-!#94eoOpT`fc&s
z?zhkHfZq>(C;k5LJLmVezvLh6?bm(^@1I<9>7S*4_^T1a`W(s^&Tp}_4=4DQ^K0kZ
z&LhsF9#@FD(h+z=lJU=PSNp&2_oMSW=l6a;;-CygGaQs5<NxCY$M7FS5ps7&#yZYD
z6Cq?qBJJI;#1h50^VyhkkCd^9?>s5J@yl<X_@(izUePI25x)$G%}PniZ;<3}U~k;Q
z-VAoB3~GZAU;=i~0<;A^Ks@LN25?+GxQ%*9Q?EH_54wUF&>QpxNLMcj!0hz~gEa6A
zSPfnU?*pt2)Y}a{2K&G#;2<~*J_BEXU%~I-G&l>+gTKH<a2Z?$*Ey~}nz?=`K;HG!
z!Si4z!1o$d0cOw{!~vA0!4QxEGC?-T0d6n?i~^&<EPygMcoxhB^T7guYd2U7mV)J=
z5NrY;fUm(Rj%(-#f`A&pwhhBUClCu<AQhmT4TpkZAPWo!xgZZr0aL+rFcUltW`j9k
z9(WEc1n+?hXfgrR1(=<M3<6JrVz2?c4z`0g!P{U5fZao2_Yl}U1a`;r78i0Dz}_LS
zr?M7sf_9)ifNhl>K@{i>k^pR{M0u5C0qmk&3D$rYz<Tf!K>o@-0M}NY0q4M<9H-U;
z2S@-YuX+af1E5_su$!hPPy!RM02@GhO(W16v;`=a2KCj10oYc9eyPa^u$yKpco%#C
zJ_4w#26fe-uA1+_X@LARD3b<d(wyfwtppwiu%os<2mvaf0kDM@d21VkrU3m+i#F8e
z05?Ft(T)P>H(J<3`xKZ4P%ka|k@gvYex#iXUIWM*FJ|X-tw16`d+A;Q2LQ^3x14hN
z08j}80s)|Wde}ve@99xaeH~B_Gyo`*J`$vW31B8bo_ge|p9j!i^b5hOkhU72T}^09
zQ#9xa;y^FZ2cSNtabOWx0+w-{IR*>_$-o7mAu}{&&H$*Zc{X?vybLySoE1N_B40eu
z!dcM|t*gKq@B&x|kk+~lyaC<<?|_{EZDxgUuzm<maGcE#pq@6=&jt<I(C=)60P1NQ
z4#tA<pa4t+lL542L%p$Sl(WqT3&8ULnzbzjn*nrc4+1uT`rFYD?E?Vnh)pb<eHcKS
z+9v^M(2n}qVGld%VqXbX1Ju=yvfJMSd%;)WNANQ^34R5?gVW#=xB{+m7*hf2<){EE
z0`za(E8-ljKpW5wgo0SmAD~PQl*xfQJJ2o;l*O?eYz5G<<0k-HIer1Zfm7fQaF*ko
z8ej#@Kns98oXEq8Je<hG*&Xx+$is;|oXEpD7$6TPZ039oya~PmsFM?Qa-vR7)XDib
zK)o7O0)apP5_lZc0rfxw0G&4K0+3gu-T-ab2>r7W+NjYR;8XB9_yOSBjd1NoXTUk|
zCxFcwbHES4W{qL9#+3my+Sm!Yf>eNh+c*!P-5QSqX#d750NSiE`d{O<paiT3AAnB)
z@@tIz8Y923BLFrG!@tAWzmb0!>KKMPhFt+DM>y&ht^+7gcq;%~hPMN-Wq1UL1W^EW
z4etT6!IR)w@B-Kd-Ua)?SKu3P6dVKJ0puNi9$W?2Ij)le@Sr+?_B$zo2_WB2VW1o6
z1+oC@-wAf@v=Y1s_JKnH*XwkV<2u8Bor3_b)fw07Tnp3%uw&<j0N3t}vUeU1MuRb6
z9GC*8ff-;Hcom@CI)4N{2FR!L0f4+Ze+pnXn1YK40O%VLfj|bqpejKA5vW51${qpT
zMdSdKJp%0(fp&{P-VtNLcu)W)g2@2oh?ok{_ah1c+BE|08nFhv0M-H2J7NPs86&oU
z*THrG8+Sqf?1K7sLHl(<J9R-lyG#SPUYD1^PVgguZX(ggB5Q*u0KOBc0S*A2Ms@%w
zdt@}|4+ellkOWZnNR&MiWsgMJBT@E9lsyt<k9-a60J{O~7P$|60uF-1;5hgmpbU{e
zgDV`@6}Ib&a(9&g+OF$k0Ojh6@^nQ#x*7m%*|j-n30i};peyJN27weX7^H!>0Q!E{
zBj7vmH^)UOfCyxOHi|;sqR^+JlEDywc8P-BqtJ(==7HzHLIB%Gy#h7?*g6XJi`oXz
zH=>YF)E=-G><6f06zUlDIrtKM4SoWbIIbJ=>{bt;F5S8Sl)YOYFaQh$s6)3@kPe1|
zVE}gRHXkeluxYnl;C=8B_!uD1ZpgD6`eU~*0P^d06u`#aegLp<w_m{T;16(?<GNP^
zRuBVRU=mmWiUIQIjy$@*2VlSM$frB<>5hE5qwjY=1bzdj0It`aUGF^j3&6(FuyM2q
zVB=`iH@YgQ4r+p0Kn=7&4~(D%=ma7_B!~hiS2XMq4SPhRO{3AK(XdA}>=BKA7ma=w
zJszOnMb84y0JK^3T(ANZft6r2xQvj#GC)~+)B*KC0}uj60$iiV6fgr60@Sew?APNQ
z_!C?J7XiD@RdAi-dZLa!{Xqbz1aRG+xNc8ew<oUKQw1~tb?j*Z7GMWX&=~Xt!@+#8
z6`;*xaLpLlCZ;1u1}Im|G%yo94Q7Mq0qPcmy2YSwF>65ySPxzT8^D`jCwLdU5B7k)
z;1h5VoaVS#v`K7zfO5v7En?9hW6>XCQO4Ltpa}>CJwPl-0?<?}+8{O)pzN`uz!-pb
zh$S!ypd7KVT`X)A2b;&$06Jg<xNcla&<>!j<KjU&$N+f&*NH=&<ItXQa{z1;w-77^
z%K_>ghkD1MzHzUEx4;Jg`Ne$?ps)BRKs|tVh*tu%K|I<Z-ULv;c+@Yx3y1>I0PPTu
z`o*Ix@x1}+89xLJ1KA)Ki~y)>{F7iRm=0!wWndk65xfjG0+cEK9RT~s!~XFHz#;G{
z_#FHIeg-GOuN>E_4TuCNPp|F(<>|EwyaG_SUc13wfVS&}>-72zd<nh*--7SJj{tS=
zg}&JfcJGaT)Y~6a1c5*VGN=No0klbP2j~G{_udP@c5s~I`UC*<i9Q{`K!En?gZAl@
z1%?A?ug@ef1;7@4W`J4X888Q+o%*1S`m6yZ0Cwqvy7bu$wt~ap0>|~O08qBRC|lnk
zP#x3+wE^0&uK}1r3(y{P1f4(^fO7XmoAvDl`htD{ZPORm@B0NnJ^G&FxCGcC0r@0I
z;BkQKCD=f7fPR?J8AO3-5ChQu3AkQDe~<{!&l6Cu1k@{G9#{Yt0rba&6`&ZPtrF1Y
z2|K{M0D4RK5TM->J_cy_gk#`)@Do70C;SFZgEQb7mKjjae*OTq?}z&L(*Qj%0+hL5
zBhVhe2K~YT%H1yx3<4=&Fh~Pv%YGw4J{SY00<=%RSpfCu_Xj{9>4!ejA9?nNZTh=F
z4tNSo2T0q0Hkb>Z1J8pc0PWfz`s<JS_TL8H1aAY>yZ<imKKKZr&i(g+0|5QCKkDEA
zES6EKfW`oAHUMQCPzc@wKX6<k>YmsDpw5XVU<G#20(1bVb7BPO3c7<H0PU3s8zjO8
ziK$=+7zR+6MA#t_dQBV+&{l~kZ{i04<w``k5)XsV!BKD=urmA%PIBD9s-Po)T?V54
z2coP4p9ar@MPLoU^#-E;1JT9<_k)7~^&I#WfG!7q3vk_mu=l`o;0i!HCkY@JR0HVi
zNl$>f0Ci6a0jP6QYcK#Lfn<QTO-ctDAPb;=Np664N<up&%?0xT`eqW^DrqrT30?-T
zfX(1FupPVw-T`~TCjjM6f-REH0F-Z#0-!Ah1pt(D5Xv?PWgCRD4N?J=Z;%r-22BC%
zGze`o2>o$T7l5`M)ED#vsKX%ig+X6}ufY*;jN_8Kfdr5Za={3I{+c`%OaK$XlK_1;
z8GSbywofhwtHD}O0@ef6FB$bqM*Whv0<=l;8vu1oMt;ecI4-3gXa`cjbnp^D-BW(!
zI9DL33Tl8_;BlY?CSU~)fO@)`ffk?@XagcaG>8H50CjPpt}e8fD;Z1yD6eY+K)GBf
zm+MUcySvZ_UFb6|l)?20fc;&UIc~5Sz%GMfzriT$;E`Z7m;`16TyHSyKloLEwj8`2
zpq_(wf%m|N0M{K1TMzyQ{0PvW2cHKQ!4+_w<5DYtiU4&_MPE!sol_fvP!I+>fi55l
zppL1iV=C&H+8Yc9=y$0oTPoTsbqp8>&}OM<tJJyRIq*DK0+xd!uo7$po4^);@~3_d
zegHp#6W|wc0bBwoYw9(QOGEk6BoG9ufO-IZF%5k&O$E>w(;9&$0Bw{88>PYKY3LJa
z$SZ9t$E71}I@&Tl97KSwpgZUZ;sENEj`mAO`=z7((o;Yx7!L@*{^{t8=}&>_U=~1o
zq|X8Kzyg5!rY{DlS32sIewpKjKsQ6$16*qe(hfnrhkOdobKFqWWhm@E6lsQ{K0{H)
zp+<nZ3~dTpfYt#0c4#Q*2vGi^Xp5mJ?@*L?D9SrD84L#LU?@Nv3|$9Mj-hV?^tYkt
zA4AbMhVBM?!G3TQ90#YspWttRG7r7RaTx)iGJx$fWDpFR16)62CYTS3z-EAaGIoG{
z0N2YvduIF&(1yb*0Uk&I*BDj})C9GG2IzqiSOD5_m=iPxsQ)mu(J<sU4D}gS0#N>8
zxb`qydl<Vm`f;WoKv^@9M<(*fL>`${0j{5k>t{m4nYeCd8-RAmgbg!0fi3{o&+G$W
zzsziq2S$N0pa4t+X!A_8dFFFqE7%6!0B?hx;5~qHW$poc!B5~M_zl3WnSX$@0PUT5
zmE*E10N5l8<;_BQv(Trr>VWzn1gHSoJ*yRn0FfXHps!~218DE8fnX5G0y)49MgWv0
z>mWD`J_BEJT(%Ctp4q5xHm;K$4bXqG;{ocPjcaBn0$eZK1=7Gcfcj@o1e3uOFb&KE
zPlMTDE|?D%fKA{KxWIA4VfW$av%_K2;jr8A)d1xh{vG%gz$U}bfOFsq$K?co$^iDr
zfjx3yj~wVCry6Jg)BttJF#;QKf+nCDK>yD{d*wU{P_~?Bz#M>b<tzcqK@nI5)__kq
zF4qqzfeADRT>)&H+Z(t5u9u7U&z%Zp0n{~jE?5W_fu#V~&3y@M1n3XBAApa+egOOD
zehy&!+;0Fhmis%$xn+QQxlu27O#nN&>j1R7I|QKJ-LRXx9q0hUKqr7c;6@*C#{$&X
zjrMmZffO(p<bn|(AE4ZB*uecPSO!)A)Ze`lpsem!!DfJd?0y%Z-0qLS9*)ba1=K(b
z^Z@qB!!`5J_IZl|u9sH`aIL&Gpai@KHUL~VZwq)G>;nhDA@C`HE%LqsN5HoL{vq!N
z@Dn(}aU%kN3UmfTz|#QzX~Y)*{b?j@HPQ)MfwmwNbOcc#9`phIKq43fQUL5SG7aQ`
z(O?`ve;)ZHK)a5d0noN1QHPOx0m?TLWgGb&_!0a9eg~()8ID7j;70j_VDK1t9MlC3
z0PHo&0L;J!902V!3fCWnJ~9fn9`!DO9Y!IaQQw0<I4&R8%dZHk0oXqO2~ZCx0ooy7
z2XNi|=AbX=4^YQ^)G^-$P`~`4AQNN*=reyNK>O!E3+4joAb$ZsKgfRptOqZHR{;7!
zKFXGlvgM;6<f9+tqaWnM2KlIWKI)x+4*bb+qy0byfbx#63~GSKKy83>k49NX8v$%E
z+6tZm^T2apAwd5bjcbj89mn9iV^H5Q_}&=QcT7W|0<hy4)OQT7F$Q)V;{=^SB!~jt
zK@R{OjOhhnlQC%bF|f%P=wVDUC;-dBE`W9%8wgOIu`wVAz%FCaCSy_WvD?6#;BD|B
zH~<cV&jH$L>=E!SKz|*33ZVRB{{k1mHI5sn0I<n8*kl~qY+N`%KI3|W1TX-gOykg2
z<I=zokPpTJwAHxTU@m}-#yt<vM&pXXYJj#Hw+^5@<8l4*u+4bbWPEE74Uo@x)O~z9
z!1cyY0BHO1sNZ<lef$Ej1S|uE0M{LlHXpwipf2P80A~T(cKqMqGC-XspiUF~K^;&Z
zgaEY71PwqNPeA)jaDrB#EeHi+0PQrP3qZR}=mSvy3FxmAQ0EC50DW{qHW&v`)(HeA
zf!SaVK$$1N4iiw$39G;w02@r$0$u}Xs|jy%TtPL^05k^8KugdDv<DqQCxCJkpuZHr
zP6e=20c>9|6bu7dU^sAtkzh1{{R&W~0+gu$Why{B6ub?-=Qs)gdVs!1xd3IQjbI-@
zKOyuJIs(20C%_qS9$WyIz*TUa<0e8s6VX>DRsl6ZZ2%ijYzScAiD=)6$Y)|#fHs{t
z0>D-i(Vr)xOcSSoSpfE$I2XWH6BmLV;2g(Ist)P`w9lm0pdE++@c`GGgf^IjzBg$+
zKs_f-2Gaog%%rCQt~+TtC<5qrlU@Sb!8>3VcpvNm=s%M_0SCcxfW9*sb(xI1Os)qS
z0@P<R>N6Q-nQR8o-(>WU$&sKNK)X!t31R`tH#rfYpG-#kOwI<d^JLV2GRix7444XL
z0Mvi-GvH<L26!9n04U#Nw8!MH!BK#6O-9>I{{JYt?|7Z-HV)vwJ4DDx$PC#dWRJ|U
zGfK!_S;;&`w(LEQad2>qV;zol9P1dzO4*~*K#~y>B_pHf{rvI%?>^t}b$zbudq1z|
zdA**Sd5pb<S&V(cQ_N#rN>Y=CbjWR7F6{a^wU2YpxP?Trgk?c6-rtPROi}bR{vGV#
zcsn@05>=?qd)UG8_0ZS&j&!CA-S~`N*unAo9IwyugRzI>=M#^e8viT^Ca7sbEqY*9
z6V`ATy-qm8dA{Q^dYy2ayV$`Ac5uQ&^gTh}6I1Xi`kk18H^_#WO?1yhJ2SC8W-zfI
z15nq*;f&%-#uCmvR<Mo@Y+@_B*u#FzWTILps%Mh(C&^}#OeQr)Ka<=uX&_^8-lPTC
zy-Cq*VLQ&7<h)4-IK)?c%>~SNa#E7>3g$UEEw7Og{Y}nFDauj-bDFHr$yHI$Wc5t`
zh-Q33Ys_qN2YO*fllvo!$!eUe=gF&BOAP9q97iJhovh!<YMg8?lfOfqlg)DS4Q_D<
zc}!`9yQZ{7=2JSMzbR%q<vPFPvs3=$FaF^%<~Zd=5KIlB_o-RPju}ps@zgxzqacMT
zid~&r5;;t5OmD*3#t-}#1k>K42Kt^hf(cA!8Z(Gs87o=MI?R3AMmDn*GoPmaX-7H6
zY0e>sX>ypR_UUh+zUk_kuCD3tP=?Bw$#gYLf1ld)VL5W0ejK$<m&x=$k;RN;IB$j>
zo}u3v#VCP3XOyQRW<A5XGaAwadC!pbj4pJ?jAyuKMt{tB##o|RgC1w-amFU}HzS^%
z?8ba&e2>}A_?b)m!mr%sAy0UQd}qFddS@o*buyC$wa--dOtsFG!OSXD;{zJ=5g*f$
z&Zv84H`F?F5MMBqiA-S{<~8#g_Gab-)G|{ovl`KwzJ%fLXANOEqZq?@CNUM~%rfs;
z<~_^4&x%1Fv*a;L9<#Qwon0ibm!J4I2xjL*AG6gw+aAr1<pkyz{tB;=5%UYriv0^O
zN^$H&cp1zvydrW5mrHnkWD+iu@Mg54Ep|5COvBY4z5?}yt1Dbx;l4Y<_wyCspoZ|%
zoaJc{%qfQ5nA04!&XLKSA;@CROq@4o75bgCgWc$J&Or`y6z9(QfuE849J$YV#J@Zb
zg1KftHz{U6SMPK6JhuY+nyat5)p?KF)Z+upYOXoY{R}%gw-5a=x48ouiCpJSL!EQO
zna2Vau?F*+yMc|!Vy+D4s&(#hPVy6%_yv1A_XhT5u6>#N81>In^E@@rOU0{XB?oVk
zoBr6Hd0#S?3CLpJb>utmMG(vnq5t{Lnx7Kq%uh!KGLeP1@f|h46lOoa92I#N?{~h8
z=F4b)E$Z+o?whaA`FfgvHwYqL$Ie8UWrU0(WD*g{QkJt4c|^ps6SIsk%Lw}saezad
z;XCvYVV)6J_zl@a{2l}gUZxObsYDgjwm@AA>S9M1d_Zg3(GwXhP|t!d7>3<iFrG<F
zWjfn&{zCaIl*__g$YP;;7V3Xt1Dv<8BfYT)3kNZTk&H$j3!S@gF7fDbp&l3NabY6*
zTlf|7T4)Cr+SP?Oxy>K^$$kFjSr9BTuSM!vWL}HRYmvGZWy1b0%11#8QxyF#`iN$<
zpe0@DK~H)yl;Nm%k$M;Ddy(B;G@CgrV<oFF*GTtAnrWmvBi$L94gE$=Ad;n+Yh*P4
z|Ga&VjAb)%$TV^nr#Q=bzT*NvaS6L0`75%Bynz`kei{8OHqXVMF@tT`iN%kDU`b|5
zV>g#nqbBdukmh_sYueI*PV`{_gOS6MQP_he=Cx!ZYF~1cZ~2+asB4M3mfXQ?mi)y(
zJPLxP_G9UX^k*1$X=x-fSt^UA>Rsx*rN_|k(u?SI=~ZrW3o~Ep+@&vqASy%}%s5Kk
zQCY}|d!pV#9#MLZszZ0oG^!VU31bju6J@?p<{K5kB9;(^IYpUml-WjY#9X5Gu%Ck*
z;cL_zrQRs>iBfZv9HJfs!7}wNOUlcnAR}*(mFyIv2*oH)WvWn(8Z<&)%bH?Gmu<rR
z%l46ox3OHm%bl^@-z=|5E$Y$$f4|({FaMYpw4yEYUp|n*=zqCcEZ6_?FB!{tCNYI+
ztV5s6WxpaVrLZq6<hH{6R_sRqE3WVxc5=n<nEi^Uya<Ao0ZB-PH?s0|%xk3_R=!DI
z3gB(7EQ%ghn%BxN7{O@Nwo+Xy)wOau-r>rnEF%{CvvLROS-F?P*r%1pILT?A1VOaC
zqU94Um*|cRKo-&Nh<0wY^P&|T?M+6<vy%i8G52V5k9KbK_dG_A(a(cml^$2=an;Mb
zLTb{WuT}b5WzMV2c~wbdxT*|Q(CaGotTL}v=Cw*)t6I>KuJk|_t9l`WRkN7GJR(?u
z-B`7iZEWWd>RhGHRo|f2RX^|(c68M(%yZSB+z*1)jcG$WI?x%tu9n&AYuw~EclrP4
z?f2?O{EOb#=zWde*StYCa$v4&a+4PstSN--*St*$-a*f6^tEO-aa_Q@tj$Ap+B2N-
znEl$ROlLk(=zXo=*REwfvB+ZW9u8m!*2-Y*3G}k|9N%I$*JZ>#>(sWcFy^yPP3uZi
zjtbPFKIXAbHtX!mx=-mwZ~8HS!FWsS)U(d{>mKr75X7WL4l(YD(R)mJoEOuO=Eymw
zJ3Vn;Oc>r~%ohx0GUgn!l;uRT8a>7w<0NO$PmGzwxHskr&v5_xmq<o(a`6`VDTtoe
z7v*jAyS^GVsYP8Hpw9KJXhS>f#`<3LLGSC;yM8od7{>(Wpyu@vEJVHQ&1ZcK8`#Au
z&LXSz7qFM>FL8z6xWO&{2!aiI*r10Edf4y^sYpY5UMCY-uy-5m-G+*Mg1y-ww+#pR
zJqTi7MZdA~k2Sy8zNkNT5b}=wk||7QCgIFwKKh8&N9=kwvW4yFCDyLR?&D`<zA-gw
z+o-mUneiRBF(<i^|HgNyikvsfd83>+Hli8o-q@OU$a<ssZ%p7K*ZDgLHoc4-HoeB1
zIB!!K%JCk~+~mwn&fL@#=WcTDCUe}>gBh63COfog8z;ET9sc1lPw@^nhe(O+HmAd#
zn=_)X&Gu<?Vcfm>16tCFE_A0Sy&239hB1Os$a-@WvfKO%Pl8~JzP31bOIC8={4Mg@
zlAl5pr8w27fnK-N!W-RE4?S<OuUi`PA*0xY?6#&xK3lu8fTMhi-P>ySw%Wa|c5mxd
z9tA;MfSrp=fqje9f1JAF%rGu51<-q3NlH_e3RFV=aWapSL0mtEG7-7Q&1Nq0k6X%e
zR${l}*0L4zj@!#IPI89xe9sU3!9&a_&WyI1(Y7R{Lw?)TxlMlC<hM<o+tj&DcH3mP
zO}*RHxJ`E3n$Ut)w50>x_>9l#gZj6PWg2STwvX%B!}!;6U%dO`-52k^c=L)kuXyu{
zcW1mi<KMxK#Fxk2@l~i!M?S@!@$QW8g*)Tj89#tQ3}HBC89#>cOkxUZieJNF&hl3f
zY|nzTw||8ExBL9|g=|Ki+wH;*Iqi_kjuO029qMCucF1H$Q<~F~HngV`YTco>9TS+0
z`*+MFoO#%*9g&#p4q5GpW*2+d&q0pxHOD!Hx_8*a9rkd?k3q0graRTO)7?Am%TAx$
z`7{W26`?QA-{p*5=lBl$u<K{M-(6R@%ROYV>z^RlU6I-}Mkc%M<?c^tjed5^e)ng{
zez)^?_h$v_N(kZJ1Q{jRk%Z24r3XDRmjqcP$Ra@&39?9#MS@-u)RLf<guk(?2~V)A
zdz`r^3CT!J2JFh7clZ#s?fC+|@6qd?#VjF;4Qyg7@$6(bNBIU>?UCtTbKg6Vp^RWO
z_F(Tsrl8inYuS#u>@}CYhxv;0e2-b|y~r>8%AedvKYR7FuQGL!>%Na@hT8YF$6oJ~
z?LOJ=lhr<V?pu%A_Q_`7Ph7&;`+nyZcY<Jla?F2!X0nolT;!oRB`HN&+_k?8X1Cw$
z_M6>)J@5a5Vd#7R7^X588SY=rI^?)tj{D`fe;a$z`+gbjKf!6vVK4WqbN>zQ@q}mm
z7X*nfVTOrnPE1D@)R~x%g4mnHw<$pdYVbaFs82&0(}oBZp~l2z_&!Wjt6$p)64jcx
z3AHB1vy%jT4<#PpFh@DYNzPz~iDsB+hKXjFDCfkhTu0uCvOZ9N!W2V|2jqG{t_Re5
zpfXia^8qy<Q1bybA5imwCN!lvEm8jgGe6J?^El9*p7f?40~m~5JTRQen8|_Z%nE{o
zsgd2mY~;Ya4=zOi2iFoqY!Doh>7g=|Lyd>jcxXF^ID!lg$>6Yh4|_+4)p)oWp9H}v
z`+v%Pr)Dynxj}F`E!oM5J5Rrb{7<{@w9HR$WJ?g7DT@2fRN`H#u^acDu`g$ib1DeV
z*2R5iTOgOSaye@TXMaQPXK!*l2+n<qT+W3tkT3W<@c%*QC6Z#N&a3&nn$N5GyqeFe
z`CB!AtLAUj{H>b5Rr9xtu_xcIM^4{v4ubEBP@am&={vLhZWmwiHFEmyWDtB`hmSGK
z@8$G;Yt;O`n!i``_iFxL%@@q|LVpG@h#@=(f*(R8AsH$7k{Oum58=!Uf*;eP-XGQb
zV;=Ic6!re7-XHDuk6VM_CwusldVf;yPgSUnoPRpXMSkHb>iX$-?(ipn@ehxA8U#P5
zBLf-9Oct{9Cb^N>&-p2c{r|Z(`uo{l{;Z~-PxCMcE@s8tFPi5?eP0}bnOq#pc=UNO
zf<-K087o=E8nz+xi+kA5Vf1oQ_7_iZD+n&VihC}p?UHOR$>x%pE)}IXC8<VD8e>kE
zT4J{@wWljR_?$l2t4r#+<oru_c@zYf?bBsBTz1c8y<aYY^DfuoBlLH<6>aInr*y-)
zm+j_dy<T?aWj$Wj<7GWwUd=i-unF_K9M4Yd)#Wps<6FMxN6hf@Wv=iW*SQ%4za%3s
zb#Uh|(~08(>c5hSQrL?tRjI*yd_XhQe?=x&TBC<6a=9XpE3&v^ZdV2~oKcKn9LqV(
zS=4t$eOJ_X<yWqut}C~A5(K}#L=uvbf{fUwU(M{-JmkZ?el@RO-=PfU=+10p^J@a$
z-LF3*gI}Hh>pwwo)p=J_@di1_#ak4l2ybIvSM`0h0UhX!xnGslRefGH_pALGh<RNd
z#z^Kcp9PrT)x|`yf@sX}su^Cj^H*cBmsj=tTN>Q?TT_N$?!WCp?Z3(6nmn$_;+op8
zr6dE{$%*=}$>f@OUdxZUT`Nx|s!)?!)TKV%m_h{VyQaQt>btgv7}RymeqGzg0Z#E9
zKcJp#vb<)GuK7N=c85Q?9|YH5!=2aVb6qai$1o3BTwl&coOk^&cHp`lxNZloU*uP=
zaT9r5*Yk~+$%Y<p<VJrt3Q(A0$m@n)Z<M714Qawhd`xrf=#4hC!yIpz<BcxJ;Kn#s
zauj#oG=rO^X~7`Wese1c$l|8jZyw?V-*Ex;-;~MCOZ>tg{DnQc`IzTHAg18=B$(gt
zd3c`>QQz<C`(1s%cSLQ!+p*ufGnk=FWCpXDO9V?<PBd#+$GIT5<@{UuDNbb?;htNq
z(C;nh-5P<}-<nA{dc3uW#n^*e&b_snz5M@7ecm$nTY9`@?zevB8aKJkUCjQrS>1kx
zRJ=-BULzx!$wGF_@^&uXr8T2)=j|idr90^;j#=LMj4;gN&Jcz%j_IiXj!f=&Z+G-?
zM=p2daYq(+Hn53p>|i&0FsnPygW!*psP7N;{h_`;vXTRJ{gH=~RN;N<P#^XD@i8rs
z=O1lp&uHBFhkX8!%O8IQ!QEt}AU*oM>%6=6>TY#vQI`fZp(*y@?kAYh-2qHy8hX5I
zMtAjhcL9-@{atz8)$83g=<Du&4q!L$%JJ^k9OopbF~_^#@;wiN;Li+{!<~N)$J_t&
zE3OB@J+<GH!M!59joR;(qB8GO8};9l$-NI~L~FdQd-nI9{k_+d-t;4kS;Ucu`tGUk
zp8D>cL2dWcc28~h{(t}9{EIo=5Abg8o7a6ibw3?yzn>BFx!(t8-(SdTb|H`Z?zr#V
z`_8-nI}drviy-(b#LJk^U(Wq2HQ6Z0yHuklwb18Z4bbCXAM!Eg|Cjmy<?g@wGk`&S
z!7xTLnlX%LBIfy*`u;k?tswZ@oqw008ACAJzwPPYa`^iaSNM(V{K;d~|F`;$FL>}0
zNqHH0Ja_{=Jjlsg<fjm3_@EA-F&MLcFbcIjP}c)>J+NmFX0U`PHegl{wj<96@_b;g
z9(=_&oZu8{`lm4V;Gd>+APiaj<Borv`;YVfS-~c@v4h?0$G-k^80Y@;9as7Pnfm-k
zpAXIHp&lP5Cnc|v4*fpNgx((7&xa*=htiazB6js*6{=Gcd;72>qlw0y4{ry-qx6(P
z{g2G@(M-(ZQ6%2kqh+jPE9!qFlSeXnl)zq&ahh}J;n7cA;tKkCY(9_QLXD5r_E>F?
z?bzdL)TSOE&=~vmcqkk2ZXbV-9eDhRe}mvj64K$kC+7R46y>ReUZ2#Y7UuoLxlg?9
zCtdiAUi4)kgK^IjyYOTx`h611X5!G}6FojL_b2A`<RC}zW}h5KZ%@?q<T^LG#UI?`
zFCL)gCr@}91pmH4Ia=Y)e`Wfw{Qs5z)0EiLr|N#{jXjmY(~oIRd%C0kr=QasJv=q1
zr=u8$9ez56nS?Ws2+Zo~1+JmKr|NsEzNi227<D~;9t6+4!)IB@g<PNIM?KF<Am3+Y
zsX!%K<IZRDc_x=<C-{Y{+(Ez3o%cK~*~v{_3Q&~d*wg3s^to9*Z_KB3LyynR=(+x$
zhcSpD$m_XYpN~Ob&lj;6yZKy>&sVaVwZveK&o{A!Q``-L7q8*Y7cCgUauQMd3mN?P
zGOwWa|I(0|T;xIh|H<UPf)u74m8nV%?C^i}_<%<AV+N6|U=?cnZ#`RyXD12l<wg(+
zvQUwlG^P_>=*=)@Fq@^UWHsy9$QI&==P+mao*%i$ul&aU@A;j_K`4}rtmGgUZ;_uu
z6s0)tP=@k+fVx5-(v)U=LTlR69yNzPr7L4u!B@ERrB^9Ma|SXOb-%Qmy(Dsw<9v(y
zU;2Tc(8EiYxx;-P@Q7#p7le|$L{f6|9!*eR67?lfUy=@VMqNp|GnjEqMXpI^qn;#@
z$T!JyqFId^lKdNllFBEkT#{Cx0gY&Zev>*c=};yzjhTcK!6KFrg;^y{;0)){V^T9p
zs=uVaaFy%GE2&<S{uzXl=_^@sULh57OqPxeWF#}@m@GRvsYFXg;Lc=+xD|w6PD3%&
z{;~{S?#BSs{_+sUFqP@3|7DrHJcoI#U=1<EvXyvtvYQJ$4MNFNpuXhlORm1;Z=km1
zb}aduyp8&j*Wi8XP@fO^m=?664ddB?{FB??<g!R%&MA_imlWA>UW$@bp(eGcOG6s-
z5zb9v_9^<}%oLN*XNno<F~wXWScEyHSjI~9mcp!3>}5X(ILuML;W(!-OaC}RD8;=X
z^h#Pv;m%jSz%IRV5cQ`Fk&^-x#w=16r##hBe@dC8tc@O0$|a>dQpzG_dpgmL&*()T
z!r8<g%sJ&(s4e9Q>{m+rmGVa}ayba43Mhn(Q^_QiOj3<y0y9~R^HOa^&#CmAO24U&
zaT<N5`i=|Sz&lL!glGI0gi<FZIVnkv8Ko}ByHrDusm&<0{!%xf5oVuSUa9q(T3xC8
z(4PSeLXN42F_O`Y!5mXhWHPHc!mS|msykmTfw%vvoqlxzJNTAMT;Vsa^Cyq_7xlmT
zA_)1~52dkVY0NRr>v&sf>~ESk$wNL0@E%<WLw#w~mqvYQWSK^7Y3x{<DJ(>NX=2$-
z9NV!|X%acaSA5N1K`3or>_A%kn^qQS%{i?ZrPWK?2{<pU8KqsvMz*kxT_ms%=cYBQ
zv}T_6|7ZS#KGQx$kLf}rB{}Al&U;Ol4!xx_t8|4a%G;ErG-WAICCoBiRa!HYrMNTQ
zwIGx}6~$41`p=n+9Zf$Evq-;)m25!$>1C4MuBF#Qdby;RM|xSLKh7!6^F2TEGf#rh
zYuPD;`d(AtYwCNg0+mtMYt?B?8#>dK9;oNFFa{yd*M>8aHMsLN`DBnwhV<m60Cp*Z
zels{P!$-8|Q@Y_DX6S=m%`lL`m{Eo~tYtlV%wR?t^p{}=yD|F=^2(ss3}2zI441jW
zRpglACb#*6KQYG)4|o`aUeCZgG{c>*N8-EbbvvCg8EVfcgN*g~0JUfQkXCf23+m4(
zlZ-vFV;P4s3U4c;{mp21Gfrm~;ly)}U%0_7)RyrckNB78K`4{=lgazZ^cEj80-0oz
zNv74TV=Mb{UZ(HRb0+;}(r>1_{Ea>{nRO;J$()kRn0w|o@eVT=pfJTKP8I6Yo=)g7
zb9eNYxi|e7fV?v6HM6=hhck}|79z*YOIglJR$-2rW7xnq{2qkfcolcP@eyCJm;`>}
zap2c`NlJ2F;We_61NCRgjeN4?!yL1eqayY!OAX$q4)yq)$;@X7%TQYuS!RjF`^gf=
zc6Rb(5XzdGGRP#WOtQA613ego^RiAu&sp`GRlixIS%*HeZek0GoWz{6np4&vxWpBH
z<2wHYp=>XanXKqBTQ2mMEkA`QioCMvHJiG!)#C#i(F8eWYsM$Eq7CMlts|WoO%#W4
zXZDnopeg;C%|>>xo4xGkYtC{W^=H3;e6s(HIcB$O+3)j!Cp_c7z`q(rPO8%o_2p1s
z4)x`bWe&CFuwywsB@FfDn8*~S<IUu-Q#lr~gk`MYI4^=wPCJmZAhO75&N<B}r(SY)
zz<D{%DCbxvF_jt2VIB)`ZcekxY34bdne!C-%=s;P%=r_SxPm$5yumH>_NH0AnUt4F
zK`PRaj@QVDS-zQtvV6=Jxbw|@Tnj?EUP1l2YSS4znyU|Hk!t`Wn1K3o$;9sghjQs5
zmt1nmBbO|4tzs>)Y$lF)&han^<xYb7a;q=5`f_JLZMomTp5-ot`f__SxvNo=TG*@H
zjWM&_&1ix7<lf48E+UKE&x4TvS{KTrmpqwpULJdzrvg=|&U@6weDXBJxp~^r6KCcb
zi$3#AMvr-B63#r#DUa`yJWJ7A9<$1`liloLKL<I?SA2t6<~hmjAoNyB-o~A8h2gEf
zwHNijWl!^FArJX5i@b#?MP<~Vw;DCjLteS$l}BD#<ZVS;I?;vhe8zNQ*nv6cJ%HNs
z9>sp;wO@I^<pSPNzSI;$#`$EDPbT?B@+DJ<z<K#%(Q`ii=F@M!BOF7Y`Oa{TU-^><
zJmO#e3qtu{A{ogsBfo1L%3q#J=rO+;<=0>S+SJ4B^UEv0Uh}If|7Y}~5B-p1{y_|3
zIO@%>-u&j6e>^KV!1W+h!0r_&%7+YOF6LN3%?0#dz#Izvg4zq*M(qV2@)-3OFrxx5
zf>6O!q$2}*D430$<VHUQYtacc7F1h7wG~ub!BN<)f|IdZ1!poFSr+^w2o*|0X7W;w
ziqxbr&MVY~{tRX)BN&4|3r)nih3se{J6dQ7F>GQh@wlhZ9?Y$fObY3{&?WvxpM{>F
z$3o^*_$AD#u*?eUx3Jm@rzbz&RpBDomBPh&hcc+Sa0TpZ;VM+44a11SorSLlp(6II
zNC_HYmPMv8hxsf-{Y9dQMg2v#U`|E!P-F*oxX3r0;52r)$OV4F4E@hhp`tk`Oi4<k
zwxaSZYQKuwucG#=XgwM*fO&WqMP*V{CPnXK{zab$p<*d<Ua?&0xtM;7>9<&U-bJ6q
z%&FM>G^IJ6@eYf5L&bU%#vtrMF?kfzbFm0EpvPinR7`)xc9Ot8<W)?s#ne^o7{73p
zYuw;>?%<sjQ*SYIEM|_y9`kPydOI^^X^A`Ej^YTnf>7~SD2SSiH>3$_FW!uHbfX9A
zFK$M~`_K>XtGKsS+#VO7%nW8Tm-)o;J-?y8;_54|zTyvfgdHpXGzgWDX$kd}$ccAT
zA}<Aao062K9QLV1N9M4Ny~v`38I`z#UP?H(r1MI?N><(^5BVreQHtZ-l4e!%1Dsj%
zQ}kK#GxS)pFJTPAoJtO76nZOZR(|t3RMKviT*5L|vWhjtV3s8}a-7>i=$*8<^PP|J
zUf)@Y`ro<8zd@)}5?;nEN~Pj;>{%)Gmy$`Tx6nf=xs;MeDOr@NOjX{aHuY#gZ>F*U
zb1t<4wUt_n{VHX@O4+YcJMleG>gOO-IvFx9EtAqRDczn<^yCYiS9%6|F0J3v`YpYh
z_2{#-cUd})gLsF2yE;_*0^VWiU%1M3Zem7dl9Gk&=&_6$mC;|Bf)v5*%gC#YUdyPf
zOamIxgpZJ8nHIF74ec<;GM(wd7?yJcca}|!w_4UtmmR<yHnWR8?B@W-IL~*ezwD35
zr>q?-YmQ~_;cb<D$WvYfp>iRTke`|~ra3K9TRB;l>q-wkrw`swxka4dE;1=Elk%C#
z%3GAcdF5-N=koe3uix@*>4cpv-wo%MH>2|7nZk5tF^>q`Q+_dKRo=|YpX3bsEdM=v
zEPoMmDu0#hc(3K}1fdFgtDvq5FO!0lyh=J=<8{<r!7M9eqdd(SiaRSLaw7;;OhsYp
z(gizOQ3e&wqT(P%F$wiooQ7SisE3N-L=nvzV%Wr1;@QDZJPtyY>~JM>u9OzFRmzC{
zs${<^*{@3Wt5N|P)0Y*<q>@Z39p@AmxW@m_dm4l)>$$RiE9<v%2HrrQm2;Ad;#8(O
z?@^luG~z>=Vpf&=Fpi1nv9cLe)?ej0%x59;s;t+_>Z-hh-Rxl>a;$uaulSl{m}BMB
zoaN6T^llp7!JY38W(jus-77(;N<a?sQ;4FxO*yJj1NB#_MIGv4j#XOYZB^+=SL|Aq
z&*{x<Hj=<Wj-a+GvaE6rZ>Y)-{LG~wR8@vmOX6Krl}S~ZR2{>3W)O+<s%}BgRrOm{
zzg55C6#A_CE#GsUzcHt(=2Z1X5UQ4hmwAO$ct_O=P?@UevD*9SuUdT?(gb-`(`z+#
zRqIVZ!Wf7gs|{rYqxceYtTus3tl}`g2chcjtX`at`GN?xbDoR*!d0$umq$E7{nelI
zUl6Jh!W?VZwHleoLQZm%m;BVE3;j`F4fWMfUkzE-7>~MYOu<goSWPUOi9<a#_F|uE
z$hU@kYkbYEAXGCu@~J78nyu(XUxuLHn$D}an01&_O>?Tbja}?vKL<F&CG=VICbzlE
zKbTid{nmUDgx(AAw%$uidR|AJ@2T%SXT9gF_hkFNUf<X2`vVw+dTPm`Rw+tThH}{7
zTI#P=3p1|uG0kYsCpf3pw_M;S)L6^gsP!8+kU_0KxX0f-#C&Q!!)$85L^4uf*0s~1
z?%L|Eotdo2u=bneAs+=P!rPQYy|vX^yCUyW4fCw6=Gt}f-BG&{AEN%+EijAPZRtQ~
zy3zyhu(mf;TQ;@rYVB*tySBV*%e(e{9`J~Nv14^)UMC4J^9revf1TIJ$QxuMCw8t*
zUJ6i{Vw6Dcb;?o!Z>x^CRi_5BuOs(5^=U{Gnj-%?Eono0I$;)dy3>>1cyo0IFqol?
zU^HW~dvzu;j|djBI0)6%L){FhyRQ7}W<?%#hcgm?@83rV)xFFeWK!2`>zZx7cd3WG
z>#4P#TI+2jfxXzjdIy70edpGfLH+!gWqq^sZx)2=hclP?sHeW&ss9N3QvWG0f>49z
zbVjfKje$^u&-jk3m{kKi*TCO>Aj1#L{sXyv@Bxik$!4~)jU7R#p;{WMrJ-6Hs->Y?
z8mgmV6wC294OjCp2sJX}M#)G{O4{Q7Ms}u=yc@~e@AHQmUE&vhMNN%s;{L|=ud&%R
z)<a|GHdaexwKP^sW3@C%M-J?I6MND`T}}Ejf>C_QI8O2t7cqw>?)k7JRj5V{-baQX
zs{O;Y#1I>VKFY*f<f8zE`2zWWG?B?nL%&V++cX*aZK~g<AJdV}$iJywYihPlzvdVx
zI30vOcK*jDcn5Fu<8n;Fo_(yQk0V*i;~><``OTc)>=nG5X3lNap8*VF2<F@DD%ZHd
ztsvC=J(}<l>T2GCRmiisJezN4R}g9;%N9kcj=yP9n|j!Z7G~1I-?wPSC$y#=VYs`6
zTv~WHE$n^^`L`H@oLb1Kg??Jdsl^P|qyH9v2BA;VQ-)TIWC?rt5j}izo!`051D*$=
zmH{szi<YuzDT|h=c!M0|LZ&V4XUihIjeJ|Gy=5QN*K#ZqFu#`SYB`7b$h+lY<lXWp
z{|2E}*~p8XX(f|ZGHE4?R&8)ztN!S>)j0IpY6>$6XD-fdCF@pe*}^^!@fF{2iZh(Y
z>{^*ytG|L!YrVBj$*ZIz1DVJ|cHSfp`KZXdRK@IC*Q6G8sgL=!R&#4_s&!NPqQ=&7
zxU;oB+sLhr{@QfnOJvYy4Ka8NZ8ou!1E{~v5oFXx4{eU~1Kx6*EBuDJwYh^ix49pL
z+P;nq+j@6x-=_|0YugYz+15_BwFhn6(w<4|=4WKmRwnI|k%IK(#Ch#Xqvv+|ZKvOM
z4QPUSx3jD5oZGG|Vc5}j!x+g}#^auLX4cN^+pT6ViRiJN8MV`2yAzz|9P(<X*LLb^
zcbSJg;VIAgF9@}_pY7G!UajrTuzhOMqVD$Q*uDgf=#L#~zY}M5@YxRbwS#&24fRk5
zwRM<{&vb}DjU867o{el_8#~xV0_yK@4E1(UZwK{u_=!uHO^2&NsAIresH0;U%2SDI
z)I^pY&8K5?S|Y!Wz37V^J9_UOM=%;WcAS7(JF2In*>}==r!-_kKb_2}Q$=dyyiVRu
zrye+`(-4L;iZPf;Cuen<#{w3ygeX=J&1&@8Nnf2F2cgcH&_m~@IJ>j6JNKp^18_%Y
zcXW0~XS>~b29YdfInM07hIMSm>^pzWaZYib@A(mP?|d8gewvoo$jBS$_tTu@CNBjj
zOfh8rss2B$M*|wtn2%`2C$y$59q7cTsQ1%l9Ogz4>XHh1cJbLR`st#FE_;zh7uk3D
z|7UJ-hktkxgt~@E!pqpnt|>`P7S!8Sy<OGYwGc%qjyt-l(Qm1Tx{knXx|&T_v*|jW
znS?W!m8>R?-KeK)B8RYxT~BfbId-*=UA+;%i5}|qA+6}fP~6jP0&{R)w{>h~Ki*)s
z)7a^5&gk|7X3@>N>896ie{!D(JmLvYc^-tin^AZ7b=Ob#KB&LDv%5RHyR*B?w);`k
z+T9)9-O=40-7j#BzmR2jGxwY6q3$n&P>+CD$;zALAs>a2VGkMhaA%Kdc+WjL)0G~4
zjyihuXCPlNjFFgkk8wn@6tnMP?|VdJM|;E&%VyNyBc2`X!jATM7=%7k(`S`wkC}a@
z*U#+pXE%dT&t#+_J+G4q_4h1D5#C1KJxf!T@>HZY4QPb9^=wW{ytkh1P<K!D_FRv;
zdaA4EP7*lC5!BH0I43c$&+Xmk_4o+2elCyC2QreWIPdf2Y$T5D==1Y^9N;it@g4Tz
z^I!S@xzG472=#gi{q{;hD)ike8#&3vTjZkv=GLny)lo|?-xs|W;m%&p?&a)W&hBNu
zdOhM_+|k<|z1`6}Ir8kSr{3ODZ)f&)X76GY$2@vhp+1e#bMI!fqAeZhL_bC{j|D`s
zl;uQY2YTCq-m%z$-g4=!#@;gReTH*<%lG`qMSkHb*RTV<Z*eCG^?3zz@6&)@%*HPD
z`5AlOH!J0+Monr_hbFYd?EAK(Blf#*7tFBlV1_b+G1$SrzBl?#LEU|iae>RowXeGR
zs;jSj`+94Ay|uoNk#WDb_!xW9PcHrJML&7?-SkjDIrLL+Kj-z+f4`s5Yd^jAyUuO?
z;2zHHA0jE~u><|hs=rzFH>>_;)!(f8m*8FW+`k6zqv!thkW>GLbmB|Y(LWJ=^p{td
zv%{S2_tQguKRx94(?enI2y;i6JHiT4mYT>itS-(BYlKY0>_J$2d_RQQgRlX}GR!W9
z={?MyVPgp=if!mWY&UyROV}a4;u}tI8aojt-!OTE$s<h8VfV4iVRkv}3IDJEMGzVg
z@DguQg^sv$z#3#cK#l|TI8aUlKcE?(&>Hm*>`EWhKT!Px2Qh?U*a5$v9vV1{IoR)k
zk;rl2GW0O;3U~RNhp26!x(0<vLNdIwL79>3pd!3YNlH@*bq}h}d&qfEZ=65q0Cr{2
z1!OVEJ%jW=I4RB>Y~Kf))8L{M=N-yXfyy{{u$~9o{lR?+V-WfqY(|4eF$ViSSg(Wa
z>fjm7W-aT9WfNO4zrp4=*!%|XVIOK7e261l4MJa-#TWUpgJ1N-SzpBSEf0dw5VIJf
z?jbqIMIK}_L>5ETKBOY=QjHqOWQa_Ld_)Uc(Uwkhp*x>3kr>oBL~TR%bC9DP!)^^Z
z#U;#ah%ATv!(;5ykQYH{s96n7K`PRa4p|O${!rNroy&6MFw{Lm6FG_VhW>_K9r|w&
z8kU@tyoxi1Wgrt-kj=0{6ya^`!LU-4LI1-V;J#t{8MY4f4|Db~XAk@T+5ZKh;W8es
z*5U3L?vCN^82%dG!0@8jh2ihu%;Dvc>G0Y#<rD1w@OE@YhQnnz+?~URFabM0d?|Vz
z9?cqJh-EWzY-blT9e$Sce8&ZTLe9hGGTcrKzs^l=1)&kL86kra^{^i!W@0}^{K%6a
zH1ZA9J+cbbG5?XZXhaLle`H%ap#G8SAK9P53}pmk7|$f8p#G7^P}|6h{DQhhs%hkH
z?s5;=j!KPrjWVxM<~1riZ=vQ<<~B;cqs(nodz?SYj7Dw6zKuGE3`Sk%4$d2GR-@DM
zI+@AJo8%!M1t?2R^fy|6qxCmhf1~v`x+^{SoIdDv^g#4AdOGqO?Tw9|!+aKEexsML
zj1`#S=mT5{LSNb&zmFdJvOc~OzMPABeyR2^W$>jLeEAHuj|q{I3}oaD)IY}C9ixXa
zvKV83$CSqIj;TylYG7_-)b6*@Lt|zU!6MW(MqOjfWK0ZpYK)y4vz4EN(AYHC-?8O+
zADN7m$yiy8Rqt5mjh%pg$1XsxW0$g$)tJZF_3Y*-CpeA%#$MnjE@218{)t}4rRR0b
zXPo}V>2F*v%zd1>k2CjidL5^(aqm%^y2x<c2Q=m*KBhS>X^lCK8;Y5X+lxELC#5hA
zG1Ku=S<4o-v4dS4<T$7BzQ%ux`p5r>oW}poUGDP$a~rRh@#Z$c+$Q9tI_{aEwh7Jn
z1T{@)PbWSlj6ukCf}NT$omt3t!XlPnUK8XyVHN6`==_QHcVZFBBZrCZnW*=PopIj8
zA(+!d{Y{*K9i2EIGn*KRbN$|V$nTtoCjS3SJx<i)L_JP4qluTe!f)K*7JmexNiSiC
zCne_<QjrEToRoo#yg^p7Q-Kx?!=017gGt`K-#8CVR{!LBbfpjd@wO%pW;BzT#!SMQ
zM+6JegWoO>O^#(VaqJ|4eI%lXDYBZPzA0*(l8G$jBscbJN<K<cj`xt|6j@GbLQ`7N
zmJY~vN*Clg#racy<u;Fl&{R20b<fny<i&YYD^i;VG~z>=^9ikS?o>NCbqLO!YDQD%
zqQ|LbKXnPqSjlSEVP;chIQ1}J@ioUd$r;XJj#Dr2BR}&b2u*u~%D8jdmw5lv?DsVF
zPftk!N>GZjl&3o8GhO}DWis76o34lHa+xlV>9UyKou2e1j6r-sBs)362~MN7>EGc$
z1Ezb6)30(J`!FLtHIeZQnaq&MjA@wtj0LR1c{38w^9=pY(C>`%{D7UEaS7+n_>*Tr
zXl96{BqufIGt)gY?ZV7F6z4r^qtBTipvRdX(Tq=MO*=ZGx0&jiIgAmEVhrP%$Yj(!
z(=2DsB9;@}4??rtIm=GWYQt!vu&1+r<{C1XWfrsk;32+8W~+a861=zBdYJtRnaD;?
za+9Az6y<H2(2Jp%^Xze`ZT1xG*KGSW+kVZqU$Yl;gvUWBJPR@jmq~aH-lrk0a9(&{
z^c=3=aQ%i)Vmjs%9*%Rv?P>UG;xMc51oRkw2=|1WTew{fx0m5JcoBr==y8r2&C%Z+
zdpPG+(jl)odYz-LIoWxWvQ(fF?@|@D&Qa@}I@IR_%y5o9onueusC$kY=csAUcl;ZK
z=H|lO=XOFybC<G)7-HFk`sW_tFh^1M+>@N<ESLEWeayXuotyg?|L`aX&C7~;&vVZ_
zb<Jyt+00YZJekgGO9wjB1v@h@kzcuunaoc`8Zwg?=gqH3ZM@0(jnL=(=Cs6a&2L99
z^gZ9a=1*ZdvzWtt7Gn1E*Rg?(Y(Ylz<I(&4-RO0`z9PJxh{DvO8_te!c7$DsunQ4(
zA;KLI?uc+l#5`6Y$B3;sGs2k>_90>~$2h@{$T33C5!aAo#2?&4mJ9600{t&|i~QL0
z1@?SFao(W}zNZ%0hXqxrPBT71#tY=JKpqP^@+n>EPETaCpbyhnk6stJb73Yb)1Hwm
zK^6-S@fF{2oNu|r6|Qofo9JQTBcAbJ5L)yS$w|qpq($wE8qu0gbU|H<)U~KT1Nnks
zj9@iC@NW=`OhP(j5-F2NSwyNg(s_{|qTfh66{*+A9`vRk0~o}3yw^zI0g;Q)U*rl_
zv6dKiq1VWtxs3Tlnop$uB5!k-`#eCek?LBUme+V487_W<Y~;jyTbze{6u=x8*TPH|
zPr{vxPvPw>$%2_KX-*i!8O0dJVb7M#XCaX+Wf^){vWac%z|5BH=O9P$hW!S4XlV*E
zl9e2&ZK=AJs%vRsic*Ox)JLXEKc)q(uuDtTy|f#j@j3Hw{?gz13v-W>MU;D@^dD6O
z=SA7isD^w*Gwf+pTiVkJ=SJx{YBUinVhQ?-TFGkGu>rkCd0SEO?8N>?o#R`+$G$|F
zUzGVpnO~INqi%4EJDB0JROoq`nwIrp4ragX63>Is^6XTg2JcgcdZ>SSYueEP`?kCb
zGFd)=A(-28b6Y-+iA=#;TdwZqC-{*o{D!)gt82NPTK)h#wftY61)&xBunQ{&BbOEC
zzd{}><gr2yE7ZHfc`Nk4;v#xoq1P2R`Gb3y$qMJLOhP)$eWkgte2e_p$Cc*3vN)Bg
zN_F1Dp03pQ%KChO`L9&RN^@E1?v)o%YqYbYogHoF(Ql9qcSO4*+8xmaDT6GdWf|?v
zXlF*tKDse&=z;ed-48iN4`CQ1acA^Q7PEzI>|i&0N#qb;@eMMGK8-A*Wf3jkXmgJ?
z_h>ms%OhIO(NB<b^ot<0DnK@?WU#6|U$Tnh+zUdhz46s=qwdvBF_+aXY0anfqA&d!
zh?%X{!|Dl4Wd^gE&qDOFdMO9EjQUpp%|q0+T3u`8y5?nGAvI|*r!_5@OgK?&#amdj
z5B08b-kM+e6TPm{>zaT0F9@xDiDV=v6K1s5eAX60e``xo7Q4T;67|sQTK%on-`X$+
zp*O!n9$Gt!F^tFe*;>7>)vMni5BUx9(ApR_uo1IcYj$hRZtX4-Q1e>zTYHdSP~$o^
zt+OZVy5p>MKD*AlT=zT(#bifqF*Wd+7`qgs#+Z*Vi<owFpfg?QhJA`rZ;X0l)EhI7
ziA-S{o3Jx6KXQfN@GfKQO^khskztGsWB$cl*5^Ye>&<xmXr{A_mFRW7de=K|y&YVC
z5wlo-jhp;|xvc*S=Wa-X8E?oyF7&=3KZPhtao(XSdfxCJwW&)38q%0g8H+kL?BO!<
zigk9Zvt!@DyNu0=J7V1t>yB7+k1fyp$TGG*&Wvq>Ok>;gIsK4hte#`#7(0?Lac68e
zQJ8J)4!p})?=m)#Lwv<I$Rt)KvFDIQ>}})`E00(?$I2sC&aw7C_9@=w#(<Z2lPYw?
zog3G15;<;4PYFJt8J}PmHnpWIedv$+H>rP<UDz~?NtoTHS<GPpkt{`yoAj{h3U~RN
zhp26ny8I4!Xme8J>-WDyo8Q1*Y&NsaX13YPHkY9?RWZBGGTv-<o4eu8%?CNo58Ocx
zn;!?EEy-}+7W3MYmy&psTPonZE!BAsXKk?uTUzib`r2YPTShU4@#t~ORAw-nxkRvm
zO>7~Kcy^M&J`y>^5sq>#2yNBx)`EC%TYDk1tvmQ0*~DcaJ7yJ^2ero)L+x>Dk5hY`
zEaGGlr~bGmG~*Lm(}B*ISzLG2?>E3hacYaRQ*q`Ir>;0P#eI$J{2q8H?jqi5+<oj&
zoE?huR=0&v^S0!qBsEoN$3)Cv+Y&Y-gKc}Tr`w#j?HBCkHv6^hA0G2O2*umS_#~K7
z{OjaKfARW@*I&H;;`JB*K6UV(;v1sZ_@?M9z9;hY+uou0ehgqRLm7_w#ed0Ima(7T
zg3$JtDNJL+2*>=kpW*^PaS63={~fh&SNnFgZ-2^*AhbjMJ6`2AGV%sF$c68P9r;lA
zj!#kBjxQL-NYu1r6833_ecCabIc&qdJJXSc{K#XcJa)=q=Z83NXE*e^)1L0s=gv`#
z!z^}AVH%OFB^Gnp8OKf%*oXP=Jk3S^LVr8;w^M&R^|#B+cbWMvGv8(AyY#wCUAyv8
z5c%yY%G;ErH04n5F7@uJLN(ejj3^FpJqYc#Kf6oN2=m*m=H2?=J)ecBeRni!-@S<~
zsDHQp-Mxdu*st9u(8KO;xq!Lt*3WJ`n~(!FCKTr#%21JaQCEW9O0Y`_ZTS?LCVYl^
z5@ee&n4ye7z6r8SaDKwGAhahLuaOT~?9u-o{qAwzo~Cr53*E7!d-@W_Ailty_RM7+
z8_?sPt>|x$8SP2HjP}TDk6!m2MPGY<;aBYN9y#v$ojd%=eID=-bKIMe(zL*y>|Mek
zZU&)!X1dRA?W;)x%wgY$sC{1>)V@#c`{c1t9{c*x4?XM~&3Gm;m08Te?Dj1{?fZT}
zef$349=`MUscYZ!AhbWgyWjsZDJV%N#xf1_-!GH>GTASS{YP-#{-4qB{=4XP{{x<2
zU-!QVLVofpl$aKCNqn8$<fjltaZh3?%2J-%G)0ezdQ9v~7-p0xuf*Y)d*T?zqu)gR
zCaz!=YcRjW^=xDd+t`k}6XlS&m;IPs;<F%hAQ$%TKo^{KK#vDbp{IkXQ1`*iWF<TH
z>)_j{{a|UzQIX2jr6Enw$H7l%O*`!0L3tirMl9+&xP#rO>7boDXr~Sy<0Pk%<)I=p
z;A1*6fWesgq3Jm9&`LIAR}bm)Py&e@<Ot3^^gX|Ep9ehRU(EloIUP<yIx>)vH^@c~
z-Xu5XbXXmS?cL!y$oH^X4?Fv?vk%*a!*}=-cN})dVRsyU7KDzxLMF119cLcNLtbQg
zqzW~ug&dDGq%j}i&Lf@a%S5K2_an1V$C3FgWHC|Lha>jk$Xd+$h#Zc{_sCa#&2h~5
z$XU+w9Y5f^<cPgEqUNvE`PI9a-B)99)>kLc-%)#Uv>@s}TAFfHz#bi~kJ^tmp()Mz
z1p9ULGkT$qqXYSZVT@oA_TcC-%>L*()OA!%N7Z!n7k=eFFM`n5$w+}(zD|RgeQjo6
zo7vYn$%P!h9!ez9nAg{G_}V^veTGXo@9PIa=$jDE`6fNDlbNjKz**lEqXh3z20eeH
z=Wi-g1#|kQA2WzS&fna|*~grH>}6gdHSRd(j$`gPmWBM3qAbol=FDSNsg5j<wW2+p
zkmIq>_?$kt^Vn#nqsL=waR0GbHWSBocCm;3*oR|Bkn6Eukn1t~d+a*DW5&nq@G;pO
z`<sV6#$Fs(^Ko?^Z;9C*kHT5UefESIoG6VfPN?mK`JV8Z6C+XMiOGaBj|djAn5C>o
zy(iRrLcJ#v*vA15aU}?yOiFq(A-9v+$<15j$4;IsM@4*>o|N6mCN!lvZRvowbh0bm
znT_*LUgIuLgV3ooxaU+>3gEm`?@|xvoYMQLHkipNGda}-XPp{|o=@4iQzIC~7{)Py
zNOp69he7DHeLXF&)77a(T^gX~(`r8LuG633{L}q${%Pl*mg#Ako*vC~<apW~POo4U
z=I`G%2%X-<77{thRjy;kr_K1Z8K3@(e=y(EdO!Ul2%QNb<1;colZ_m_NgnbclQV@V
z%G-DsXFi}OGjZpc?|2r3&gP;jvOhbNvB=`AT{t_Hxh!EBD_M>I3_H7?o$N*ZXU*vB
z*Br-p*V!{X2twz~>0D0Kb<X_H6+unsywP*zsYDg3(E<0KOW-hPxyDWI^CAeHci#Ee
z$xVLrdA=wmF{|_T>wE?3@G*Abyj?ioo=@q9_j%s?Ja10tC$R+mo!8%a{him}dGk4M
zKIgX*k6zEK>--tcBfs<Z<ou6Z<bN&QX<V0e)<5v;ce#P0B7%x5?xGSZqM(Q<f(tmM
zmF;D#Ew)cin{6}gW!Yl;W?6Y_>r}QcPFA+-6e5eDpd#Xm0xIhL?tlO1^?FZ_`kr$>
z=UhDL!LJhE=^xc>X9qij$e&RRrT{hnT+Av;IUGca?67DIc2G2#Jf?CIXK*&>aRK@-
zn#bR{3H=w{&cC=9*%jGY(Q@peXd|20jJ}HWR8)t%D%uxBHUzXso*TN-9k;Y$0D9gq
zloV3Y&jvL&tl$H_K@J->VD=5Wf=IFVidzs%0=}PO_gS1of9$Jx2zFFFg|j%9^SKDK
z6<>~=im$;pRlERoi_Kc>Z&UFSp5|Ge=Ovc1j5jcQ@k-w2U4FsL8}+nt6m#&_#+UgD
z`D{EAL`quHhPK3@|B~MHMII&cD3M3Wa5Bke66PqGP9Y~U3;QXt=aLuESIL{mtwc{H
zAM!Du@g-klFQsxS&BFdmXJgl;ZngAUZo_+}Pw)!<hLoDKbS3X$AEh7R-O}%|m(tBt
zvz=P(r*tp%L8Q!{%IvAE74Eal%w=XS>qsZ;sZ1YbZmvx2GC7y&wanXP-Y#=jWo1;L
zMwuFAYLwM+D2SA|CK_*+d$T-_cw|}b+b>UJ400^bCWl<qEI)<wS-?%$Rk<54zl*!M
zj|W+VOv;}?7Ui-imv6b9m%opk%jHr2DW7B4<=^lhDmflRHo3`7YHqrWNBB4E*%w4A
zI^dhA@J&?sCMx<cgprI!{}uYL7|#S|VE+|%S8*z5at?EmV};%;+-b!-*j2?R=&M3s
z72mOzpZSe-91bFt!<oq(E<`4kGO3hBrG6{DSGf%HR<6RVm0z%$Z?UgR?^YJG6+5bQ
z2bJ!i@*s`;Ri`<KY;H$4QW$|9Z8qa(Gj7geB9oEV=4ljQw$1w5d@=Ko<L3EX&9z*Q
zo;Tmf%{;|Nl%VF8B=WhO`+1W!{E7^={6P^F)S&+@b?n9rTlRB2h*Y(t4Q=U290}N8
zm0eYx#zp9_N`F=QtNJ^7tCDBcEj++OJj2Vp%Ihr0O;x##D!o^If^WCV-B)*EEIHUy
zwLGfjQLRR`cdNZuZBNzD^9rx=1}kx^)$ifmYWu4GjlbU9jybFCsoIRy^)zq@nN^#2
zYlzvlcBd!3k>%F@48omm9g1CUO=Tp1<4P8z=GF}y4I<loliT#a?L2PfZtlZ3w(Vh-
z@DfW|h8=BN!CQRFSLlD6y>0uEU-+H%xUubavAqxa+MdjC^t62pnPf4MNnDP)+uiW?
z@Axm<*nwSdKORJCyjNqlHT@WjIcriFMLHRbV>)v<i*q@jOSlaCskw@UJitqsuf}{e
z=BqJZjs4WvPt6Cc!mKs=s#(vU$ggH2rEFp|_E)3d8vWMnWLFT`(UxRpay5_h3FX*l
zZ4dNZYyR3POhxatv(bC4-fQ(<dlB={f9(Qp;WqB%9`47z)h<HcwZEb_zs(V;-AWC5
zs@;#h)HZR1qd{cnAWr8d?&1;Tu~Qy9<*@TJyti{5X5CqZId|@0H~Tn1LlCKJMHF^a
z=RWIt;Wq0AGK68+SDn4rnX}G(b>^!xU!D2t+(6xxT*LL4wN77kZnJJNPq2iid6pM=
z8U5D1#v3fh4(onkdl1>x4mEep;vYPReeSZqU3%W-u6Bp$eRmsTNu&q*-`$74_`Y_J
zz@6>3v)$wI?d;AapJ`mdeLTtYxUJoK+bzr8zWd$p@ID{nu69=jkv(ywA(K5a*>g7M
zaVa<8y*&?N<~`=!W8OWl@+Rio^A_IS^Cdsw``hE&*;7O*<@{A=3wE{VSP<FUnJ$=f
zZ%@p)w;%SjcL>8cfsvSPufFycFq0E;pL<W`G|oWJd+l=XTo&>?U!&%}*7)xCoy65F
zLf`v*Tl-|-H##EwK4%T?Y~MQczfb@BiYdV!_tminH@vTr!yM&!5ZSNy{SztVWagl+
z{rcK}A(wC&^SO#g_?TMigGhaVOzLG)FN=Ep)_bphGUly61+&(l$$4DB#mr*?H*pUS
zV!rytEa4esQU4<LRBzUL^VR>s2FzA(KlS!gU&S_dVAguG)|>S}G%<9*Z60th2NLLp
z8$HmQB>H222L|JB$pLd8xR>Spf;kU%Wej$A@H%ecHvAnq_)i|<N!;4O=g{}TS9q0W
zyw57kaqtUPV{Zq4;79DK!QZ?FbsBmi%Lcn?&{IP)a&0()3Cv&?vTZmG**5rF(BN-D
z!#pl$KKg0+o*MRXEQmCABA#9h#e0o8xX(uKG@ip;WYB2$jhErAMtf?!6*D)QxzWsx
zcXJ;P@Dg9*yJ>6;B298`8jH7^yxlY#*)^Sx8ck|6snK*X@@%@DyYOa{H=Eo;)5AQ=
z8?59V<k+-|Pxu@)o9w8m1bc7V&q10vf|(CRXh|E|(jM6!8pvSeduSN)Jv5Th*!7`I
z#v`LcvN<G!Loe_ZRYBx%G$|Bv1^Pa`m?wCOXIRP#-sU|%K>vsJfA~9o;#byD#74^4
z6hw~b`$%u}c4QRkWT2-blgVQm1<d3s)IGA6^;94azts^rB8TR7c(1uHX7#%qk!Eu?
zXOhh%+<$XEcGY|V^KehiS8^RUa3eQ!KTBAF`I^nwY`$jmHGj$%e9eC_YqP$ZH?bM{
zHE(4*wd}(Fn)h*l2JG-?0;4${HIKf?x6}lYWA=G$5V_dFu@jliDY&s?mvAZiKjwyy
z$>-QLEaWcS+A%vj_Arm~I8X91f3k%g)S<UyvOIQ(W{wAu<00<qcnarn2QoP>ljF--
z$%m}Qd&i40^KtVYH}CPi9Hf!MGzVeOj&AfKiT(^>C@G|pO#ySckW09X`CQF)+`x_8
z!fiax5}xK+p64Z&@*1zRoE5yqkL(D-NPE<boXkzUz~_|G6og@fmb4+7IC`M}un&DP
zLpYF8jAa}Xm`onin8B4iz*D@)E9fnJgSUB)4_L(~Yze{^@uVY@7BXpZF6VPO|G;}K
z9>&Zq%-h1eEtc^=tmGZM+v00}VLg9ROgR<&Ri~Qzz^HVkJ7#QYM=j0QauCT3M_w(>
z+EQOFGdPjioWdMV=PdNvQm-xTu;s;EioRRgW6S$_lb_iggstN6R;#nI(^lqbC5Kk}
zZuK9&;|JDJg5FzIQpGlEILKj+24QP+v~EQdZmzXGw;sVv&O~3WFJc~gYJDw#N2aZB
z=2l)n-PTP(*d{^;`Z9nN#^Jp-CvgrJV9qv|awXSrJvZ<#7Gv*iUg0(Dy^TG!d5d@X
z0`s<6%^JREEi!8JD`t%fad%M@I0IQlc{|G6QSLwL8Qgx98h)cAj8Y?NIUga%DDy;l
zGs>G$zah`4P3&YZZXl|GBOD9DXmdxmz<#3DjULTd%pR?W=p1s%XF7$rhiLZ@E!$|>
zM$hLe<Pj~8=mp$}oTC?VJ9i?RXc<Ir4#Ku-wjGRo+uBXrM|lT*w{^d5iz%fX`)|94
z{T!f?LztnR{kLmRES>2_4|<b?-rLQ^zS`M;JNs{^uXg%sC)alO@&FI>2=C&1iE&dg
z@$^L|F*1pfMT~x9yccsJ=JgvLVT@U0Zs898$vxc1Q`k|A{lu)qd@&!eicj%(DCQ^3
z8ncVN*iVf8#F#Ipnd3p&-c7W3>+Q|jUSI8#=+8i8*gl!zq%x8;#*l$Mwm%I!Y5y#0
zwyzAr4y_rAopx}~9qwik?ySQTEa4^IWCd>_n-1?|h7RBG9c!_(4(_bOA8cSFX6Ts6
zAck=Qdh4jKj+u;S0)?D`OgqZ7<0V{%Y&*K8j{5F+6Y}jS%Z^1f24QSKdt?zSi&*o=
zdN<a4u_tmi=W`M6G<H62H1=A&8+#Y_9s4@VS&99`nlJW4KISvN#H_L3@;#f_Och(%
zPA&EqYk#qBH1+_0^>~OQLD;DqV>t_V*Xb3!)oEuC#<eAxeDobRn^QRrnZ(H=PVaGg
zkJEdc-s9X{oc`nP#qGvD%ws&s)7W#|DoW5_TpfGRTb#b)4s#T@)wu(m@V#_)Po0Ng
zU!Co%b2@IQ^LVn!L8hG_#~pQE!+PY<xrTil3&MEs#mCbZ@5GN}G%|=EhrP#pD}E*?
zVdi)<$D29+OzbZHT+AA8u6TQi{{=H7w8Ps8-cE2^39?HVjv5JSB&d<#4ie;<a58f^
z18*jrhyMNEN0@L6ckoZ{;XxL$81p48Mco8@Pq3?mAJId?@B9~cn6QyDD%gT-6J(pv
zj2yZIw4gOn*malobVNp7WYa|kU9LsVE~_XH!mbgLn25f+Ud*Lj!Ik(Xy57#6=)ddT
zxP`9wvxMh(kym(~<+$&zZ}StoITD23^w&*)-SpQ@uH8BiOB{XCUpF_<%?)&O1KqO8
zV;Tkg4g2eM6D#<cKaoYZgER$UqFEBX>o-5b!~xh-;u!2GF^fs$l8<*2-9VymHqo1j
zw_?sjx1MOm#QS)VMc7l~6Fi04674GSJ^syye9UKj!B?!tE)&0_DhRuW3_{KB^Kob0
zKSKZA4+LS4PIRXicG06B!*F9g#-jfo`tKo=9y!=!4|m+-R8Hp{=5itS*F*0;mhnEH
z@HzVGp|2imkzJ49SkE6p*wapW4o1E`&)^bd(o-fqWzkc=J-yfSP0ZW#Q_R})Yu4}s
zKk*A?Y+@&Ssiy%q(DPUj_Ohd1?x0s3eK2D$Gxi$C1kBgVj(X)YokC7zHuJa~8TPu0
zYq*{T+{n!=#2$Oy$&2W-*XAJXt!8gC_Lg1mYk3rV>@ADl_RzbSQp(xJ9`<vPCiLI?
zXb|@CUG?dR{`(|gZ+&`^guV62;{vWmUw!1*M~;2;)aM?2H+>%B5!_WDS@x+5!ld?e
zp+95DWHKk>y`+n|j(=dzq=nqYzwkXKc{k~4p2MD!-r`-{Xwt{1lk^4dAn8}knq)so
z_LJ1WA(}ZJgndI=5k)(EQ+@T-cMwAu%5YK{g&p?Qb6-989nS>L#O!@vK+V2YLD(;v
z6biY5`;bAuC-80cdxoW~;BDUH16J_~-|-Xr@3)R3Hsa>`xw-ystAB5Xp|AewWT2=1
zld+rr(<s0l^uG#q`>$m^73{~(`@7Wv?eN}!zMMcB<{XeoHj|h_KBsa4ZghYf9dISr
zaRWDEX9MhLz!L0cfZYtRn*kqTwgI0brva;3!w;BsfLRA@rG{GE%7ESM;{c5u;s|;k
z7!cA2Jr2~<KsPe*O}sVGe1keM0vQaN!x@~-x#)k;HC)dEZsJyM;|?C?F`mS|4YJ=s
zFY_wP(ElL)4*IK(-Uc1!Xb=w8)8JM_;Tsy9NKcZ{%V60K9z!NM<RaI>)3L9?^HFo~
z_xw&dd#R^62!}-Dy&>iv;x>nPXGj(knM@wj@YayiIg4|ci;RX`gxQB&hFOQ0Ylv@V
zNHKCw?t-_Iy`4Og(TqinWHpl2NOlX!vyfx*`FJzgo5}7WS^vqhOumN)S;S(N@C?uM
zB5osD-Q?d`&!6Zaxs*+8rkd@zhvZ#BI8?SnWjnMDav0i<4%qY1&Lq%{?#O7UY=+8U
z=&h(ZbT#g4SPa9Mfxd^igJJGqm^&DDBX{xuZeZA>JdXZ{J<YSc!AjoYeO6(XVPEhS
zWgHK};pz<6+wge0qNm}#=}Uh`k&aA<+yC%F{2d%Vn=?3@^SA&R57*Cd?+>qJ2Ms}(
zB8L=pQp}#x5AUU9;0{vEmok%+IF-{l6Yr*6fmu_$nPSEiGp3j^#g0;*=Ovc14Bu4B
z3clt)tl@js@-udrvX1{!L@^~a2H^=^7>AlC+`;Soi2hT3BdG&9fswei)G<uN4W|~M
z|5TZz&f;Xukt&Z=drQ5XE4hvvFi+~uJjJKzF;#!5`b%BU2K1F$h8s)W#a@mE;fR*B
zp)KvPvk_hCPA~ePrxD&C@f@%59^azQh~Fv4dn4+DaAZI$%s8?gvBZ&pcSjB)4R4M#
z=g7Zd#*wFR8fS72bGeX9xP{x0<H)=C7x(f25Az6*@dS1`^52+yWJ3^+>P8l_8|B*^
zWv`?3KFW7Csuo#{()+0W90|g-mdGQ`eWkgtG~Zd88Pa5t)(?A28$t>rFiToGr(+js
z`b)c?htOA=zS7)Qn%hcqTWL#qjbAt(grk#4#{Nf7r;t<8?`ZFhw%gHnW7g4T9sMXz
z@-+4_`UO_<319LJ<{Q11pK$}D*HMXC(?jeh-G0*TC*6GMov`<G`$@O=bhD=GD?ObI
z#v#M>Y$h><eC#mY4%26HBJ+8WcTh9^U=WV!fx8}aE(>{<S9zV~tl$H_;A>X12DdfF
z3}cEYWfOKbW*a-GV|Nga)%(~J7|&$#(AQXfjh)S@*v;6pI0rW{_6;_&g*`!-A(IT5
zWXK{zzZu@k7>RlPCP<iJ){N==jaj(Wj5%D)b^L>yF<-`A+|7O1S%%$bm^H(!8TOPR
zn~e7{bB0}I_`8y^h9813vnR=@pQ(Q4Xfly~rVKM>pXnRPT*Py{$Sb&~OfzMwktxT_
zAK5?&<=A~@6|&3Rf$t*o5X~G5!f_E=(wZpxVaMan=U((b&b#BhJMK5u^C#XP=lyZs
zA1BN4E$~f@pTK1Du#55TWBf^+jD3us$3o;YUOwZW$G0(lDa&{hcQO8L)E)m7tNE7i
zS&Q2q|0}<9APBSEL6&bZOFmf(coI4LU5_y9OTIzYS^m8&y=TcMYa?ZB!VFoykF34a
zBcm)CWgQ8^3B4J{DAMswOc;+DCzx@987H{63Fe%j_5}S;(BlL-O{ic$2a$DlJG__O
z7kkdubM_cA$tH(fyqoRL{4PkC{UY+newTmq5$4MN5_4snE89%jJ825SiEU_0dt&KK
z7ZT~oFw~wn0y9lC)5NiiBMW^@Jd4|Tg*8+MVUGRgB$3Q;QgNp_{=FPM=jb_SD$^-I
z9yw=n4s*GXOSqH=c^Z4qvG<&1$SueBk@G$u@-d%M6@-%#kkh1z6mlLHa0NHwy-ACB
zj+c2AcROhXZy~!$-kl_`N$zOUFBIVhCb@x06>Pzrljq=#$$FZsr^)Z3m&tB%@^|<K
zCa*{4lZz>(oNer(DF|~T$Ue6hN%UtBvdbMt26D@lcdnUoeG9oyp<b?@bKgeYTz@BW
zS0RU7^>e>w9e=Qa64cJEL{7PS$lbxtAe_>QP7FYeDfTgCF4u7f_wx{suo$(cs5wQ=
zDQZsngx}fAp&-m_joZqL!hPj+r8{QKOTvtK0~t#Wx#Z&>@(OUzd1r7bH?V+za1-~S
zpFI8K=_l_op1}R(y^3Ar=`YW$dA009UwOXOyar^RACF%0^^&ibe7)q$IN#j)r*S4{
za}IO4kf-r>{whA@bJpNK^5vZW2WsZaGk-sFm>SZ9evD@p=W;$5F^|ic&&}M8+ng%n
zsgLs{OHp^~8~hJ%@eUvJ8DH=fKl5MQ>eP+6)u~n3^Hh7DTF34n^t&SAG~eE|Ygot~
z+=bfH?&AT}p7tECq3*PIG50hxPg{#x(|*O=)66|h&1t@iX`6#^dT)j?f;7fp_UZms
zOrJz9YEECl2k3wL*LZijZ)Lh~W%?ExIn2?(f99kG?rKIfF_>dU90?3%IH`<8-5Ki6
z$RrClJ!3L?n0>}<F2me2%sIn1G-C}V_^xNzT|p=Mlg<Ke<uRT?E(P{b;NL5dO@SE-
zzQYU!vMKltvlNuF3Aq$_w_rOvg0L{87ryPnE4UUl3UB02?4j^M7O@!nD0~^aD0Bmb
zY8R?oXeWhku~7X&85XW)XAsUz#H=&TI`b6H!rje0pNmj)=2fUW^Y5rVb0NO1S#EBY
zTc5Rz_xTXFHtRFK<Qu+a9d<vfh>f_nS!SJ8$(A6T-3B|EJ%>BEANkFGGWdW0YZ?CE
RKhyU7-#`EV|A(_*`(NTx!XN+u

literal 146612
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
T=)ZrS^!k7Q{Qv)l%f|l)jWmVv

diff --git a/SmartSpend/Account/Views/AccountView.swift b/SmartSpend/Account/Views/AccountView.swift
index ab2e18a..3ec8e6c 100644
--- a/SmartSpend/Account/Views/AccountView.swift
+++ b/SmartSpend/Account/Views/AccountView.swift
@@ -6,13 +6,142 @@
 //
 
 import SwiftUI
+    
 
-struct AccountView: View {
+struct AccountView: View {    
+    @EnvironmentObject var authVM: AuthenticationViewModel
+    @EnvironmentObject var userVM: UserViewModel
+    @State private var selectedCurrency: User.Currency = .MKD
+
+    
+    
     var body: some View {
-        Text(/*@START_MENU_TOKEN@*/"Hello, World!"/*@END_MENU_TOKEN@*/)
+        
+        NavigationStack {
+            
+            VStack{
+                
+                HStack{
+                    
+                    AsyncImage(url: URL(string: userVM.currentUser?.avatar_url ?? "")) { phase in
+                        switch phase {
+                        case .failure:
+                            Image(systemName: "person")
+                                .resizable()
+                                .scaledToFit()
+                        case .success(let image):
+                            image
+                                .resizable()
+                        default:
+                            ProgressView()
+                        }
+                    }
+                    .frame(width: 56, height: 56)
+                    .clipShape(.circle)
+                    
+                    Text("\(userVM.currentUser?.first_name ?? "firstName") \(userVM.currentUser?.last_name ?? "lastName")")
+                        .font(.headline)
+                        .padding()
+                    
+                    
+                    Spacer()
+                    
+                    NavigationLink {
+                        EditAccountView()
+                            .environmentObject(userVM)
+                    } label: {
+                        
+                        Image(systemName: "pencil")
+                            .font(.title)
+                            .foregroundStyle(.gray)
+                        
+                    }
+                    
+                    
+                }
+                .padding()
+                .frame(maxWidth: .infinity, alignment: .leading)
+                
+                
+                
+                
+                HStack{
+                    
+                    Image(systemName: "dollarsign.bank.building")
+                        .font(.title)
+                        .foregroundStyle(Color.MainColor)
+                    
+                    Text("Currency")
+                        .font(.headline)
+                        .foregroundStyle(Color.MainColor)
+                    
+                    Spacer()
+                    
+                    Picker("Currency", selection: $selectedCurrency) {
+                        ForEach(User.Currency.allCases) { currency in
+                            Text(currency.rawValue)
+                        }
+                    }
+                    .pickerStyle(.menu)
+                    .onChange(of: selectedCurrency) { oldValue, newValue in
+                        Task {
+                            let request = UpdateUserRequest(preferred_currency: newValue)
+                            await userVM.updateProfile(request)
+                        }
+                    }
+                }
+                .padding()
+                .frame(maxWidth: .infinity, alignment: .leading)
+                .tint(Color.MainColor)
+                .padding(.top)
+                
+                
+                
+                
+                Spacer()
+                
+                Button(action: {
+                    authVM.signOut()
+                }) {
+                    HStack {
+                        
+                        Text("Log Out")
+                            .foregroundStyle(.white)
+                    }
+                    .frame(maxWidth: .infinity, minHeight: 60)
+                    .background(Color.LogOutColor)
+                    .cornerRadius(12)
+                    .shadow(radius: 2)
+                }
+                .padding()
+                
+                
+                
+                
+                
+                
+            }
+            .toolbar() {
+                ToolbarItem(placement: .principal) {
+                    Text("Profile")
+                }
+            }
+            .task {
+                   if let currency = userVM.currentUser?.preferred_currency {
+                       selectedCurrency = currency
+                   }
+               }
+            
+            
+            
+            
+            
+        }
     }
 }
 
 #Preview {
     AccountView()
+        .environmentObject(AuthenticationViewModel())
+        .environmentObject(UserViewModel())
 }
diff --git a/SmartSpend/Account/Views/EditAccountView.swift b/SmartSpend/Account/Views/EditAccountView.swift
new file mode 100644
index 0000000..a0849f5
--- /dev/null
+++ b/SmartSpend/Account/Views/EditAccountView.swift
@@ -0,0 +1,127 @@
+import SwiftUI
+import PhotosUI
+
+struct EditAccountView: View {
+    @Environment(\.dismiss) var dismiss
+    @EnvironmentObject var userVM: UserViewModel
+
+    @State private var firstName: String = ""
+    @State private var lastName: String = ""
+    @State private var username: String = ""
+    @State private var avatarURL: String = ""
+
+    // Photo picker
+    @State private var selectedItem: PhotosPickerItem? = nil
+    @State private var selectedImage: UIImage? = nil
+
+    var body: some View {
+        Form {
+            Section("Avatar") {
+                VStack {
+                    if let image = selectedImage {
+                        Image(uiImage: image)
+                            .resizable()
+                            .scaledToFill()
+                            .frame(width: 100, height: 100)
+                            .clipShape(Circle())
+                            .shadow(radius: 3)
+                    } else if let url = URL(string: avatarURL) {
+                        AsyncImage(url: url) { phase in
+                            switch phase {
+                            case .failure:
+                                Image(systemName: "person.circle").font(.largeTitle)
+                            case .success(let image):
+                                image.resizable()
+                            default:
+                                ProgressView()
+                            }
+                        }
+                        .frame(width: 100, height: 100)
+                        .clipShape(Circle())
+                    }
+
+                    PhotosPicker(
+                        selection: $selectedItem,
+                        matching: .images,
+                        photoLibrary: .shared()
+                    ) {
+                        Text("Change Photo")
+                            .foregroundStyle(Color.MainColor)
+                    }
+                    .onChange(of: selectedItem) { oldValue, newValue in
+                        Task {
+                            if let data = try? await newValue?.loadTransferable(type: Data.self),
+                               let uiImage = UIImage(data: data) {
+                                selectedImage = uiImage
+                                // Optionally: convert to base64 string if backend accepts
+                                // avatarURL = "data:image/png;base64,\(data.base64EncodedString())"
+                            }
+                        }
+                    }
+                }
+                .frame(maxWidth: .infinity, alignment: .center)
+            }
+
+            Section("Personal Info") {
+                TextField("First Name", text: $firstName)
+                TextField("Last Name", text: $lastName)
+                TextField("Username", text: $username)
+            }
+
+            Button("Save") {
+                Task {
+                    let request = UpdateUserRequest(
+                        first_name: firstName.isEmpty ? nil : firstName,
+                        last_name: lastName.isEmpty ? nil : lastName,
+                        username: username.isEmpty ? nil : username,
+                        avatar_url: avatarURL.isEmpty ? nil : avatarURL,
+                    )
+                    await userVM.updateProfile(request)
+                    dismiss()
+                }
+            }
+            .frame(maxWidth: .infinity)
+            .padding()
+            .foregroundStyle(.white)
+            .listRowBackground(Color.MainColor)
+        }
+        .navigationTitle("Edit Profile")
+        .onAppear {
+            if let user = userVM.currentUser {
+                firstName = user.first_name
+                lastName = user.last_name
+                username = user.username
+                avatarURL = user.avatar_url ?? ""
+            }
+        }
+    }
+}
+
+
+
+//#Preview {
+//    let vm = UserViewModel()
+//    vm.currentUser = User(
+//        first_name: "Refik",
+//        last_name: "Jaija",
+//        username: "refikj",
+//        google_email: nil,
+//        apple_email: nil,
+//        avatar_url: "https://hws.dev/paul3.jpg",
+//        balance: 120,
+//        monthly_saving_goal: 50,
+//        preferred_currency: .EUR
+//    )
+//
+//    return NavigationStack {
+//        EditAccountView()
+//            .environmentObject(vm)   // ✅ inject the environment object
+//    }
+//}
+
+
+#Preview {
+    EditAccountView()
+        .environmentObject(UserViewModel())
+        
+}
diff --git a/SmartSpend/Add/ViewModels/AddBottomSheetViewModel.swift b/SmartSpend/Add/ViewModels/AddBottomSheetViewModel.swift
index b80baa1..b9e4478 100644
--- a/SmartSpend/Add/ViewModels/AddBottomSheetViewModel.swift
+++ b/SmartSpend/Add/ViewModels/AddBottomSheetViewModel.swift
@@ -12,15 +12,22 @@ import SwiftUICore
 
 @MainActor
 class AddBottomSheetViewModel: ObservableObject {
-    @Published var selected: Int = 1
     
-    @StateObject private var viewModelTransaction = TransactionViewModel()
-    @StateObject private var viewModelUser = UserViewModel()
+    private let transactionVM: TransactionViewModel
+    private let userVM: UserViewModel
+    private var categoryVM: CategoryViewModel
+    
+    init(transactionVM: TransactionViewModel, userVM: UserViewModel, categoryVM: CategoryViewModel) {
+        self.transactionVM = transactionVM
+        self.userVM = userVM
+        self.categoryVM = categoryVM
+    }
     
+    @Published var selected: Int = 1
     
     
     @Published var expenseTitle: String = ""
-    @Published var expenseCategory: Category = .init(id: UUID(), name: "")
+    @Published var expenseCategory: Int64 = 1
     @Published var expensePrice: String = ""
     var expensePriceBool: Double {
         Double(expensePrice) ?? 0.0
@@ -30,7 +37,7 @@ class AddBottomSheetViewModel: ObservableObject {
     
     
     @Published var incomeTitle: String = ""
-    @Published var incomeCategory: Category = .init(id: UUID(), name: "")
+    @Published var incomeCategory: Category = .init(id: 2, name: "")
     @Published var incomePrice: String = ""
     var incomePriceBool: Double {
         Double(expensePrice) ?? 0.0
@@ -40,19 +47,13 @@ class AddBottomSheetViewModel: ObservableObject {
     
     
     func AddExpense() async {
-        guard let user = viewModelUser.currentUser else {
-            print("No user logged in")
-            return
-        }
-        await viewModelTransaction.addTransaction(title: expenseTitle, price: expensePriceBool, dateMade: expenseDate, type: .expense, ownerId: user.id, category: expenseCategory)
+
+        await transactionVM.addTransaction(title: expenseTitle, price: expensePriceBool, date_made: expenseDate, type: .expense, category_id: expenseCategory)
     }
     
     func AddIncome() async {
-        guard let user = viewModelUser.currentUser else {
-            print("No user logged in")
-            return
-        }
-        await viewModelTransaction.addTransaction(title: incomeTitle, price: incomePriceBool, dateMade: incomeDate, type: .income, ownerId: user.id, category: nil)
+
+        await transactionVM.addTransaction(title: incomeTitle, price: incomePriceBool, date_made: incomeDate, type: .income, category_id: nil)
     }
 
  
diff --git a/SmartSpend/Add/Views/AddBottomSheetView.swift b/SmartSpend/Add/Views/AddBottomSheetView.swift
index a82175a..1f72e36 100644
--- a/SmartSpend/Add/Views/AddBottomSheetView.swift
+++ b/SmartSpend/Add/Views/AddBottomSheetView.swift
@@ -5,98 +5,27 @@
 //  Created by Refik Jaija on 17.8.25.
 //
 //
-//import SwiftUI
-//
-//struct AddBottomSheetView: View {
-//    @StateObject private var viewModel = AddBottomSheetViewModel()
-//    
-//    var body: some View {
-//        
-//        VStack{
-//            Picker("Type of add", selection: $viewModel.selected){
-//                Text("Inceome").tag(1)
-//                Text("Expense").tag(2)
-//                
-//            }.pickerStyle(.segmented)
-//                .padding()
-//            
-//            Spacer()
-//            if viewModel.selected == 1{
-//                
-//                Button(action: {
-//                    
-//                }) {
-//                    HStack {
-//                        Text("Add")
-//                            .foregroundStyle(.white)
-//                    }
-//                    .frame(maxWidth: .infinity, minHeight: 60)
-//                    .background(Color.MainColor)
-//                    .cornerRadius(12)
-//                    .shadow(radius: 2)
-//                }
-//                .padding()
-//                
-//            } else if viewModel.selected == 2{
-//                VStack{
-//                    
-//                    
-//                    Button(action: {
-//                        
-//                    }) {
-//                        HStack {
-//                            Image(systemName: "camera")
-//                                .resizable()
-//                                .scaledToFit()
-//                                .frame(width: 40, height: 40)
-//                                .foregroundStyle(.gray)
-//                            
-//                        }
-//                        .frame(maxWidth: .infinity, minHeight: 60)
-//                        .background(Color.white)
-//                        .cornerRadius(12)
-//                        .shadow(radius: 2)
-//                    }
-//                    .padding()
-//                    
-//                    
-//                    Button(action: {
-//                        
-//                    }) {
-//                        HStack {
-//                            Text("Add manually")
-//                                .foregroundStyle(.white)
-//                        }
-//                        .frame(maxWidth: .infinity, minHeight: 60)
-//                        .background(Color.MainColor)
-//                        .cornerRadius(12)
-//                        .shadow(radius: 2)
-//                    }
-//                    .padding()
-//                    
-//                }
-//            }
-//            
-//            Spacer()
-//            
-//        }
-//        
-//        
-//        
-//    }
-//}
-//
-//
-//#Preview {
-//    AddBottomSheetView()
-//}
 
 
 import SwiftUI
 
 struct AddBottomSheetView: View {
-    @StateObject private var viewModel = AddBottomSheetViewModel()
     
+    @EnvironmentObject var transactionVM: TransactionViewModel
+    @EnvironmentObject var userVM: UserViewModel
+    @EnvironmentObject var categoryVM: CategoryViewModel
+    @StateObject private var viewModel: AddBottomSheetViewModel
+
+    init(transactionVM: TransactionViewModel, userVM: UserViewModel, categoryVM: CategoryViewModel) {
+        _viewModel = StateObject(
+            wrappedValue: AddBottomSheetViewModel(
+                transactionVM: transactionVM,
+                userVM: userVM,
+                categoryVM: categoryVM
+            )
+        )
+    }
+
     var body: some View {
         NavigationStack {
             VStack {
@@ -111,7 +40,7 @@ struct AddBottomSheetView: View {
                 
                 if viewModel.selected == 1 {
                     NavigationLink {
-                        AddIncomeView()
+                        AddIncomeView(viewModel: viewModel)
                     } label: {
                         HStack {
                             Text("Add")
@@ -145,7 +74,7 @@ struct AddBottomSheetView: View {
                         
                         
                         NavigationLink {
-                            AddExpenseView()
+                            AddExpenseView(viewModel: viewModel)
                         } label: {
                             HStack {
                                 Text("Add manually")
@@ -168,5 +97,12 @@ struct AddBottomSheetView: View {
 
 
 #Preview {
-    AddBottomSheetView()
+    AddBottomSheetView(
+        transactionVM: TransactionViewModel(),
+        userVM: UserViewModel(),
+        categoryVM: CategoryViewModel()
+    )
+    .environmentObject(TransactionViewModel())
+    .environmentObject(UserViewModel())
+    .environmentObject(CategoryViewModel())
 }
diff --git a/SmartSpend/Add/Views/AddExpenseView.swift b/SmartSpend/Add/Views/AddExpenseView.swift
index 7b247cb..260c6c9 100644
--- a/SmartSpend/Add/Views/AddExpenseView.swift
+++ b/SmartSpend/Add/Views/AddExpenseView.swift
@@ -9,8 +9,11 @@ import SwiftUI
 
 struct AddExpenseView: View {
     
-    @StateObject private var viewModel = AddBottomSheetViewModel()
-    @StateObject private var categoryVM = CategoryViewModel()
+    @EnvironmentObject var transactionVM: TransactionViewModel
+    @EnvironmentObject var userVM: UserViewModel
+    @EnvironmentObject var categoryVM: CategoryViewModel
+    @ObservedObject var viewModel: AddBottomSheetViewModel
+
     
     var body: some View {
         NavigationStack {
@@ -20,7 +23,8 @@ struct AddExpenseView: View {
 
                 Picker("Category", selection: $viewModel.expenseCategory){
                     ForEach(categoryVM.categories2){ category in
-                        Text("\(category.name)")
+                        Text(category.name)
+                            .tag(category.id)
                     }
                 }.foregroundStyle(Color.MainColor)
                 
@@ -85,9 +89,20 @@ struct AddExpenseView: View {
 }
 
 #Preview {
-    AddExpenseView()
-}
+    let transactionVM = TransactionViewModel()
+    let userVM = UserViewModel()
+    let categoryVM = CategoryViewModel()
+    let addVM = AddBottomSheetViewModel(
+        transactionVM: transactionVM,
+        userVM: userVM,
+        categoryVM: categoryVM
+    )
 
+    return AddExpenseView(viewModel: addVM)
+        .environmentObject(transactionVM)
+        .environmentObject(userVM)
+        .environmentObject(categoryVM)
+}
 
 #if canImport(UIKit)
 extension View {
diff --git a/SmartSpend/Add/Views/AddIncomeView.swift b/SmartSpend/Add/Views/AddIncomeView.swift
index 921116e..71117cb 100644
--- a/SmartSpend/Add/Views/AddIncomeView.swift
+++ b/SmartSpend/Add/Views/AddIncomeView.swift
@@ -10,8 +10,11 @@ import SwiftUI
 
 struct AddIncomeView: View {
     
-    @StateObject private var viewModel = AddBottomSheetViewModel()
-    @StateObject private var categoryVM = CategoryViewModel()
+    @EnvironmentObject var transactionVM: TransactionViewModel
+    @EnvironmentObject var userVM: UserViewModel
+    @EnvironmentObject var categoryVM: CategoryViewModel
+    @ObservedObject var viewModel: AddBottomSheetViewModel
+
     
     var body: some View {
         NavigationStack {
@@ -79,8 +82,17 @@ struct AddIncomeView: View {
 
 
 #Preview {
-    AddIncomeView()
-}
-
-
+    let transactionVM = TransactionViewModel()
+    let userVM = UserViewModel()
+    let categoryVM = CategoryViewModel()
+    let addVM = AddBottomSheetViewModel(
+        transactionVM: transactionVM,
+        userVM: userVM,
+        categoryVM: categoryVM
+    )
 
+    return AddIncomeView(viewModel: addVM)
+        .environmentObject(transactionVM)
+        .environmentObject(userVM)
+        .environmentObject(categoryVM)
+}
diff --git a/SmartSpend/Auth/ViewModels/AuthenticationViewModel.swift b/SmartSpend/Auth/ViewModels/AuthenticationViewModel.swift
index 9ea1002..c1aab42 100644
--- a/SmartSpend/Auth/ViewModels/AuthenticationViewModel.swift
+++ b/SmartSpend/Auth/ViewModels/AuthenticationViewModel.swift
@@ -4,22 +4,348 @@
 //
 //  Created by Refik Jaija on 17.8.25.
 //
+
+//import Foundation
+//import SwiftUI
+//import GoogleSignIn
+//
+//@MainActor
+//class AuthenticationViewModel: ObservableObject {
+//    @Published var isSignedIn = false
+//    @Published var isRestoringSession = true
+//    @Published var fullName: String?
+//    @Published var email: String?
+//    @Published var profileImageURL: String?
+//    
+//    
+//    func signIn() {
+//        print("DEBUG: signIn() called")
+//
+//        guard let rootVC = UIApplication.shared.connectedScenes
+//            .compactMap({ $0 as? UIWindowScene })
+//            .first?.windows.first?.rootViewController else { return }
+//
+//        GIDSignIn.sharedInstance.signIn(withPresenting: rootVC) { [weak self] result, error in
+//            if let error = error {
+//                print("Sign in error:", error)
+//                return
+//            }
+//            if let user = result?.user {
+//                self?.setSignedIn(user: user)
+//            }
+//        }
+//    }
+//
+//
+//    private func setSignedIn(user: GIDGoogleUser) {
+//        fullName = user.profile?.name
+//        email = user.profile?.email
+//
+//        // Get ID Token and Access Token
+//        let idToken = user.idToken?.tokenString
+//        let accessToken = user.accessToken.tokenString
+//
+//        print("Got ID Token:", idToken ?? "nil")
+//        print("Got Access Token:", accessToken)
+//
+//        Task {
+//            do {
+//                struct SignInResponse: Decodable {
+//                    let message: String
+//                    let access_token: String
+//                    let refresh_token: String
+//                    let user: User?
+//                    let user_data: User?
+//
+//                }
+//
+//                // send the idToken
+//                let response: SignInResponse = try await APIClient.shared.request(
+//                    endpoint: "api/auth/google",
+//                    method: "POST",
+//                    body: ["id_token": idToken ?? ""]
+//                )
+//                
+//                //  Detailed logging
+//                print("   Backend response received")
+//                print("   Response:", response)
+//                print("   Message:", response.message)
+//                print("   Access Token:", response.access_token)
+//                print("   Refresh Token:", response.refresh_token)
+//
+//                await TokenManager.shared.saveTokens(
+//                    access: response.access_token,
+//                    refresh: response.refresh_token
+//                )
+//                
+//                
+//                DispatchQueue.main.async {
+//                    self.isSignedIn = true
+//                    print("User marked as signed in")
+//                }
+//            } catch {
+//                print("Sign in failed with error:", error)
+//            }
+//        }
+//    }
+//
+//
+//
+//    func signOut() {
+//        Task {
+//            _ = try? await APIClient.shared.request(
+//                endpoint: "api/auth/logout",
+//                method: "POST"
+//            ) as [String: String]
+//
+//            await TokenManager.shared.saveTokens(access: "", refresh: "")
+//            self.isSignedIn = false
+//        }
+//    }
+//}
+//
+
+
+
+
+
 //
+//import Foundation
+//import SwiftUI
+//import GoogleSignIn
+//
+//@MainActor
+//class AuthenticationViewModel: ObservableObject {
+//    @Published var isSignedIn = false
+//    @Published var isRestoringSession = true
+//    @Published var fullName: String?
+//    @Published var email: String?
+//    @Published var profileImageURL: String?
+//    
+//    // TEST MODE - Set to false when backend is available
+//    private let testMode = true
+//    
+//    func restoreSession() async {
+//        isRestoringSession = true
+//        defer { isRestoringSession = false }   // always reset at the end
+//        
+//        if testMode {
+//            // TEST MODE: Simulate session restoration
+//            try? await Task.sleep(nanoseconds: 1_000_000_000) // 1 second delay to simulate network
+//            
+//            // Check if we have stored test credentials
+//            let testRefreshToken = KeychainHelper.standard.read(service: "SmartSpend", account: "refreshToken")
+//            
+//            if let refreshToken = testRefreshToken, !refreshToken.isEmpty {
+//                print("TEST MODE: Found refresh token, restoring session")
+//                self.isSignedIn = true
+//                self.fullName = "Test User"
+//                self.email = "test@example.com"
+//                print("TEST MODE: Session restored successfully")
+//            } else {
+//                print("TEST MODE: No refresh token found, user is logged out")
+//                self.isSignedIn = false
+//            }
+//            return
+//        }
+//        
+//        // PRODUCTION MODE - Uncomment when backend is available
+//        /*
+//        // Load tokens from keychain
+//        await TokenManager.shared.loadTokens()
+//        
+//        // Check if we have a refresh token
+//        guard let refreshToken = await TokenManager.shared.getRefreshToken(), !refreshToken.isEmpty else {
+//            print("No refresh token found, user is logged out")
+//            self.isSignedIn = false
+//            return
+//        }
+//        
+//        do {
+//            // Try to refresh the access token
+//            try await TokenManager.shared.refreshAccessToken()
+//            
+//            // Validate the session by making a test API call
+//            // This ensures the tokens are actually valid and the user session exists
+//            let _: [String: Any] = try await APIClient.shared.request(
+//                endpoint: "api/auth/validate", // or whatever endpoint validates the session
+//                method: "GET"
+//            )
+//            
+//            self.isSignedIn = true
+//            print("Session restored successfully - tokens refreshed and validated")
+//        } catch {
+//            print("Failed to restore session:", error)
+//            // Clear invalid tokens
+//            await TokenManager.shared.clearTokens()
+//            self.isSignedIn = false
+//        }
+//        */
+//    }
+//    
+//    func signIn() {
+//        print("DEBUG: signIn() called")
+//        
+//        if testMode {
+//            // TEST MODE: Simulate sign in
+//            Task {
+//                try? await Task.sleep(nanoseconds: 500_000_000) // 0.5 second delay
+//                
+//                // Save test tokens
+//                KeychainHelper.standard.save("test_access_token_123", service: "SmartSpend", account: "access_token")
+//                KeychainHelper.standard.save("test_refresh_token_456", service: "SmartSpend", account: "refresh_token")
+//                
+//                await MainActor.run {
+//                    self.isSignedIn = true
+//                    self.fullName = "Test User"
+//                    self.email = "test@example.com"
+//                    print("TEST MODE: User signed in successfully")
+//                }
+//            }
+//            return
+//        }
+//        
+//        // PRODUCTION MODE - Uncomment when backend is available
+//        /*
+//        guard let rootVC = UIApplication.shared.connectedScenes
+//            .compactMap({ $0 as? UIWindowScene })
+//            .first?.windows.first?.rootViewController else { return }
+//        
+//        GIDSignIn.sharedInstance.signIn(withPresenting: rootVC) { [weak self] result, error in
+//            if let error = error {
+//                print("Sign in error:", error)
+//                return
+//            }
+//            if let user = result?.user {
+//                self?.setSignedIn(user: user)
+//            }
+//        }
+//        */
+//    }
+//    
+//    private func setSignedIn(user: GIDGoogleUser) {
+//        // PRODUCTION MODE - Uncomment when backend is available
+//        /*
+//        fullName = user.profile?.name
+//        email = user.profile?.email
+//        
+//        // Get ID Token and Access Token
+//        let idToken = user.idToken?.tokenString
+//        let accessToken = user.accessToken.tokenString
+//        
+//        print("Got ID Token:", idToken ?? "nil")
+//        print("Got Access Token:", accessToken)
+//        
+//        Task {
+//            do {
+//                struct SignInResponse: Decodable {
+//                    let message: String
+//                    let access_token: String
+//                    let refresh_token: String
+//                    let user: User?
+//                    let user_data: User?
+//                }
+//                
+//                // send the idToken
+//                let response: SignInResponse = try await APIClient.shared.request(
+//                    endpoint: "api/auth/google",
+//                    method: "POST",
+//                    body: ["id_token": idToken ?? ""]
+//                )
+//                
+//                // Detailed logging
+//                print("Backend response received")
+//                print("Response:", response)
+//                print("Message:", response.message)
+//                print("Access Token:", response.access_token)
+//                print("Refresh Token:", response.refresh_token)
+//                
+//                await TokenManager.shared.saveTokens(
+//                    access: response.access_token,
+//                    refresh: response.refresh_token
+//                )
+//                
+//                DispatchQueue.main.async {
+//                    self.isSignedIn = true
+//                    print("User marked as signed in")
+//                }
+//            } catch {
+//                print("Sign in failed with error:", error)
+//            }
+//        }
+//        */
+//    }
+//    
+//    func signOut() {
+//        Task {
+//            if testMode {
+//                // TEST MODE: Clear test tokens
+//                KeychainHelper.standard.delete(service: "SmartSpend", account: "access_token")
+//                KeychainHelper.standard.delete(service: "SmartSpend", account: "refresh_token")
+//                
+//                await MainActor.run {
+//                    self.isSignedIn = false
+//                    self.fullName = nil
+//                    self.email = nil
+//                    self.profileImageURL = nil
+//                    print("TEST MODE: User signed out successfully")
+//                }
+//                return
+//            }
+//            
+//            // PRODUCTION MODE - Uncomment when backend is available
+//            /*
+//            do {
+//                // Notify backend of logout
+//                let _: [String: String] = try await APIClient.shared.request(
+//                    endpoint: "api/auth/logout",
+//                    method: "POST"
+//                )
+//            } catch {
+//                print("Logout API call failed:", error)
+//                // Continue with local logout even if API call fails
+//            }
+//            
+//            // Clear tokens locally
+//            await TokenManager.shared.clearTokens()
+//            
+//            // Update UI
+//            DispatchQueue.main.async {
+//                self.isSignedIn = false
+//                self.fullName = nil
+//                self.email = nil
+//                self.profileImageURL = nil
+//            }
+//            */
+//        }
+//    }
+//}
+
+
+
+
+
+
+
+
 import Foundation
 import SwiftUI
 import GoogleSignIn
 
 @MainActor
 class AuthenticationViewModel: ObservableObject {
-    @Published var isSignedIn = false
+    @Published var isSignedIn = false {
+        didSet {
+            print("debug22: signed in val: \(isSignedIn)")
+        }
+    }
+    @Published var isRestoringSession = true
     @Published var fullName: String?
     @Published var email: String?
     @Published var profileImageURL: String?
-    @EnvironmentObject var userVM: UserViewModel
-    @EnvironmentObject var categoryVM: CategoryViewModel
     
-
-    func signIn() {
+    // MARK: - Google Sign In
+    func signIn(userVM: UserViewModel) {
         print("DEBUG: signIn() called")
 
         guard let rootVC = UIApplication.shared.connectedScenes
@@ -32,22 +358,18 @@ class AuthenticationViewModel: ObservableObject {
                 return
             }
             if let user = result?.user {
-                self?.setSignedIn(user: user)
+                self?.setSignedIn(user: user, userVM: userVM)
             }
         }
     }
 
-
-    private func setSignedIn(user: GIDGoogleUser) {
+    private func setSignedIn(user: GIDGoogleUser, userVM: UserViewModel) {
         fullName = user.profile?.name
         email = user.profile?.email
+        profileImageURL = user.profile?.imageURL(withDimension: 200)?.absoluteString
 
-        // Get ID Token and Access Token
         let idToken = user.idToken?.tokenString
-        let accessToken = user.accessToken.tokenString
-
         print("Got ID Token:", idToken ?? "nil")
-        print("Got Access Token:", accessToken)
 
         Task {
             do {
@@ -55,50 +377,72 @@ class AuthenticationViewModel: ObservableObject {
                     let message: String
                     let access_token: String
                     let refresh_token: String
+                    let refresh_token_expiry_date: String
+                    let data: User
                 }
 
-                // send the idToken
+                // Call backend with Google ID token
                 let response: SignInResponse = try await APIClient.shared.request(
                     endpoint: "api/auth/google",
                     method: "POST",
                     body: ["id_token": idToken ?? ""]
                 )
-                
-                //  Detailed logging
-                print("   Backend response received")
-                print("   Message:", response.message)
-                print("   Access Token:", response.access_token)
-                print("   Refresh Token:", response.refresh_token)
 
+                print("Backend sign-in response:", response)
+
+                // Parse expiry date
+                let expiryDate = ISO8601DateFormatter().date(from: response.refresh_token_expiry_date) ?? Date().addingTimeInterval(60 * 60 * 24)
+
+                // Save tokens securely
                 await TokenManager.shared.saveTokens(
                     access: response.access_token,
-                    refresh: response.refresh_token
+                    refresh: response.refresh_token,
+                    expiry: expiryDate
                 )
 
-    //            await userVM.fetchUser()
-    //            await categoryVM.fetchCategories()
-                
-                DispatchQueue.main.async {
-                    self.isSignedIn = true
-                    print("User marked as signed in")
-                }
+                // Set user instantly from login response
+                userVM.currentUser = response.data
+
+                self.isSignedIn = true
             } catch {
-                print("Sign in failed with error:", error)
+                print(" Sign in failed:", error)
             }
         }
     }
 
+    // MARK: - Session Restore
+    func restoreSession(userVM: UserViewModel) async {
+        await TokenManager.shared.loadTokens()
+        defer { isRestoringSession = false }
+
+        guard let expiry = await TokenManager.shared.refreshExpiry, expiry > Date() else {
+            await TokenManager.shared.clearTokens()
+            isSignedIn = false
+            return
+        }
 
+        await userVM.fetchUser()
+        do {
+            try await TokenManager.shared.refreshAccessToken()
+             await userVM.fetchUser()
+            isSignedIn = true
+        } catch {
+            print("Failed to restore session:", error)
+            await TokenManager.shared.clearTokens()
+            isSignedIn = false
+        }
+    }
 
+    // MARK: - Sign Out
     func signOut() {
         Task {
             _ = try? await APIClient.shared.request(
-                endpoint: "/auth/logout",
+                endpoint: "api/auth/logout",
                 method: "POST"
             ) as [String: String]
 
-            await TokenManager.shared.saveTokens(access: "", refresh: "")
-            self.isSignedIn = false
+            await TokenManager.shared.clearTokens()
+            isSignedIn = false
         }
     }
 }
diff --git a/SmartSpend/Auth/Views/LoginView.swift b/SmartSpend/Auth/Views/LoginView.swift
index f8fad24..e73a707 100644
--- a/SmartSpend/Auth/Views/LoginView.swift
+++ b/SmartSpend/Auth/Views/LoginView.swift
@@ -10,6 +10,7 @@ import GoogleSignInSwift
 
 struct LoginView: View {
     @EnvironmentObject var authVM: AuthenticationViewModel
+    @EnvironmentObject var userVM: UserViewModel
 
 
     var body: some View {
@@ -31,7 +32,7 @@ struct LoginView: View {
 //                .padding()
   
             Button(action: {
-                authVM.signIn()
+                authVM.signIn(userVM: userVM)
             }) {
                 HStack {
                     Image("googleLogo")
@@ -59,5 +60,6 @@ struct LoginView: View {
 
 #Preview {
     LoginView()
-        .environmentObject(AuthenticationViewModel()) 
+        .environmentObject(AuthenticationViewModel())
+        .environmentObject(UserViewModel()) 
 }
diff --git a/SmartSpend/Categories/Models/Category.swift b/SmartSpend/Categories/Models/Category.swift
index 665a990..da8bf14 100644
--- a/SmartSpend/Categories/Models/Category.swift
+++ b/SmartSpend/Categories/Models/Category.swift
@@ -8,11 +8,7 @@
 import Foundation
 
 struct Category: Identifiable, Codable, Hashable {
-    let id: UUID
+    let id: Int64
     let name: String
 
-//    enum CodingKeys: String, CodingKey {
-//        case id = "Id"
-//        case name = "Name"
-//    }
 }
diff --git a/SmartSpend/Categories/ViewModels/CategoryViewModel.swift b/SmartSpend/Categories/ViewModels/CategoryViewModel.swift
index 79eeb13..4a604d9 100644
--- a/SmartSpend/Categories/ViewModels/CategoryViewModel.swift
+++ b/SmartSpend/Categories/ViewModels/CategoryViewModel.swift
@@ -12,24 +12,24 @@ class CategoryViewModel: ObservableObject {
     @Published var categories: [Category] = []
     
     @Published var categories2: [Category] = [
-        Category(id: UUID(), name: "Groceries"),
-        Category(id: UUID(), name: "Rent"),
-        Category(id: UUID(), name: "Subscription"),
-        Category(id: UUID(), name: "Transportation"),
-        Category(id: UUID(), name: "Entertainment"),
-        Category(id: UUID(), name: "Utilities"),
-        Category(id: UUID(), name: "Healthcare"),
-        Category(id: UUID(), name: "Education"),
-        Category(id: UUID(), name: "Dining Out"),
-        Category(id: UUID(), name: "Clothing"),
-        Category(id: UUID(), name: "Investments"),
-        Category(id: UUID(), name: "Gifts"),
-        Category(id: UUID(), name: "Other")
+        Category(id: 1, name: "Groceries"),
+        Category(id: 2, name: "Rent"),
+        Category(id: 3, name: "Subscription"),
+        Category(id: 4, name: "Transportation"),
+        Category(id: 5, name: "Entertainment"),
+        Category(id: 6, name: "Utilities"),
+        Category(id: 7, name: "Healthcare"),
+        Category(id: 8, name: "Education"),
+        Category(id: 9, name: "Dining Out"),
+        Category(id: 10, name: "Clothing"),
+        Category(id: 11, name: "Investments"),
+        Category(id: 12, name: "Gifts"),
+        Category(id: 13, name: "Other")
     ]
 
     func fetchCategories() async {
         do {
-            self.categories = try await APIClient.shared.request(endpoint: "/category")
+            self.categories = try await APIClient.shared.request(endpoint: "api/category")
         } catch {
             print("Failed to fetch categories:", error)
         }
diff --git a/SmartSpend/ContentView.swift b/SmartSpend/ContentView.swift
index 903e79f..740eec6 100644
--- a/SmartSpend/ContentView.swift
+++ b/SmartSpend/ContentView.swift
@@ -4,6 +4,9 @@ enum TabKey: Hashable { case home, add, account }
 
 struct ContentView: View {
     @EnvironmentObject var authVM: AuthenticationViewModel
+    @EnvironmentObject var userVM: UserViewModel
+    @EnvironmentObject var categoryVM: CategoryViewModel
+    @EnvironmentObject var transactionVM: TransactionViewModel
     
     @State private var selection: TabKey = .home
     @State private var lastNonAddSelection: TabKey = .home
@@ -11,60 +14,78 @@ struct ContentView: View {
     
     
     var body: some View {
-        
-        
         Group {
             if authVM.isSignedIn {
-                
-                TabView(selection: $selection) {
-                    HomeView()
-                        .tabItem {
-                            Label("Home", systemImage: "house")
-                        }
-                        .tag(TabKey.home)
-                    
-                    Text("") // Placeholder for Add button
-                        .tabItem {
-                            Label("Add", systemImage: "plus.circle")
-                        }
-                        .tag(TabKey.add)
-                    
-                    AccountView()
-                        .tabItem {
-                            Label("Account", systemImage: "person.crop.circle")
-                        }
-                        .tag(TabKey.account)
-                }
-                .tint(Color.MainColor)
-                .onChange(of: selection) {
-                    if selection == .add  {
-                        showAddSheet = true
-                        selection = lastNonAddSelection
-                    } else {
-                        lastNonAddSelection = selection
-                    }
-                }
-                .sheet(isPresented: $showAddSheet) {
-                    AddBottomSheetView()
-                        .presentationDetents([.medium, .large])
-                }
+                mainTabView
             } else {
-                
                 LoginView()
             }
             
-          }
-        
         }
-    
-    
+        .onChange(of: authVM.isSignedIn) { oldValue, newValue in
+            if newValue {
+                Task {
+                    await userVM.fetchUser()
+                    print("The current user: \(String(describing: userVM.currentUser))")
+                   // await categoryVM.fetchCategories()
+                }
+            } else {
+                // Clear cached user on sign out
+                userVM.currentUser = nil
+            }
+
+        }
+
     }
     
     
-    struct ContentView_Previews: PreviewProvider {
-        static var previews: some View {
-            ContentView()
-                .environmentObject(AuthenticationViewModel()) // inject for previews
+    
+    private var mainTabView: some View {
+        TabView(selection: $selection) {
+            HomeView()
+                .tabItem {
+                    Label("Home", systemImage: "house")
+                }
+                .tag(TabKey.home)
+            
+            Text("") // Placeholder for Add button
+                .tabItem {
+                    Label("Add", systemImage: "plus.circle")
+                }
+                .tag(TabKey.add)
+            
+            AccountView()
+                .tabItem {
+                    Label("Account", systemImage: "person.crop.circle")
+                }
+                .tag(TabKey.account)
+        }
+        .tint(Color.MainColor)
+        .onChange(of: selection) {
+            if selection == .add {
+                showAddSheet = true
+                selection = lastNonAddSelection
+            } else {
+                lastNonAddSelection = selection
+            }
+        }
+        .sheet(isPresented: $showAddSheet) {
+            AddBottomSheetView(transactionVM: transactionVM, userVM: userVM, categoryVM: categoryVM)
+                .environmentObject(transactionVM)
+                .environmentObject(userVM)
+                .environmentObject(categoryVM)
+                .presentationDetents([.medium, .large])
         }
     }
 
+}
+
+struct ContentView_Previews: PreviewProvider {
+    static var previews: some View {
+        ContentView()
+            .environmentObject(UserViewModel())
+            .environmentObject(CategoryViewModel())
+            .environmentObject(TransactionViewModel())
+            .environmentObject(AuthenticationViewModel())
+    }
+}
diff --git a/SmartSpend/Home/ViewModels/HomeViewModel.swift b/SmartSpend/Home/ViewModels/HomeViewModel.swift
index ced2ff9..c7ee589 100644
--- a/SmartSpend/Home/ViewModels/HomeViewModel.swift
+++ b/SmartSpend/Home/ViewModels/HomeViewModel.swift
@@ -10,8 +10,6 @@ import Foundation
 
 @MainActor
 class HomeViewModel: ObservableObject {
-    @Published var currency: String = "MKD"
-    @Published var balance: Double = 20000
     @Published var show: Bool = true
     
     func toggleVisibility() {
diff --git a/SmartSpend/Home/Views/HomeView.swift b/SmartSpend/Home/Views/HomeView.swift
index d381838..4bce68c 100644
--- a/SmartSpend/Home/Views/HomeView.swift
+++ b/SmartSpend/Home/Views/HomeView.swift
@@ -9,7 +9,8 @@ import SwiftUI
 
 struct HomeView: View {
     @StateObject private var viewModel = HomeViewModel()
-    @StateObject private var viewModelUser = UserViewModel()
+    @EnvironmentObject var userVM: UserViewModel
+    
 
     var body: some View {
         
@@ -20,18 +21,26 @@ struct HomeView: View {
                     .frame(maxWidth: 370, alignment: .leading)
                     .foregroundStyle(.gray)                
                 HStack{
+                    
                     if viewModel.show {
-//                        Text("\(viewModelUser.currentUser?.balance.formatted(.currency(code: viewModelUser.currentUser?.preferredCurrency ?? "USD")) ?? "****")")
-                        Text("\(viewModel.balance.formatted(.currency(code: viewModel.currency)))")
-                            .font(.system(size: 35))
-                            .frame(maxWidth: 370, alignment: .leading)
-                            .foregroundStyle(Color.MainColor)
-                    } else{
-                        Text("**** \(viewModel.currency)")
+                        Text(
+                            userVM.currentUser?.balance.formatted(
+                                .currency(code: userVM.currentUser?.preferred_currency.rawValue ?? User.Currency.MKD.rawValue)
+                            ) ?? "****"
+                        )
+                        .font(.system(size: 35))
+                        .frame(maxWidth: 370, alignment: .leading)
+                        .foregroundStyle(Color.MainColor)
+
+                    } else {
+                        Text("**** \(userVM.currentUser?.preferred_currency.rawValue ?? User.Currency.MKD.rawValue)")
                             .font(.system(size: 35))
                             .frame(maxWidth: 370, alignment: .leading)
                             .foregroundStyle(Color.MainColor)
                     }
+
+
+
                     
                     
                     Button {
@@ -68,6 +77,8 @@ struct HomeView: View {
 
 #Preview {
     HomeView()
+        .environmentObject(UserViewModel())
+        .environmentObject(TransactionViewModel())
 }
 
 
diff --git a/SmartSpend/Network/APIClient.swift b/SmartSpend/Network/APIClient.swift
index 62393e9..895b628 100644
--- a/SmartSpend/Network/APIClient.swift
+++ b/SmartSpend/Network/APIClient.swift
@@ -3,7 +3,172 @@
 //  SmartSpend
 //
 //  Created by Refik Jaija on 20.8.25.
+
+//
+//import Foundation
+//
+//class APIClient {
+//    static let shared = APIClient()
+//    private init() {}
+//
+//    private let baseURL = URL(string: "https://7c91f8c7b921.ngrok-free.app/")!
+//
+//    func request<T: Decodable>(
+//        endpoint: String,
+//        method: String = "GET",
+//        headers: [String: String]? = nil,
+//        body: Encodable? = nil
+//    ) async throws -> T {
+//
+//        guard let url = URL(string: endpoint, relativeTo: baseURL) else {
+//            throw URLError(.badURL)
+//        }
+//
+//        var urlRequest = URLRequest(url: url)
+//        urlRequest.httpMethod = method
+//        urlRequest.setValue("application/json", forHTTPHeaderField: "Content-Type")
+//
+//        // Inject Bearer token
+//        if let token = await TokenManager.shared.accessToken  {
+//            if headers?["Authorization"] == nil {
+//                urlRequest.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
+//            }
+//        }
+//        
+//        // Apply any explicit headers from caller (they override defaults above)
+//        if let headers = headers {
+//            for (k, v) in headers {
+//                urlRequest.setValue(v, forHTTPHeaderField: k)
+//            }
+//        }
+//
+//        // Encode body if present
+//        if let body = body {
+//            urlRequest.httpBody = try JSONEncoder().encode(body)
+//        }
+//
+//        let (data, response) = try await URLSession.shared.data(for: urlRequest)
+//
+//        guard let httpResponse = response as? HTTPURLResponse else {
+//            throw URLError(.badServerResponse)
+//        }
+//        
+////        if httpResponse.statusCode == 401 {
+////            if allowRefreshOn401 {
+////                // Attempt to refresh once, then retry the request but do NOT allow further refresh attempts
+////                try await TokenManager.shared.refreshAccessToken()
+////                return try await request(endpoint: endpoint, method: method, headers: headers, body: body, allowRefreshOn401: false)
+////            } else {
+////                // Do not attempt to refresh again (prevents recursion). Surface an auth error.
+////                throw URLError(.userAuthenticationRequired)
+////            }
+////        }
+////        1. do api call
+////        1. use access token
+////        if ok
+////            continue
+////        else
+////            use refresh token to get new access
+////                if ok
+////                    save new access -> continei
+////                else
+////                    force logout screen
+//                    
+//
+//        guard (200...299).contains(httpResponse.statusCode) else {
+//            throw NSError(domain: "", code: httpResponse.statusCode, userInfo: nil)
+//        }
+//
+////        return try JSONDecoder().decode(T.self, from: data)
+//        
+//        do {
+//            return try JSONDecoder().decode(T.self, from: data)
+//        } catch {
+//            let bodyStr = String(data: data, encoding: .utf8) ?? "<non-utf8 response>"
+//            print(" Decoding error: \(error)\nRaw response body:\n\(bodyStr)")
+//            throw error
+//        }
+//    }
+//}
+
+
+
+
+//--------------------------------------------------------------------------------------------------//
+
+//  APIClient.swift
+//  SmartSpend
 //
+//  Created by Refik Jaija on 20.8.25.
+
+//
+//import Foundation
+//
+//class APIClient {
+//    static let shared = APIClient()
+//    private init() {}
+//
+//    private let baseURL = URL(string: "https://96aed091191d.ngrok-free.app/")!
+//
+//    func request<T: Decodable>(
+//        endpoint: String,
+//        method: String = "GET",
+//        body: Encodable? = nil
+//    ) async throws -> T {
+//
+//        guard let url = URL(string: endpoint, relativeTo: baseURL) else {
+//            throw URLError(.badURL)
+//        }
+//
+//        var urlRequest = URLRequest(url: url)
+//        urlRequest.httpMethod = method
+//        urlRequest.setValue("application/json", forHTTPHeaderField: "Content-Type")
+//
+//        // Inject Bearer token
+//        if let token = await TokenManager.shared.accessToken  {
+//            urlRequest.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
+//        }
+//
+//        // Encode body if present
+//        if let body = body {
+//            urlRequest.httpBody = try JSONEncoder().encode(body)
+//        }
+//
+//        let (data, response) = try await URLSession.shared.data(for: urlRequest)
+//
+//        guard let httpResponse = response as? HTTPURLResponse else {
+//            throw URLError(.badServerResponse)
+//        }
+//
+//        // Handle 401 (expired access token → refresh flow)
+//        if httpResponse.statusCode == 401 {
+//            try await TokenManager.shared.refreshAccessToken()
+//            return try await request(endpoint: endpoint, method: method, body: body)
+//        }
+//        
+////        1. do api call
+////        1. use access token
+////        if ok
+////            continue
+////        else
+////            use refresh token to get new access
+////                if ok
+////                    save new access -> continei
+////                else
+////                    force logout screen
+//                    
+//
+//        guard (200...299).contains(httpResponse.statusCode) else {
+//            throw NSError(domain: "", code: httpResponse.statusCode, userInfo: nil)
+//        }
+//
+//        return try JSONDecoder().decode(T.self, from: data)
+//    }
+//}
+//
+//
+
+
 
 import Foundation
 
@@ -11,14 +176,30 @@ class APIClient {
     static let shared = APIClient()
     private init() {}
 
-    private let baseURL = URL(string: "https://96aed091191d.ngrok-free.app/")!
+    private let baseURL = URL(string: "https://7a989c7506f1.ngrok-free.app/")!
 
+    // Generic request that retries once on 401
     func request<T: Decodable>(
         endpoint: String,
         method: String = "GET",
         body: Encodable? = nil
     ) async throws -> T {
 
+        do {
+            return try await performRequest(endpoint: endpoint, method: method, body: body, allowRetry: true)
+        } catch {
+            throw error
+        }
+    }
+
+    // Lower-level request
+    private func performRequest<T: Decodable>(
+        endpoint: String,
+        method: String,
+        body: Encodable?,
+        allowRetry: Bool
+    ) async throws -> T {
+
         guard let url = URL(string: endpoint, relativeTo: baseURL) else {
             throw URLError(.badURL)
         }
@@ -27,12 +208,11 @@ class APIClient {
         urlRequest.httpMethod = method
         urlRequest.setValue("application/json", forHTTPHeaderField: "Content-Type")
 
-        // Inject Bearer token
-        if let token = await TokenManager.shared.accessToken  {
+        // Add current access token
+        if let token = await TokenManager.shared.accessToken {
             urlRequest.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
         }
 
-        // Encode body if present
         if let body = body {
             urlRequest.httpBody = try JSONEncoder().encode(body)
         }
@@ -43,23 +223,12 @@ class APIClient {
             throw URLError(.badServerResponse)
         }
 
-        // Handle 401 (expired access token → refresh flow)
-        if httpResponse.statusCode == 401 {
+        if httpResponse.statusCode == 401, allowRetry {
+            // refresh token
             try await TokenManager.shared.refreshAccessToken()
-            return try await request(endpoint: endpoint, method: method, body: body)
+            // retry once with new token
+            return try await performRequest(endpoint: endpoint, method: method, body: body, allowRetry: false)
         }
-        
-//        1. do api call
-//        1. use access token
-//        if ok
-//            continue
-//        else
-//            use refresh token to get new access
-//                if ok
-//                    save new access -> continei
-//                else
-//                    force logout screen
-                    
 
         guard (200...299).contains(httpResponse.statusCode) else {
             throw NSError(domain: "", code: httpResponse.statusCode, userInfo: nil)
@@ -67,5 +236,37 @@ class APIClient {
 
         return try JSONDecoder().decode(T.self, from: data)
     }
-}
 
+    // Raw request for refresh calls (no auto-refresh)
+    func rawRequest<T: Decodable>(
+        endpoint: String,
+        method: String,
+        headers: [String: String],
+        body: Encodable? = nil
+    ) async throws -> T {
+        guard let url = URL(string: endpoint, relativeTo: baseURL) else {
+            throw URLError(.badURL)
+        }
+
+        var urlRequest = URLRequest(url: url)
+        urlRequest.httpMethod = method
+        urlRequest.setValue("application/json", forHTTPHeaderField: "Content-Type")
+
+        for (k, v) in headers {
+            urlRequest.setValue(v, forHTTPHeaderField: k)
+        }
+
+        if let body = body {
+            urlRequest.httpBody = try JSONEncoder().encode(body)
+        }
+
+        let (data, response) = try await URLSession.shared.data(for: urlRequest)
+
+        guard let httpResponse = response as? HTTPURLResponse,
+              (200...299).contains(httpResponse.statusCode) else {
+            throw URLError(.badServerResponse)
+        }
+
+        return try JSONDecoder().decode(T.self, from: data)
+    }
+}
diff --git a/SmartSpend/Network/KeychainHelper.swift b/SmartSpend/Network/KeychainHelper.swift
index 5ee2619..f04ee3f 100644
--- a/SmartSpend/Network/KeychainHelper.swift
+++ b/SmartSpend/Network/KeychainHelper.swift
@@ -43,4 +43,14 @@ class KeychainHelper {
         }
         return nil
     }
+    
+    func delete(service: String, account: String) {
+          let query = [
+              kSecClass: kSecClassGenericPassword,
+              kSecAttrService: service,
+              kSecAttrAccount: account
+          ] as CFDictionary
+          
+          SecItemDelete(query)
+      }
 }
diff --git a/SmartSpend/Network/TokenManager.swift b/SmartSpend/Network/TokenManager.swift
index 3004f7e..5d32a5b 100644
--- a/SmartSpend/Network/TokenManager.swift
+++ b/SmartSpend/Network/TokenManager.swift
@@ -5,44 +5,334 @@
 //  Created by Refik Jaija on 20.8.25.
 //
 // Network/TokenManager.swift
+//import Foundation
+//import Security
+//
+//actor TokenManager {
+//    static let shared = TokenManager()
+//
+//    private(set) var accessToken: String?
+//    private(set) var refreshToken: String?
+//
+//    func saveTokens(access: String, refresh: String) {
+//        self.accessToken = access
+//        self.refreshToken = refresh
+//        KeychainHelper.standard.save(access, service: "SmartSpend", account: "accessToken")
+//        KeychainHelper.standard.save(refresh, service: "SmartSpend", account: "refreshToken")
+//    }
+//    func clearTokens() async {
+//        KeychainHelper.standard.delete(service: "SmartSpend", account: "accessToken")
+//        KeychainHelper.standard.delete(service: "SmartSpend", account: "refreshToken")
+//        // Also clear any in-memory tokens if you have them
+//    }
+//    
+//    func loadTokens() {
+//        if let access = KeychainHelper.standard.read(service: "SmartSpend", account: "accessToken") {
+//            self.accessToken = access
+//        }
+//        
+//        if let refresh = KeychainHelper.standard.read(service: "SmartSpend", account: "refreshToken") {
+//            self.refreshToken = refresh
+//        }
+//    }
+//    
+//
+//    func refreshAccessToken() async throws {
+//        // require refresh token at minimum
+//        guard let refresh = refreshToken else {
+//            throw URLError(.userAuthenticationRequired)
+//        }
+//
+//        struct RefreshResponse: Decodable {
+//            let access_token: String
+//        }
+//
+//        let client = APIClient.shared
+//
+//        // Build headers per your API docs: include Authorization (possibly expired) and Refresh-Token header
+//        var headers = [String: String]()
+//        if let access = accessToken {
+//            headers["Authorization"] = "Bearer \(access)"
+//        } else {
+//            // If your backend *requires* Authorization header and it's missing, you might need to force re-login.
+//            // You can still try without it — many servers accept just the Refresh-Token header.
+//            print("Warning: accessToken missing when attempting refresh; continuing with Refresh-Token header only.")
+//        }
+//        headers["Refresh-Token"] = refresh
+//
+//        // Call refresh endpoint but do NOT allow APIClient to auto-refresh on 401 (prevents recursion)
+//        let response: RefreshResponse = try await client.request(
+//            endpoint: "api/token/",
+//            method: "POST",
+//            headers: headers,
+//            body: nil,
+//        )
+//
+//        // Save the new access token
+//        self.accessToken = response.access_token
+//        KeychainHelper.standard.save(response.access_token, service: "SmartSpend", account: "accessToken")
+//    }
+//
+//
+//}
+
+
+//    func refreshAccessToken() async throws {
+//        guard let refresh = refreshToken else { throw URLError(.userAuthenticationRequired) }
+//
+//        struct RefreshRequest: Encodable {
+//        let jwt_token: String
+//        }
+//        struct RefreshResponse: Decodable {
+//        let jwt_token: String
+//         }
+//
+//        let client = APIClient.shared
+//        let response: RefreshResponse = try await client.request(
+//            endpoint: "api/token/",
+//            method: "POST",
+//            body: RefreshRequest(jwt_token: refresh)
+//        )
+//
+//        self.accessToken = response.jwt_token
+//    }
+    
+    
+//    func refreshAccessToken() async throws {
+//        guard let refresh = refreshToken,
+//              let access = accessToken else {
+//            throw URLError(.userAuthenticationRequired)
+//        }
+//
+//        struct RefreshResponse: Decodable {
+//            let access_token: String
+//        }
+//
+//        let client = APIClient.shared
+//        let response: RefreshResponse = try await client.request(
+//            endpoint: "api/token/",
+//            method: "POST",
+//            headers: [
+//                "Authorization": "Bearer \(access)",
+//                "Refresh-Token": refresh
+//            ]
+//        )
+//
+//        self.accessToken = response.access_token
+//
+//        KeychainHelper.standard.save(response.access_token, service: "SmartSpend", account: "accessToken")
+//    }
+//
+    
+
+
+
+
+//  TokenManager.swift
+//  SmartSpend
+//
+//  Created by Refik Jaija on 20.8.25.
+//
+// Network/TokenManager.swift
+//
+//import Foundation
+//import Security
+//
+//actor TokenManager {
+//    static let shared = TokenManager()
+//
+//    private(set) var accessToken: String?
+//    private(set) var refreshToken: String?
+//
+//    func saveTokens(access: String, refresh: String) {
+//        self.accessToken = access
+//        self.refreshToken = refresh
+//        KeychainHelper.standard.save(refresh, service: "SmartSpend", account: "refreshToken")
+//    }
+//
+//    func loadTokens() {
+//        if let refresh = KeychainHelper.standard.read(service: "SmartSpend", account: "refreshToken") {
+//            self.refreshToken = refresh
+//        }
+//    }
+//
+//    func refreshAccessToken() async throws {
+//        guard let refresh = refreshToken else { throw URLError(.userAuthenticationRequired) }
+//
+//        struct RefreshRequest: Encodable {
+//        let jwt_token: String
+//        }
+//        struct RefreshResponse: Decodable {
+//        let jwt_token: String
+//         }
+//
+//        let client = APIClient.shared
+//        let response: RefreshResponse = try await client.request(
+//            endpoint: "/auth/refresh-jwt",
+//            method: "POST",
+//            body: RefreshRequest(jwt_token: refresh)
+//        )
+//
+//        self.accessToken = response.jwt_token
+//    }
+//}
+//
+//
+//
+//
+
+
+//
+//import Foundation
+//import Security
+//
+//actor TokenManager {
+//    static let shared = TokenManager()
+//
+//    private(set) var accessToken: String?
+//    private(set) var refreshToken: String?
+//
+//    func saveTokens(access: String, refresh: String) {
+//        self.accessToken = access
+//        self.refreshToken = refresh
+//        KeychainHelper.standard.save(access, service: "SmartSpend", account: "accessToken")
+//        KeychainHelper.standard.save(refresh, service: "SmartSpend", account: "refreshToken")
+//    }
+//
+//    func loadTokens() {
+//        if let access = KeychainHelper.standard.read(service: "SmartSpend", account: "accessToken") {
+//            self.accessToken = access
+//        }
+//        if let refresh = KeychainHelper.standard.read(service: "SmartSpend", account: "refreshToken") {
+//            self.refreshToken = refresh
+//        }
+//    }
+//
+//    func clearTokens() {
+//        KeychainHelper.standard.delete(service: "SmartSpend", account: "accessToken")
+//        KeychainHelper.standard.delete(service: "SmartSpend", account: "refreshToken")
+//        self.accessToken = nil
+//        self.refreshToken = nil
+//    }
+//
+//    func refreshAccessToken() async throws {
+//        guard let refresh = refreshToken,
+//              let access = accessToken else {
+//            throw URLError(.userAuthenticationRequired)
+//        }
+//
+//        struct RefreshResponse: Decodable {
+//            let access_token: String
+//        }
+//
+//        let client = APIClient.shared
+//        let response: RefreshResponse = try await client.rawRequest(
+//            endpoint: "api/token",
+//            method: "POST",
+//            headers: [
+//                "Authorization": "Bearer \(access)",
+//                "Refresh-Token": refresh
+//            ]
+//        )
+//
+//        // Save new access token
+//        self.accessToken = response.access_token
+//        KeychainHelper.standard.save(response.access_token, service: "SmartSpend", account: "accessToken")
+//    }
+//}
+
+
 import Foundation
-import Security
+
+struct Tokens: Codable {
+    let accessToken: String
+    let refreshToken: String
+    let refreshExpiry: Date
+}
 
 actor TokenManager {
     static let shared = TokenManager()
 
-    private(set) var accessToken: String?
-    private(set) var refreshToken: String?
+    private(set) var tokens: Tokens?
+
+    func saveTokens(access: String, refresh: String, expiry: Date) {
+        let tokens = Tokens(accessToken: access, refreshToken: refresh, refreshExpiry: expiry)
+        self.tokens = tokens
 
-    func saveTokens(access: String, refresh: String) {
-        self.accessToken = access
-        self.refreshToken = refresh
+        // Persist each field
+        KeychainHelper.standard.save(access, service: "SmartSpend", account: "accessToken")
         KeychainHelper.standard.save(refresh, service: "SmartSpend", account: "refreshToken")
+        KeychainHelper.standard.save(String(expiry.timeIntervalSince1970),
+                                     service: "SmartSpend", account: "refreshExpiry")
+        
+        print("✅ Tokens saved to Keychain")
+
     }
 
+//    func loadTokens() {
+//        guard
+//            let access = KeychainHelper.standard.read(service: "SmartSpend", account: "accessToken"),
+//            let refresh = KeychainHelper.standard.read(service: "SmartSpend", account: "refreshToken"),
+//            let expiryStr = KeychainHelper.standard.read(service: "SmartSpend", account: "refreshExpiry"),
+//            let expiryTimestamp = TimeInterval(expiryStr)
+//        else {
+//            self.tokens = nil
+//            return
+//        }
+//
+//        self.tokens = Tokens(accessToken: access, refreshToken: refresh, refreshExpiry: Date(timeIntervalSince1970: expiryTimestamp))
+//    }
+    
     func loadTokens() {
-        if let refresh = KeychainHelper.standard.read(service: "SmartSpend", account: "refreshToken") {
-            self.refreshToken = refresh
+        let access = KeychainHelper.standard.read(service: "SmartSpend", account: "accessToken")
+        let refresh = KeychainHelper.standard.read(service: "SmartSpend", account: "refreshToken")
+        let expiryStr = KeychainHelper.standard.read(service: "SmartSpend", account: "refreshExpiry")
+
+        print("🔑 Loaded access:", access ?? "nil")
+        print("🔑 Loaded refresh:", refresh ?? "nil")
+        print("🔑 Loaded expiry:", expiryStr ?? "nil")
+
+        guard let access, let refresh, let expiryStr, let expiryTimestamp = TimeInterval(expiryStr) else {
+            self.tokens = nil
+            return
         }
+
+        self.tokens = Tokens(accessToken: access, refreshToken: refresh, refreshExpiry: Date(timeIntervalSince1970: expiryTimestamp))
     }
 
-    func refreshAccessToken() async throws {
-        guard let refresh = refreshToken else { throw URLError(.userAuthenticationRequired) }
 
-        struct RefreshRequest: Encodable {
-        let jwt_token: String
+    func clearTokens() {
+        ["accessToken", "refreshToken", "refreshExpiry"].forEach {
+            KeychainHelper.standard.delete(service: "SmartSpend", account: $0)
         }
+        self.tokens = nil
+    }
+
+    func refreshAccessToken() async throws {
+        guard let tokens = tokens else {
+            throw URLError(.userAuthenticationRequired)
+        }
+
         struct RefreshResponse: Decodable {
-        let jwt_token: String
-         }
+            let access_token: String
+        }
 
-        let client = APIClient.shared
-        let response: RefreshResponse = try await client.request(
-            endpoint: "/auth/refresh-jwt",
+        let response: RefreshResponse = try await APIClient.shared.rawRequest(
+            endpoint: "api/token/",
             method: "POST",
-            body: RefreshRequest(jwt_token: refresh)
+            headers: [
+                "Authorization": "Bearer \(tokens.accessToken)",
+                "Refresh-Token": tokens.refreshToken
+            ]
         )
 
-        self.accessToken = response.jwt_token
+        // Save new access token
+        saveTokens(access: response.access_token,
+                   refresh: tokens.refreshToken,
+                   expiry: tokens.refreshExpiry) // keep same refresh expiry
     }
+
+    var accessToken: String? { tokens?.accessToken }
+    var refreshToken: String? { tokens?.refreshToken }
+    var refreshExpiry: Date? { tokens?.refreshExpiry }
 }
diff --git a/SmartSpend/Shared/Color.swift b/SmartSpend/Shared/Color.swift
index 406b3c9..c6b594f 100644
--- a/SmartSpend/Shared/Color.swift
+++ b/SmartSpend/Shared/Color.swift
@@ -9,4 +9,5 @@ import SwiftUI
 
 extension Color {
     static let MainColor = Color(red: 204/255, green: 172/255, blue: 0/255)
+    static let LogOutColor = Color(red: 254/255, green: 50/255, blue: 78/255)
 }
diff --git a/SmartSpend/SmartSpendApp.swift b/SmartSpend/SmartSpendApp.swift
index cf62213..b138043 100644
--- a/SmartSpend/SmartSpendApp.swift
+++ b/SmartSpend/SmartSpendApp.swift
@@ -11,9 +11,10 @@ import GoogleSignIn
 
 @main
 struct SmartSpendApp: App {
-    @StateObject var authVM = AuthenticationViewModel()
     @StateObject var userVM = UserViewModel()
+    @StateObject var authVM = AuthenticationViewModel()
     @StateObject var categoryVM = CategoryViewModel()
+    @StateObject var transactionVM = TransactionViewModel()
     
 
     var body: some Scene {
@@ -22,9 +23,13 @@ struct SmartSpendApp: App {
                 .environmentObject(userVM)
                 .environmentObject(categoryVM)
                 .environmentObject(authVM)
+                .environmentObject(transactionVM)
                 .onOpenURL { url in
                     GIDSignIn.sharedInstance.handle(url)
                 }
+                .task {
+                    await authVM.restoreSession(userVM: userVM)
+                }
         }
     }
 }
diff --git a/SmartSpend/Transactions/Models/Transaction.swift b/SmartSpend/Transactions/Models/Transaction.swift
index 0e00c24..f68fd56 100644
--- a/SmartSpend/Transactions/Models/Transaction.swift
+++ b/SmartSpend/Transactions/Models/Transaction.swift
@@ -23,12 +23,11 @@ import Foundation
 //}
 
 struct Transaction: Identifiable, Codable {
-    let id: UUID
+    let id: Int64?
     let title: String
     let price: Double
-    let dateMade: Date
-    let ownerId: UUID
-    let category: Category?
+    let date_made: Date
+    let category_id: Int64?
     let type: TransactionType
 
     enum TransactionType: String, Codable {
@@ -36,15 +35,7 @@ struct Transaction: Identifiable, Codable {
         case income = "Income"
     }
 
-//    enum CodingKeys: String, CodingKey {
-//        case id = "Id"
-//        case title = "Title"
-//        case price = "Price"
-//        case dateMade = "DateMade"
-//        case ownerId = "Owner"
-//        case category = "Category"
-//        case type = "Type"
-//    }
+
 }
 
 
@@ -52,7 +43,7 @@ struct Transaction: Identifiable, Codable {
 extension Array where Element == Transaction {
     func groupedByDay() -> [Date: [Transaction]] {
         Dictionary(grouping: self) { transaction in
-            Calendar.current.startOfDay(for: transaction.dateMade)
+            Calendar.current.startOfDay(for: transaction.date_made)
         }
     }
 }
diff --git a/SmartSpend/Transactions/ViewModels/TransactionViewModel.swift b/SmartSpend/Transactions/ViewModels/TransactionViewModel.swift
index 7d9382f..84bcfa1 100644
--- a/SmartSpend/Transactions/ViewModels/TransactionViewModel.swift
+++ b/SmartSpend/Transactions/ViewModels/TransactionViewModel.swift
@@ -34,65 +34,58 @@ class TransactionViewModel: ObservableObject{
     }
     
     func loadFakeData(){
-        let category: Category = Category(id: UUID(), name: "Job")
          transactions = [
            Transaction(
-               id: UUID(),
+               id: 1,
                title: "Salary",
                price: 2500,
-               dateMade: Date().addingTimeInterval(-86400 * 1), // 1 day ago
-               ownerId: UUID(),
-               category: category,
+               date_made: Date().addingTimeInterval(-86400 * 1), // 1 day ago
+               category_id: 1,
                type: .income
                
            ),
            Transaction(
-               id: UUID(),
+               id: 2,
                title: "Bonus",
                price: 500,
-               dateMade: Date().addingTimeInterval(-86400 * 1), // 1 day ago
-               ownerId: UUID(),
-               category: category,
+               date_made: Date().addingTimeInterval(-86400 * 1), // 1 day ago
+               category_id: 2,
                type: .income
                
            ),
            Transaction(
-               id: UUID(),
+               id: 3,
                title: "Groceries",
                price: 85.50,
-               dateMade: Date().addingTimeInterval(-86400 * 2), // 2 days ago
-               ownerId: UUID(),
-               category: category,
+               date_made: Date().addingTimeInterval(-86400 * 2), // 2 days ago
+               category_id: 3,
                type: .expense
                
            ),
            Transaction(
-               id: UUID(),
+               id: 4,
                title: "Coffee",
                price: 3.20,
-               dateMade: Date().addingTimeInterval(-3600 * 5), // 5 hours ago
-               ownerId: UUID(),
-               category: category,
+               date_made: Date().addingTimeInterval(-3600 * 5), // 5 hours ago
+               category_id: 4,
                type: .expense
                
            ),
            Transaction(
-               id: UUID(),
+               id: 5,
                title: "Freelance Project",
                price: 600,
-               dateMade: Date().addingTimeInterval(-86400 * 3), // 3 days ago
-               ownerId: UUID(),
-               category: category,
+               date_made: Date().addingTimeInterval(-86400 * 3), // 3 days ago
+               category_id: 5,
                type: .income
                
            ),
            Transaction(
-               id: UUID(),
+               id: 6,
                title: "Netflix",
                price: 9.99,
-               dateMade: Date().addingTimeInterval(-86400 * 4),
-               ownerId: UUID(),
-               category: category,
+               date_made: Date().addingTimeInterval(-86400 * 4),
+               category_id: 6,
                type: .expense
                
            )
@@ -137,14 +130,13 @@ class TransactionViewModel: ObservableObject{
     
     
     
-    func addTransaction(title: String, price: Double, dateMade: Date, type: Transaction.TransactionType, ownerId: UUID, category: Category? = nil) async {
+    func addTransaction(title: String, price: Double, date_made: Date, type: Transaction.TransactionType, category_id: Int64? = nil) async {
         let newTransaction = Transaction(
-            id: UUID(),                
+            id: nil,
             title: title,
             price: price,
-            dateMade: dateMade,
-            ownerId: ownerId,          // required by backend
-            category: category,
+            date_made: date_made,
+            category_id: category_id,
             type: type
         )
         
diff --git a/SmartSpend/Transactions/Views/TransactionPartialView.swift b/SmartSpend/Transactions/Views/TransactionPartialView.swift
index 0a82fa1..2ce6349 100644
--- a/SmartSpend/Transactions/Views/TransactionPartialView.swift
+++ b/SmartSpend/Transactions/Views/TransactionPartialView.swift
@@ -8,8 +8,8 @@
 import SwiftUI
 
 struct TransactionPartialView: View {
-    @StateObject private var viewModel: TransactionViewModel = TransactionViewModel()
-    
+    @EnvironmentObject var transactionVM: TransactionViewModel
+
     var body: some View {
         
         NavigationStack{
@@ -24,7 +24,7 @@ struct TransactionPartialView: View {
 
 
             
-            List(viewModel.transactions.suffix(3)){ transaction in
+            List(transactionVM.transactions.suffix(3)){ transaction in
                 HStack(alignment: .center, spacing: nil){
                     if (transaction.type == .income){
                         Image(systemName: "arrow.down.backward").foregroundStyle(.green)
@@ -70,4 +70,5 @@ struct TransactionPartialView: View {
 
 #Preview {
     TransactionPartialView()
+        .environmentObject(TransactionViewModel())
 }
diff --git a/SmartSpend/Transactions/Views/TransactionsFilterView.swift b/SmartSpend/Transactions/Views/TransactionsFilterView.swift
index c1ee627..d3598b3 100644
--- a/SmartSpend/Transactions/Views/TransactionsFilterView.swift
+++ b/SmartSpend/Transactions/Views/TransactionsFilterView.swift
@@ -9,14 +9,15 @@ import SwiftUI
 
 struct TransactionsFilterView: View {
     @State private var showFilters = false
-    @StateObject private var viewModel = TransactionViewModel()
+    @EnvironmentObject var transactionVM: TransactionViewModel
+
     
     var body: some View {
         VStack(spacing: 12) {
             
             // Top bar
             HStack {
-                Text("\(viewModel.startDate.formatted(date: .abbreviated, time: .omitted)) - \(viewModel.endDate.formatted(date: .abbreviated, time: .omitted))")
+                Text("\(transactionVM.startDate.formatted(date: .abbreviated, time: .omitted)) - \(transactionVM.endDate.formatted(date: .abbreviated, time: .omitted))")
                     .font(.caption)
                 Spacer()
                 Button {
@@ -43,14 +44,14 @@ struct TransactionsFilterView: View {
             // Show this only if filter button is pressed
             if showFilters {
                 HStack {
-                    DatePicker("From", selection: $viewModel.startDate, displayedComponents: .date)
+                    DatePicker("From", selection: $transactionVM.startDate, displayedComponents: .date)
                         .labelsHidden()
-                    DatePicker("To", selection: $viewModel.endDate, displayedComponents: .date)
+                    DatePicker("To", selection: $transactionVM.endDate, displayedComponents: .date)
                         .labelsHidden()
                     
                     Button {
                         Task {
-                            await viewModel.fetchTransactions()
+                            await transactionVM.fetchTransactions()
                         }
                     } label: {
                         Text("Apply")
@@ -70,4 +71,5 @@ struct TransactionsFilterView: View {
 
 #Preview {
     TransactionsFilterView()
+        .environmentObject(TransactionViewModel())
 }
diff --git a/SmartSpend/Transactions/Views/TransactionsFullView.swift b/SmartSpend/Transactions/Views/TransactionsFullView.swift
index 89c3a67..3a223be 100644
--- a/SmartSpend/Transactions/Views/TransactionsFullView.swift
+++ b/SmartSpend/Transactions/Views/TransactionsFullView.swift
@@ -59,13 +59,16 @@
 //}
 //
 
+
+
 import SwiftUI
 
 struct TransactionsFullView: View {
-    @StateObject private var viewModel = TransactionViewModel()
+    @EnvironmentObject var transactionVM: TransactionViewModel
+
     
     var body: some View {
-        let grouped = viewModel.transactions.groupedByDay()
+        let grouped = transactionVM.transactions.groupedByDay()
         let sortedDays = grouped.keys.sorted(by: >) // newest first
         
         NavigationStack {
@@ -115,6 +118,7 @@ struct TransactionsFullView: View {
 
 #Preview {
     TransactionsFullView()
+        .environmentObject(TransactionViewModel())
 }
 
 
diff --git a/SmartSpend/User/Models/UpdateUserRequest.swift b/SmartSpend/User/Models/UpdateUserRequest.swift
new file mode 100644
index 0000000..4988578
--- /dev/null
+++ b/SmartSpend/User/Models/UpdateUserRequest.swift
@@ -0,0 +1,19 @@
+//
+//  UpdateUserRequest.swift
+//  SmartSpend
+//
+//  Created by Refik Jaija on 2.9.25.
+//
+
+import Foundation
+
+
+struct UpdateUserRequest: Encodable {
+    var first_name: String?
+    var last_name: String?
+    var username: String?
+    var avatar_url: String?
+    var balance: Float?
+    var monthly_saving_goal: Float?
+    var preferred_currency: User.Currency?
+}
diff --git a/SmartSpend/User/Models/User.swift b/SmartSpend/User/Models/User.swift
index 6cf0b2d..a00f9c3 100644
--- a/SmartSpend/User/Models/User.swift
+++ b/SmartSpend/User/Models/User.swift
@@ -7,38 +7,25 @@
 
 import Foundation
 
-struct User: Codable, Identifiable {
-    let id: UUID
-    let firstName: String
-    let lastName: String
+struct User: Codable {
+    let first_name: String
+    let last_name: String
     let username: String
-    let googleEmail: String?
-    let appleEmail: String?
-    let refreshToken: String?
-    let refreshTokenExpiryDate: String?
-    let avatarURL: String?
-    let createdAt: Date
+    let google_email: String?
+    let apple_email: String?
+    let avatar_url: String?
     
-    let categories: [Category]
     let balance: Float
-    let monthlySavingGoal: Float
-    let preferredCurrency: String
+    let monthly_saving_goal: Float
+    let preferred_currency: Currency
     
+    enum Currency: String, CaseIterable, Identifiable, Codable{
+        
+        case MKD
+        case EUR
+        case USD
+        var id: Self { self }
+    }
+
     
-//    enum CodingKeys: String, CodingKey {
-//        case id = "Id"
-//        case firstName = "FirstName"
-//        case lastName = "LastName"
-//        case username = "Username"
-//        case googleEmail = "GoogleEmail"
-//        case appleEmail = "AppleEmail"
-//        case refreshToken = "RefreshToken"
-//        case refreshTokenExpiryDate = "RefreshTokenExpiryDate"
-//        case avatarURL = "AvatarURL"
-//        case createdAt = "CreatedAt"
-//        case categories = "Categories"
-//        case balance = "Balance"
-//        case monthlySavingGoal = "MonthlySavingGoal"
-//        case preferredCurrency = "PreferredCurrency"
-//    }
 }
diff --git a/SmartSpend/User/Models/UserResponse.swift b/SmartSpend/User/Models/UserResponse.swift
new file mode 100644
index 0000000..149f72b
--- /dev/null
+++ b/SmartSpend/User/Models/UserResponse.swift
@@ -0,0 +1,14 @@
+//
+//  UserResponse.swift
+//  SmartSpend
+//
+//  Created by Refik Jaija on 3.9.25.
+//
+
+import Foundation
+
+
+struct UserResponse: Codable {
+    let data: User
+}
+
diff --git a/SmartSpend/User/ViewModels/UserViewModel.swift b/SmartSpend/User/ViewModels/UserViewModel.swift
index 135c2f3..fc1a67e 100644
--- a/SmartSpend/User/ViewModels/UserViewModel.swift
+++ b/SmartSpend/User/ViewModels/UserViewModel.swift
@@ -7,6 +7,17 @@
 
 import Foundation
 
+//enum Enpoints1 {
+//    case user
+//
+//    var getPath: String {
+//        switch self {
+//        case .user:
+//            "user/me"
+//        }
+//    }
+//}
+
 
 @MainActor
 class UserViewModel: ObservableObject {
@@ -14,13 +25,32 @@ class UserViewModel: ObservableObject {
 
     func fetchUser() async {
         do {
-            self.currentUser = try await APIClient.shared.request(endpoint: "/user")
+            let response: UserResponse = try await APIClient.shared.request(endpoint: "api/user/me")
+            self.currentUser = response.data
         } catch {
             print("Failed to fetch user:", error)
         }
     }
 
-    func updateProfile(name: String) async {
-        // Call API /user/update
+    
+    func updateProfile(_ request: UpdateUserRequest) async {
+        
+        struct UpdateUserResponse: Decodable {
+            let message: String
+        }
+        
+        do {
+            let response: UpdateUserResponse = try await APIClient.shared.request(
+                endpoint: "api/user/update",
+                method: "POST",
+                body: request
+            )
+            print(response.message)
+
+//            await fetchUser()
+
+        } catch {
+            print("Failed to update user:", error)
+        }
     }
 }
-- 
2.46.0

